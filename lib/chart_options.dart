library highcharts.options;

import 'package:uuid/uuid.dart';
import 'dart:js';
import 'package:js/js.dart';
import 'dart:html';

@JS('Highcharts.Chart')
class HighchartsChart extends OptionsObject with Chart {
  external HighchartsChart (ChartOptions options);
  external List<Series> get series;
  external List<Axis> get axes;
}

@JS()
@anonymous
class OptionsObject {
  static Uuid uidGen = new Uuid();
  JsObject jsChart;
}

@JS()
@anonymous
class Axis extends OptionsObject {
}

@JS()
@anonymous
class ChartOptions extends OptionsObject {
  external factory ChartOptions ();

  external Chart get chart;
  external void set chart (Chart a_chart);

  external List<String> get colors;
  external void set colors (List<String> a_colors);

  external Credits get credits;
  external void set credits (Credits a_credits);

  external Data get data;
  external void set data (Data a_data);

  external Drilldown get drilldown;
  external void set drilldown (Drilldown a_drilldown);

  external Exporting get exporting;
  external void set exporting (Exporting a_exporting);

  external Labels get labels;
  external void set labels (Labels a_labels);

  external Legend get legend;
  external void set legend (Legend a_legend);

  external Loading get loading;
  external void set loading (Loading a_loading);

  external Navigation get navigation;
  external void set navigation (Navigation a_navigation);

  external NoData get noData;
  external void set noData (NoData a_noData);

  external Pane get pane;
  external void set pane (Pane a_pane);

  external PlotOptions get plotOptions;
  external void set plotOptions (PlotOptions a_plotOptions);

  external List<Series> get series;
  external void set series (List<Series> a_series);

  external Subtitle get subtitle;
  external void set subtitle (Subtitle a_subtitle);

  external Title get title;
  external void set title (Title a_title);

  external Tooltip get tooltip;
  external void set tooltip (Tooltip a_tooltip);

  external XAxis get xAxis;
  external void set xAxis (XAxis a_xAxis);

  external YAxis get yAxis;
  external void set yAxis (YAxis a_yAxis);

}

@JS()
@anonymous
class Chart extends OptionsObject {
  external factory Chart ();
  /**
   * When using multiple axis, the ticks of two or more opposite axes will  automatically be aligned by adding ticks to the axis or axes with the least ticks. This can be prevented by setting <code>alignTicks</code> to false. If the grid lines look messy, it's a good idea to hide them for the secondary axis by setting <code>gridLineWidth</code> to 0.
   */
  external bool get alignTicks;
  external void set alignTicks (bool a_alignTicks);
  /**
   * <p>Set the overall animation for all chart updating. Animation can be disabled throughout

      the chart by setting it to false here. It can be overridden for each individual

      API method as a function parameter. The only animation not affected by this option is the

      initial series animation, see <a class="internal" href="#plotOptions.series.animation">plotOptions.series.animation</a>.</p>



      <p>The animation can either be set as a boolean or a configuration object. If <code>true</code>,

      it will use the 'swing' jQuery easing and a duration of 500 ms. If used as a configuration object,

      the following properties are supported:

      </p><dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>



      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>
   */
  external dynamic get animation;
  external void set animation (dynamic a_animation);
  /**
   * The background color or gradient for the outer chart area.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The color of the outer chart border.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The corner radius of the outer chart border.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The pixel width of the outer chart border.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * A CSS class name to apply to the charts container <code>div</code>, allowing unique CSS styling for each chart.
   */
  external String get className;
  external void set className (String a_className);
  /**
   * Alias of <code>type</code>.
   */
  @deprecated
  external String get defaultSeriesType;
  @deprecated
  external void set defaultSeriesType (String a_defaultSeriesType);
  /**
   * Event listeners for the chart.
   */
  external ChartEvents get events;
  external void set events (ChartEvents a_events);
  /**
   * An explicit height for the chart. By default the height is calculated from the offset height of the containing element, or 400 pixels if the containing element's height is 0.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * If true, the axes will scale to the remaining visible series once one series is hidden. If false, hiding and showing a series will not affect the axes or the other series. For stacks, once one series within the stack is hidden, the rest of the stack will close in around it even if the axis is not affected.
   */
  external bool get ignoreHiddenSeries;
  external void set ignoreHiddenSeries (bool a_ignoreHiddenSeries);
  /**
   * Whether to invert the axes so that the x axis is vertical and y axis is horizontal.
      When true, the x axis is reversed by default. If a bar series is present in the chart,
      it will be inverted automatically.
   */
  external bool get inverted;
  external void set inverted (bool a_inverted);
  /**
   * <p>The margin between the outer edge of the chart and the plot area. The numbers in the array designate top, right, bottom and left respectively. Use the options <code>marginTop</code>, <code>marginRight</code>, <code>marginBottom</code> and <code>marginLeft</code> for shorthand setting of one option.</p> <p>Since version 2.1, the margin is 0 by default. The actual space is dynamically calculated  from the offset of axis labels, axis title, title, subtitle and legend in addition to the <code>spacingTop</code>, <code>spacingRight</code>, <code>spacingBottom</code> and <code>spacingLeft</code> options.</p>
      Defaults to <code>[null]</code>.
   */
  external List get margin;
  external void set margin (List a_margin);
  /**
   * The margin between the bottom outer edge of the chart and the plot area. Use this to set a fixed
      pixel value for the margin as opposed to the default dynamic margin. See also <code>spacingBottom</code>.
   */
  external num get marginBottom;
  external void set marginBottom (num a_marginBottom);
  /**
   * The margin between the left outer edge of the chart and the plot area. Use this to set a fixed
      pixel value for the margin as opposed to the default dynamic margin. See also <code>spacingLeft</code>.
   */
  external num get marginLeft;
  external void set marginLeft (num a_marginLeft);
  /**
   * The margin between the right outer edge of the chart and the plot area. Use this to set a fixed
      pixel value for the margin as opposed to the default dynamic margin. See also <code>spacingRight</code>.
   */
  external num get marginRight;
  external void set marginRight (num a_marginRight);
  /**
   * The margin between the top outer edge of the chart and the plot area. Use this to set a fixed pixel value for the margin as opposed to the default dynamic margin. See also <code>spacingTop</code>.
   */
  external num get marginTop;
  external void set marginTop (num a_marginTop);
  /**
   * Options to render charts in 3 dimensions. This feature requires <code>highcharts-3d.js</code>, found in the download package or online at <a href="http://code.highcharts.com/highcharts-3d.js">code.highcharts.com/highcharts-3d.js</a>.
   */
  external ChartOptions3d get options3d;
  external void set options3d (ChartOptions3d a_options3d);
  /**
   * Allows setting a key to switch between zooming and panning.
   */
  external String get panKey;
  external void set panKey (String a_panKey);
  /**
   * Allow panning in a chart. Best used with <a href="#chart.panKey">panKey</a> to combine zooming and panning.
   */
  external bool get panning;
  external void set panning (bool a_panning);
  /**
   * Equivalent to <a href="#chart.zoomType">zoomType</a>, but for multitouch gestures only. By default, the <code>pinchType</code> is the same as the <code>zoomType</code> setting. However, pinching can be enabled separately in some cases, for example in stock charts where a mouse drag pans the chart, while pinching is enabled.
   */
  external String get pinchType;
  external void set pinchType (String a_pinchType);
  /**
   * The background color or gradient for the plot area.
   */
  external dynamic get plotBackgroundColor;
  external void set plotBackgroundColor (dynamic a_plotBackgroundColor);
  /**
   * The URL for an image to use as the plot background. To set an image as the background for the entire chart, set a CSS background image to the container element. Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.
   */
  external String get plotBackgroundImage;
  external void set plotBackgroundImage (String a_plotBackgroundImage);
  /**
   * The color of the inner chart or plot area border.
   */
  external dynamic get plotBorderColor;
  external void set plotBorderColor (dynamic a_plotBorderColor);
  /**
   * The pixel width of the plot area border.
   */
  external num get plotBorderWidth;
  external void set plotBorderWidth (num a_plotBorderWidth);
  /**
   * Whether to apply a drop shadow to the plot area. Requires that plotBackgroundColor be set. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get plotShadow;
  external void set plotShadow (dynamic a_plotShadow);
  /**
   * When true, cartesian charts like line, spline, area and column are transformed into the polar coordinate system. Requires <code>highcharts-more.js</code>.
   */
  external bool get polar;
  external void set polar (bool a_polar);
  /**
   * Whether to reflow the chart to fit the width of the container div on resizing the window.
   */
  external bool get reflow;
  external void set reflow (bool a_reflow);
  /**
   * The HTML element where the chart will be rendered. If it is a string, the element by that id is used. The HTML element can also be passed by direct reference.
   */
  external dynamic get renderTo;
  external void set renderTo (dynamic a_renderTo);
  /**
   * The button that appears after a selection zoom, allowing the user to reset zoom.
   */
  external ChartResetZoomButton get resetZoomButton;
  external void set resetZoomButton (ChartResetZoomButton a_resetZoomButton);
  /**
   * The background color of the marker square when selecting (zooming in on) an area of the chart.
   */
  external dynamic get selectionMarkerFill;
  external void set selectionMarkerFill (dynamic a_selectionMarkerFill);
  /**
   * Whether to apply a drop shadow to the outer chart area. Requires that
      backgroundColor be set. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * Whether to show the axes initially. This only applies to empty charts where series are added dynamically, as axes are automatically added to cartesian series.
   */
  external bool get showAxes;
  external void set showAxes (bool a_showAxes);
  /**
   * The distance between the outer edge of the chart and the content, like title, legend, axis title or labels. The numbers in the array designate top, right, bottom and left respectively. Use the options spacingTop, spacingRight, spacingBottom and spacingLeft options for shorthand setting of one option.
   */
  external List<num> get spacing;
  external void set spacing (List<num> a_spacing);
  /**
   * <p>The space between the bottom edge of the chart and the content (plot area, axis title and labels, title, subtitle or
      legend in top position).</p>
   */
  external num get spacingBottom;
  external void set spacingBottom (num a_spacingBottom);
  /**
   * <p>The space between the left edge of the chart and the content (plot area, axis title and labels, title, subtitle or
      legend in top position).</p>
   */
  external num get spacingLeft;
  external void set spacingLeft (num a_spacingLeft);
  /**
   * <p>The space between the right edge of the chart and the content (plot area, axis title and labels, title, subtitle or
      legend in top position).</p>
   */
  external num get spacingRight;
  external void set spacingRight (num a_spacingRight);
  /**
   * <p>The space between the top edge of the chart and the content (plot area, axis title and labels, title, subtitle or

      legend in top position).</p>
   */
  external num get spacingTop;
  external void set spacingTop (num a_spacingTop);
  /**
   * Additional CSS styles to apply inline to the container <code>div</code>. Note that since the default font styles are applied in the renderer, it is ignorant of the individual chart  options and must be set globally. Defaults to:
      <pre>style: {
      fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif', // default font
      fontSize: '12px'
      }</pre>
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * The default series type for the chart. Can be any of the chart types listed under <a href="#plotOptions">plotOptions</a>.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * An explicit width for the chart. By default the width is calculated from the offset width of the containing element.
   */
  external num get width;
  external void set width (num a_width);
  /**
   * Decides in what dimensions the user can zoom by dragging the mouse. Can be one of <code>x</code>, <code>y</code> or <code>xy</code>.
   */
  external String get zoomType;
  external void set zoomType (String a_zoomType);
  /**
   * options: Object<br>

      The Axis options, as documented under <a href="#xAxis">xAxis</a> and <a href="#yAxis">yAxis</a>.||



      isX: Boolean<br>

      Whether it is an X axis or Y axis.||



      redraw: Boolean<br>

      Defaults to <code>true</code>. Whether to redraw the chart after the series is added. See the <code>redraw()</code> method below.||



      animation: Mixed<br>

      Defaults to true. When true, the series' updating will be animated with default animation options. The animation can also be a configuration object with properties <code>duration</code> and <code>easing</code>.
   */
  external void addAxis ( dynamic options, bool isX, bool redraw, dynamic animation);
  /**
   * options: Object<br>

      The series options, as documented under <a href="#plotOptions.series">plotOptions.series</a> and under the plotOptions for each series type.||



      redraw: Boolean<br>

      Defaults to <code>true</code>. Whether to redraw the chart after the series is added. See the <code>redraw()</code> method below.||



      animation: Mixed<br>

      Defaults to true. When true, the series' updating will be animated with default animation options. The animation can also be a configuration object with properties <code>duration</code> and <code>easing</code>.
   */
  external dynamic addSeries ( dynamic options, bool redraw, dynamic animation);
  /**
   * point: Object<br>

      The existing Point object from which the drilldown will start.||



      seriesOptions: Object<br>

      The series options, as documented under <a href="#plotOptions.series">plotOptions.series</a> and under the plotOptions for each series type.
   */
  external void addSeriesAsDrilldown ( dynamic point, dynamic seriesOptions);
  /**
   *
   */
  external void destroy ();
  /**
   *
   */
  external void drillUp ();
  /**
   * options: Object<br>Exporting options. Out of the <a class="internal" href="#exporting">exporting</a> options, the following options can be given as parameters to the exportChart method. All options default to the values given in the exporting config options.

      <code>filename</code>: the filename for the export without extension,

      <code>url</code>: the URL for the server module to do the conversion,

      <code>width</code>: the width of the PNG or JPEG image generated on the server,

      <code>type</code>: the MIME type of the converted image,

      <code>sourceWidth</code>: the width of the source (in-page) chart,

      <code>sourceHeight</code>: the height of the source chart.||



      chartOptions: Object<br>Additional chart options for the exported chart. For example a different background color can be added here.
   */
  external void exportChart ( dynamic options, dynamic chartOptions);
  /**
   * See <a href="#Chart.exportChart">exportChart</a> for parameter description.
   */
  external void exportChartLocal ( dynamic options, dynamic chartOptions);
  /**
   * id: String<br>The id of the axis, series or point to get.
   */
  external dynamic get ( String id);
  /**
   * additionalOptions: Object<br>Chart options to add to the exported chart in addition to the options given for the original chart. For example if series.lineWidth should be greater in the exported chart than in the original, or the chart should have a different background color, this is added here.
   */
  external String getSVG ( dynamic additionalOptions);
  /**
   * An array of the selected points.
   */
  external dynamic getSelectedPoints ();
  /**
   * An array of the selected Series items.
   */
  external dynamic getSelectedSeries ();
  /**
   *
   */
  external void hideLoading ();
  /**
   *
   */
  external void print ();
  /**
   * animation: Mixed<br>Defaults to true. When true, the update will be animated with default animation options. The animation can also be a configuration object with properties <code>duration</code> and <code>easing</code>.
   */
  external void redraw ( dynamic animation);
  /**
   * width: Number<br>The new pixel width of the chart.||height: Number<br>The new pixel height of the chart.||animation: Mixed<br>Defaults to true. When true, the resize will be animated with default animation options. The animation can also be a configuration object with properties <code>duration</code> and <code>easing</code>.
   */
  external void setSize ( num width, num height, dynamic animation);
  /**
   * title: Object<br>A configuration object for the new title as defined at <a class="internal" href="#title">#title</a>.||

      subtitle: Object<br>A configuration object for the new subtitle as defined at <a class="internal" href="#subtitle">#subtitle</a>.||

      redraw: Boolean<br>Whether to redraw the chart. Defaults to true.
   */
  external void setTitle ( dynamic title, dynamic subtitle, bool redraw);
  /**
   *
   */
  external dynamic showLoading ( String str);
  /**
   *
   */
  external void updatePosition ();
}
@JS()
@anonymous
class ChartEvents extends OptionsObject {
  external factory ChartEvents ();
  /**
   * Fires when a series is added to the chart after load time, using the <code>addSeries</code> method. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Through <code>event.options</code> you can access the series options that was passed to the <code>addSeries</code>  method. Returning false prevents the series from being added.
   */
  external Function get addSeries;
  external void set addSeries (Function a_addSeries);
  /**
   * Fires after a chart is printed through the context menu item or the <code>Chart.print</code> method. Requires the exporting module.
   */
  external Function get afterPrint;
  external void set afterPrint (Function a_afterPrint);
  /**
   * Fires before a chart is printed through the context menu item or the <code>Chart.print</code> method. Requires the exporting module.
   */
  external Function get beforePrint;
  external void set beforePrint (Function a_beforePrint);
  /**
   * <p>Fires when clicking on the plot background. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.</p> <p>Information on the clicked spot can be found through <code>event.xAxis</code> and  <code>event.yAxis</code>, which are arrays containing the axes of each dimension and each axis' value at the clicked spot. The primary axes are <code>event.xAxis[0]</code> and <code>event.yAxis[0]</code>. Remember the unit of a datetime axis is milliseconds since 1970-01-01 00:00:00.</p>

      <pre>click: function(e) {

      console.log(

      Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value),

      e.yAxis[0].value

      )

      }</pre>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * <p>Fires when a drilldown point is clicked, before the new series is added. Event arguments:</p>



      <dl>



      <dt><code>category</code></dt>

      <dd>If a category label was clicked, which index.</dd>



      <dt><code>point</code></dt>

      <dd>The originating point.</dd>



      <dt><code>points</code></dt>

      <dd>If a category label was clicked, this array holds all points corresponing to the category.</dd>



      <dt><code>seriesOptions</code></dt>

      <dd>Options for the new series</dd>



      </dl>

      <p>This event is also utilized for async drilldown, where the seriesOptions are not added by option, but rather loaded async.</p>
   */
  external Function get drilldown;
  external void set drilldown (Function a_drilldown);
  /**
   * Fires when drilling up from a drilldown series.
   */
  external Function get drillup;
  external void set drillup (Function a_drillup);
  /**
   * <p>Fires when the chart is finished loading. Since v4.2.2, it also waits for images to be loaded, for example from point markers. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.</p>



      <p>There is also a second parameter to the chart constructor where a callback function can be passed to be executed on chart.load.</p>
   */
  external Function get load;
  external void set load (Function a_load);
  /**
   * Fires when the chart is redrawn, either after a call to chart.redraw() or after an axis, series or point is modified with the <code>redraw</code> option set to true. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get redraw;
  external void set redraw (Function a_redraw);
  /**
   * <p>Fires when an area of the chart has been selected. Selection is enabled by setting the chart's zoomType. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. The default action for the  selection event is to zoom the  chart to the selected area. It can be prevented by calling  <code>event.preventDefault()</code>.</p> <p>Information on the selected area can be found through <code>event.xAxis</code> and  <code>event.yAxis</code>, which are arrays containing the axes of each dimension and each axis' min and max values. The primary axes are <code>event.xAxis[0]</code> and <code>event.yAxis[0]</code>. Remember the unit of a datetime axis is milliseconds since 1970-01-01 00:00:00.</p>

      <pre>selection: function(event) {

      // log the min and max of the primary, datetime x-axis

      console.log(

      Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', event.xAxis[0].min),

      Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', event.xAxis[0].max)

      );

      // log the min and max of the y axis

      console.log(event.yAxis[0].min, event.yAxis[0].max);

      }</pre>
   */
  external Function get selection;
  external void set selection (Function a_selection);
}
@JS()
@anonymous
class ChartOptions3d extends OptionsObject {
  external factory ChartOptions3d ();
  /**
   * One of the two rotation angles for the chart.
   */
  external num get alpha;
  external void set alpha (num a_alpha);
  /**
   * One of the two rotation angles for the chart.
   */
  external num get beta;
  external void set beta (num a_beta);
  /**
   * The total depth of the chart.
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * Wether to render the chart using the 3D functionality.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Provides the option to draw a frame around the charts by defining a bottom, front and back panel.
   */
  external ChartOptions3dFrame get frame;
  external void set frame (ChartOptions3dFrame a_frame);
  /**
   * Defines the distance the viewer is standing in front of the chart, this setting is important to calculate the perspective effect in column and scatter charts.

      It is not used for 3D pie charts.
   */
  external num get viewDistance;
  external void set viewDistance (num a_viewDistance);
}
@JS()
@anonymous
class ChartOptions3dFrame extends OptionsObject {
  external factory ChartOptions3dFrame ();
  /**
   * Defines the back panel of the frame around 3D charts.
   */
  external dynamic get back;
  external void set back (dynamic a_back);
  /**
   * The bottom of the frame around a 3D chart.
   */
  external dynamic get bottom;
  external void set bottom (dynamic a_bottom);
  /**
   * The side for the frame around a 3D chart.
   */
  external dynamic get side;
  external void set side (dynamic a_side);
}
@JS()
@anonymous
class ChartOptions3dFrameBack extends OptionsObject {
  external factory ChartOptions3dFrameBack ();
  /**
   * The color of the panel.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Thickness of the panel.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class ChartOptions3dFrameBottom extends OptionsObject {
  external factory ChartOptions3dFrameBottom ();
  /**
   * The color of the panel.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * The thickness of the panel.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class ChartOptions3dFrameSide extends OptionsObject {
  external factory ChartOptions3dFrameSide ();
  /**
   * The color of the panel.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * The thickness of the panel.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class ChartResetZoomButton extends OptionsObject {
  external factory ChartResetZoomButton ();
  /**
   * The position of the button. This is an object that can hold the properties <code>align</code>, <code>verticalAlign</code>, <code>x</code> and <code>y</code>.
   */
  external JsObject get position;
  external void set position (JsObject a_position);
  /**
   * What frame the button should be placed related to. Can be either "plot" or "chart".
   */
  external String get relativeTo;
  external void set relativeTo (String a_relativeTo);
  /**
   * A collection of attributes for the button. The object takes SVG attributes like  <code>fill</code>, <code>stroke</code>, <code>stroke-width</code> or <code>r</code>, the border radius. The theme also supports <code>style</code>, a collection of CSS properties for the text. Equivalent attributes for the hover state are given in <code>theme.states.hover</code>.
   */
  external JsObject get theme;
  external void set theme (JsObject a_theme);
}
@JS()
@anonymous
class Credits extends OptionsObject {
  external factory Credits ();
  /**
   * Whether to show the credits text.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The URL for the credits label.
   */
  external String get href;
  external void set href (String a_href);
  /**
   * Position configuration for the credits label. Supported properties are  <code>align</code>, <code>verticalAlign</code>, <code>x</code> and <code>y</code>. Defaults to

      <pre>position: {

      align: 'right',

      x: -10,

      verticalAlign: 'bottom',

      y: -5

      }</pre>
   */
  external JsObject get position;
  external void set position (JsObject a_position);
  /**
   * CSS styles for the credits label. Defaults to:

      <pre>style: {

      cursor: 'pointer',

      color: '#909090',

      fontSize: '10px'



      }</pre>
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * The text for the credits label.
   */
  external String get text;
  external void set text (String a_text);
}
@JS()
@anonymous
class Data extends OptionsObject {
  external factory Data ();
  /**
   * A two-dimensional array representing the input data on tabular form. This input can be used when the data is already parsed, for example from a grid view component. Each cell can be a string or number. If not switchRowsAndColumns is set, the columns are interpreted as series.
   */
  external dynamic get columns;
  external void set columns (dynamic a_columns);
  /**
   * The callback that is evaluated when the data is finished loading, optionally from an external source, and parsed. The first argument passed is a finished chart options object, containing the series. These options can be extended with additional options and passed directly to the chart constructor.
   */
  external Function get complete;
  external void set complete (Function a_complete);
  /**
   * A comma delimited string to be parsed. Related options are <a href="#data.startRow">startRow</a>, <a href="#data.endRow">endRow</a>, <a href="#data.startColumn">startColumn</a> and <a href="#data.endColumn">endColumn</a> to delimit what part of the table is used. The <a href="#data.lineDelimiter">lineDelimiter</a> and <a href="#data.itemDelimiter">itemDelimiter</a> options define the CSV delimiter formats.
   */
  external String get csv;
  external void set csv (String a_csv);
  /**
   * <p>Which of the predefined date formats in Date.prototype.dateFormats to use to parse date values. Defaults to a best guess based on what format gives valid and ordered dates.</p>



      <p>Valid options include:

      <ul>

      <li><code>YYYY-mm-dd</code></li>

      <li><code>dd/mm/YYYY</code></li>

      <li><code>mm/dd/YYYY</code></li>

      <li><code>dd/mm/YY</code></li>

      <li><code>mm/dd/YY</code></li>

      </ul>

      </p>
   */
  external String get dateFormat;
  external void set dateFormat (String a_dateFormat);
  /**
   * The decimal point used for parsing numbers in the CSV.
   */
  external String get decimalPoint;
  external void set decimalPoint (String a_decimalPoint);
  /**
   * In tabular input data, the last column (indexed by 0) to use. Defaults to the last column containing data.
   */
  external num get endColumn;
  external void set endColumn (num a_endColumn);
  /**
   * In tabular input data, the last row (indexed by 0) to use. Defaults to the last row containing data.
   */
  external num get endRow;
  external void set endRow (num a_endRow);
  /**
   * Whether to use the first row in the data set as series names.
   */
  external bool get firstRowAsNames;
  external void set firstRowAsNames (bool a_firstRowAsNames);
  /**
   * The key for a Google Spreadsheet to load. See <a href="https://developers.google.com/gdata/samples/spreadsheet_sample">general information on GS</a>.
   */
  external String get googleSpreadsheetKey;
  external void set googleSpreadsheetKey (String a_googleSpreadsheetKey);
  /**
   * The Google Spreadsheet worksheet to use in combination with <a href="#data.googleSpreadsheetKey">googleSpreadsheetKey</a>. The available id's from your sheet can be read from <code>https://spreadsheets.google.com/feeds/worksheets/{key}/public/basic</code>
   */
  external String get googleSpreadsheetWorksheet;
  external void set googleSpreadsheetWorksheet (String a_googleSpreadsheetWorksheet);
  /**
   * Item or cell delimiter for parsing CSV. Defaults to the tab character <code>\t</code> if a tab character is found in the CSV string, if not it defaults to <code>,</code>.
   */
  external String get itemDelimiter;
  external void set itemDelimiter (String a_itemDelimiter);
  /**
   * Line delimiter for parsing CSV.
   */
  external String get lineDelimiter;
  external void set lineDelimiter (String a_lineDelimiter);
  /**
   * A callback function to parse string representations of dates into JavaScript timestamps. Should return an integer timestamp on success.
   */
  external Function get parseDate;
  external void set parseDate (Function a_parseDate);
  /**
   * A callback function to access the parsed columns, the two-dimentional input data array directly, before they are interpreted into series data and categories. Return <code>false</code> to stop completion, or call <code>this.complete()</code> to continue async.
   */
  external Function get parsed;
  external void set parsed (Function a_parsed);
  /**
   * The same as the columns input option, but defining rows intead of columns.
   */
  external dynamic get rows;
  external void set rows (dynamic a_rows);
  /**
   * An array containing object with Point property names along with what column id the property should be taken from.
   */
  external List<JsObject> get seriesMapping;
  external void set seriesMapping (List<JsObject> a_seriesMapping);
  /**
   * In tabular input data, the first column (indexed by 0) to use.
   */
  external num get startColumn;
  external void set startColumn (num a_startColumn);
  /**
   * In tabular input data, the first row (indexed by 0) to use.
   */
  external num get startRow;
  external void set startRow (num a_startRow);
  /**
   * Switch rows and columns of the input data, so that <code>this.columns</code> effectively becomes the rows of the data set, and the rows are interpreted as series.
   */
  external bool get switchRowsAndColumns;
  external void set switchRowsAndColumns (bool a_switchRowsAndColumns);
  /**
   * A HTML table or the id of such to be parsed as input data. Related options are <code>startRow</code>, <code>endRow</code>, <code>startColumn</code> and <code>endColumn</code> to delimit what part of the table is used.
   */
  external dynamic get table;
  external void set table (dynamic a_table);
}
@JS()
@anonymous
class Drilldown extends OptionsObject {
  external factory Drilldown ();
  /**
   * Additional styles to apply to the X axis label for a point that has drilldown data. By default it is underlined and blue to invite to interaction. Defaults to:

      <pre>activeAxisLabelStyle: {

      cursor: 'pointer',

      color: '#0d233a',

      fontWeight: 'bold',

      textDecoration: 'underline'

      }</pre>
   */
  external dynamic get activeAxisLabelStyle;
  external void set activeAxisLabelStyle (dynamic a_activeAxisLabelStyle);
  /**
   * Additional styles to apply to the data label of a point that has drilldown data. By default it is underlined and blue to invite to interaction. Defaults to:

      <pre>activeAxisLabelStyle: {

      cursor: 'pointer',

      color: '#0d233a',

      fontWeight: 'bold',

      textDecoration: 'underline'

      }</pre>
   */
  external dynamic get activeDataLabelStyle;
  external void set activeDataLabelStyle (dynamic a_activeDataLabelStyle);
  /**
   * When this option is false, clicking a single point will drill down all points in the same category, equivalent to clicking the X axis label.
   */
  external bool get allowPointDrilldown;
  external void set allowPointDrilldown (bool a_allowPointDrilldown);
  /**
   * <p>Set the animation for all drilldown animations. Animation of a drilldown occurs when drilling between a column point and a column series, or a pie slice and a full pie series. Drilldown can still be used between series and points of different types, but animation will not occur.</p>



      <p>The animation can either be set as a boolean or a configuration object. If <code>true</code>,

      it will use the 'swing' jQuery easing and a duration of 500 ms. If used as a configuration object,

      the following properties are supported:

      </p><dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>



      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>
   */
  external dynamic get animation;
  external void set animation (dynamic a_animation);
  /**
   * Options for the drill up button that appears when drilling down on a series. The text for the button is defined in <a href="#lang.drillUpText">lang.drillUpText</a>.
   */
  external JsObject get drillUpButton;
  external void set drillUpButton (JsObject a_drillUpButton);
  /**
   * An array of series configurations for the drill down. Each series configuration uses the same syntax as the <a href="#series">series</a> option set. These drilldown series are hidden by default. The drilldown series is linked to the parent series' point by its <code>id</code>.
   */
  external List<JsObject> get series;
  external void set series (List<JsObject> a_series);
}
@JS()
@anonymous
class DrilldownDrillUpButton extends OptionsObject {
  external factory DrilldownDrillUpButton ();
  /**
   * Positioning options for the button within the <code>relativeTo</code> box. Available properties are <code>x</code>, <code>y</code>, <code>align</code> and <code>verticalAlign</code>.
   */
  external JsObject get position;
  external void set position (JsObject a_position);
  /**
   * What box to align the button to. Can be either "plotBox" or "spacingBox".
   */
  external String get relativeTo;
  external void set relativeTo (String a_relativeTo);
  /**
   * A collection of attributes for the button. The object takes SVG attributes like  <code>fill</code>, <code>stroke</code>, <code>stroke-width</code> or <code>r</code>, the border radius. The theme also supports <code>style</code>, a collection of CSS properties for the text. Equivalent attributes for the hover state are given in <code>theme.states.hover</code>.
   */
  external JsObject get theme;
  external void set theme (JsObject a_theme);
}
@JS()
@anonymous
class Exporting extends OptionsObject {
  external factory Exporting ();
  /**
   * <p>Experimental setting to allow HTML inside the chart (added through the <code>useHTML</code> options), directly in the exported image. This allows you to preserve complicated HTML structures like tables or bi-directional text in exported charts.</p>



      <p>Disclaimer: The HTML is rendered in a <code>foreignObject</code> tag in the generated SVG. The official export server is based on PhantomJS, which supports this, but other SVG clients, like Batik, does not support it. This also applies to downloaded SVG that you want to open in a desktop client.</p>
   */
  external bool get allowHTML;
  external void set allowHTML (bool a_allowHTML);
  /**
   * Options for the export related buttons, print and export. In addition to the default buttons listed here, custom buttons can be added. See <a href="#navigation.buttonOptions">navigation.buttonOptions</a> for general options.
   */
  external ExportingButtons get buttons;
  external void set buttons (ExportingButtons a_buttons);
  /**
   * Additional chart options to be merged into an exported chart. For example, a common use case is to add data labels to improve readaility of the exported chart, or to add a printer-friendly color scheme.
   */
  external JsObject get chartOptions;
  external void set chartOptions (JsObject a_chartOptions);
  /**
   * Whether to enable the exporting module. Disabling the module will hide the context button, but API methods will still be available.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Whether or not to fall back to the export server if the offline-exporting module is unable to export the chart on the client side.
   */
  external bool get fallbackToExportServer;
  external void set fallbackToExportServer (bool a_fallbackToExportServer);
  /**
   * The filename, without extension, to use for the exported chart.
   */
  external String get filename;
  external void set filename (String a_filename);
  /**
   * An object containing additional attributes for the POST form that sends the SVG to the export server. For example, a <code>target</code> can be set to make sure the generated image is received in another frame, or a custom <code>enctype</code> or <code>encoding</code> can be set.
   */
  external JsObject get formAttributes;
  external void set formAttributes (JsObject a_formAttributes);
  /**
   * Defines the scale or zoom factor for the exported image compared to the on-screen display. While for instance a 600px wide chart may look good on a website, it will look bad in print. The default scale of 2 makes this chart export to a 1200px PNG or JPG.
   */
  external num get scale;
  external void set scale (num a_scale);
  /**
   * Analogous to <a href="#exporting.sourceWidth">sourceWidth</a>
   */
  external num get sourceHeight;
  external void set sourceHeight (num a_sourceHeight);
  /**
   * The width of the original chart when exported, unless an explicit <a href="#chart.width">chart.width</a> is set. The width exported raster image is then multiplied by <a href="#exporting.scale">scale</a>.
   */
  external num get sourceWidth;
  external void set sourceWidth (num a_sourceWidth);
  /**
   * Default MIME type for exporting if <code>chart.exportChart()</code> is called without specifying a <code>type</code> option. Possible values are <code>image/png</code>, <code>image/jpeg</code>, <code>application/pdf</code> and <code>image/svg+xml</code>.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * The URL for the server module converting the SVG string to an image format. By default this points to Highslide Software's free web service.
   */
  external String get url;
  external void set url (String a_url);
  /**
   * The pixel width of charts exported to PNG or JPG. As of Highcharts 3.0, the default pixel width is a function of the <a href="#chart.width">chart.width</a> or <a href="#exporting.sourceWidth">exporting.sourceWidth</a> and the <a href="#exporting.scale">exporting.scale</a>.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class ExportingButtons extends OptionsObject {
  external factory ExportingButtons ();
  /**
   * Options for the export button.
   */
  external ExportingButtonsContextButton get contextButton;
  external void set contextButton (ExportingButtonsContextButton a_contextButton);
}
@JS()
@anonymous
class ExportingButtonsContextButton extends OptionsObject {
  external factory ExportingButtonsContextButton ();
  /**
   * Alignment for the buttons.
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to enable buttons.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Pixel height of the buttons.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * <p>A collection of config options for the menu items. Each options object consists
      of a <code>text</code> option which is a string to show in the menu item, as
      well as an <code>onclick</code> parameter which is a callback function to run
      on click.</p>
      <p>By default, there is the "Print" menu item plus one menu item for each of the available export types.
      Menu items can be customized by defining a new array of items and assigning
      <code>null</code> to unwanted positions (see override example below).</p>
   */
  external List<JsObject> get menuItems;
  external void set menuItems (List<JsObject> a_menuItems);
  /**
   * A click handler callback to use on the button directly instead of the popup menu.
   */
  external Function get onclick;
  external void set onclick (Function a_onclick);
  /**
   * The symbol for the button. Points to a definition function in the
      <code>Highcharts.Renderer.symbols</code> collection. The default
      <code>exportIcon</code> function is part of the exporting module.
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * See <a class="internal" href="#navigation.buttonOptions">navigation.buttonOptions</a> =&gt; symbolFill.
   */
  external dynamic get symbolFill;
  external void set symbolFill (dynamic a_symbolFill);
  /**
   * The pixel size of the symbol on the button.
   */
  external num get symbolSize;
  external void set symbolSize (num a_symbolSize);
  /**
   * The color of the symbol's stroke or line.
   */
  external dynamic get symbolStroke;
  external void set symbolStroke (dynamic a_symbolStroke);
  /**
   * The pixel stroke width of the symbol on the button.
   */
  external num get symbolStrokeWidth;
  external void set symbolStrokeWidth (num a_symbolStrokeWidth);
  /**
   * The x position of the center of the symbol inside the button.
   */
  external num get symbolX;
  external void set symbolX (num a_symbolX);
  /**
   * The y position of the center of the symbol inside the button.
   */
  external num get symbolY;
  external void set symbolY (num a_symbolY);
  /**
   * A text string to add to the individual button.
   */
  external String get text;
  external void set text (String a_text);
  /**
   * A configuration object for the button theme. The object accepts SVG properties like <code>stroke-width</code>, <code>stroke</code> and <code>fill</code>. Tri-state button styles are supported by the <code>states.hover</code> and <code>states.select</code> objects.
   */
  external JsObject get theme;
  external void set theme (JsObject a_theme);
  /**
   * The vertical alignment of the buttons. Can be one of "top", "middle" or "bottom".
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The pixel width of the button.
   */
  external num get width;
  external void set width (num a_width);
  /**
   * The horizontal position of the button relative to the <code>align</code>

      option.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The vertical offset of the button's position relative to its <code>verticalAlign</code>.			 .
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class Labels extends OptionsObject {
  external factory Labels ();
  /**
   * A HTML label that can be positioned anywhere in the chart area.
   */
  external List<JsObject> get items;
  external void set items (List<JsObject> a_items);
  /**
   * Shared CSS styles for all labels. Defaults to:
      <pre>style: {
      color: '#3E576F'
      }</pre>
   */
  external dynamic get style;
  external void set style (dynamic a_style);
}
@JS()
@anonymous
class LabelsItems extends OptionsObject {
  external factory LabelsItems ();
  /**
   * Inner HTML or text for the label.
   */
  external String get html;
  external void set html (String a_html);
  /**
   * CSS styles for each label. To position the label, use left and top like this:
      <pre>style: {
      left: '100px',
      top: '100px'
      }</pre>
   */
  external dynamic get style;
  external void set style (dynamic a_style);
}
@JS()
@anonymous
class Legend extends OptionsObject {
  external factory Legend ();
  /**
   * <p>The horizontal alignment of the legend box within the chart area. Valid values are <code>left</code>, <code>center</code> and <code>right</code>.</p>



      <p>In the case that the legend is aligned in a corner position, the <code>layout</code> option will determine whether to place it above/below or on the side of the plot area.</p>
   */
  external String get align;
  external void set align (String a_align);
  /**
   * The background color of the legend.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The color of the drawn border around the legend.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border corner radius of the legend.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The width of the drawn border around the legend.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * Enable or disable the legend.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * When the legend is floating, the plot area ignores it and is allowed to be placed below it.
   */
  external bool get floating;
  external void set floating (bool a_floating);
  /**
   * In a legend with horizontal layout, the itemDistance defines the pixel distance between each item.
   */
  external num get itemDistance;
  external void set itemDistance (num a_itemDistance);
  /**
   * CSS styles for each legend item when the corresponding series or point is hidden. Only a subset of CSS is supported, notably those options related to text. Properties are inherited from <code>style</code> unless overridden here. Defaults to:

      <pre>itemHiddenStyle: {

      color: '#CCC'

      }</pre>
   */
  external dynamic get itemHiddenStyle;
  external void set itemHiddenStyle (dynamic a_itemHiddenStyle);
  /**
   * CSS styles for each legend item in hover mode. Only a subset of CSS is supported, notably those options related to text. Properties are inherited from <code>style</code> unless overridden here. Defaults to:

      <pre>itemHoverStyle: {

      color: '#000'

      }</pre>
   */
  external dynamic get itemHoverStyle;
  external void set itemHoverStyle (dynamic a_itemHoverStyle);
  /**
   * The pixel bottom margin for each legend item.
   */
  external num get itemMarginBottom;
  external void set itemMarginBottom (num a_itemMarginBottom);
  /**
   * The pixel top margin for each legend item.
   */
  external num get itemMarginTop;
  external void set itemMarginTop (num a_itemMarginTop);
  /**
   * CSS styles for each legend item. Only a subset of CSS is supported, notably those options related to text.
   */
  external dynamic get itemStyle;
  external void set itemStyle (dynamic a_itemStyle);
  /**
   * The width for each legend item. This is useful in a horizontal layout with many items when you want the items to align vertically.  .
   */
  external num get itemWidth;
  external void set itemWidth (num a_itemWidth);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for each legend label. Available variables relates to properties on the series, or the point in case of pies.
   */
  external String get labelFormat;
  external void set labelFormat (String a_labelFormat);
  /**
   * Callback function to format each of the series' labels. The <em>this</em> keyword refers to the series object, or the point object in case of pie charts. By default the series or point name is printed.
   */
  external Function get labelFormatter;
  external void set labelFormatter (Function a_labelFormatter);
  /**
   * The layout of the legend items. Can be one of "horizontal" or "vertical".
   */
  external String get layout;
  external void set layout (String a_layout);
  /**
   * Line height for the legend items. Deprecated as of 2.1. Instead, the line height for each  item can be set using itemStyle.lineHeight, and the padding between items using itemMarginTop and itemMarginBottom.
   */
  external num get lineHeight;
  external void set lineHeight (num a_lineHeight);
  /**
   * If the plot area sized is calculated automatically and the legend is not floating, the legend margin is the  space between the legend and the axis labels or plot area.
   */
  external num get margin;
  external void set margin (num a_margin);
  /**
   * Maximum pixel height for the legend. When the maximum height is extended, navigation will show.
   */
  external num get maxHeight;
  external void set maxHeight (num a_maxHeight);
  /**
   * Options for the paging or navigation appearing when the legend is overflown.
   */
  external LegendNavigation get navigation;
  external void set navigation (LegendNavigation a_navigation);
  /**
   * The inner padding of the legend box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reverse the order of the legend items compared to the order of the series or points as defined in the configuration object.
   */
  external bool get reversed;
  external void set reversed (bool a_reversed);
  /**
   * Whether to show the symbol on the right side of the text rather than the left side.  This is common in Arabic and Hebraic.
   */
  external bool get rtl;
  external void set rtl (bool a_rtl);
  /**
   * Whether to apply a drop shadow to the legend. A <code>backgroundColor</code>
      also needs to be applied for this to take effect. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * CSS styles for the legend area. In the 1.x versions the position of the legend area was determined by CSS. In 2.x, the position is determined by properties like  <code>align</code>, <code>verticalAlign</code>, <code>x</code> and <code>y</code>, but the styles are still parsed for backwards compatibility.
   */
  @deprecated
  external dynamic get style;
  @deprecated
  external void set style (dynamic a_style);
  /**
   * The pixel height of the symbol for series types that use a rectangle in the legend. Defaults to the font size of legend items.
   */
  external num get symbolHeight;
  external void set symbolHeight (num a_symbolHeight);
  /**
   * The pixel padding between the legend item symbol and the legend item text.
   */
  external num get symbolPadding;
  external void set symbolPadding (num a_symbolPadding);
  /**
   * The border radius of the symbol for series types that use a rectangle in the legend.
   */
  external num get symbolRadius;
  external void set symbolRadius (num a_symbolRadius);
  /**
   * The pixel width of the legend item symbol.
   */
  external num get symbolWidth;
  external void set symbolWidth (num a_symbolWidth);
  /**
   * A title to be added on top of the legend.
   */
  external dynamic get title;
  external void set title (dynamic a_title);
  /**
   * <p>Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the legend item texts. Prior to 4.1.7, when using HTML, <a href="#legend.navigation">legend.navigation</a> was disabled.</p>
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * <p>The vertical alignment of the legend box. Can be one of <code>top</code>, <code>middle</code> or  <code>bottom</code>. Vertical position can be further determined by the <code>y</code> option.</p>



      <p>In the case that the legend is aligned in a corner position, the <code>layout</code> option will determine whether to place it above/below or on the side of the plot area.</p>
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The width of the legend box.
   */
  external num get width;
  external void set width (num a_width);
  /**
   * The x offset of the legend relative to its horizontal alignment <code>align</code> within chart.spacingLeft and chart.spacingRight. Negative x moves it to the left, positive x moves it to the right.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The vertical offset of the legend relative to it's vertical alignment <code>verticalAlign</code> within chart.spacingTop and chart.spacingBottom. Negative y moves it up, positive y moves it down.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class LegendNavigation extends OptionsObject {
  external factory LegendNavigation ();
  /**
   * The color for the active up or down arrow in the legend page navigation.
   */
  external dynamic get activeColor;
  external void set activeColor (dynamic a_activeColor);
  /**
   * How to animate the pages when navigating up or down. A value of <code>true</code> applies the default navigation given in  the chart.animation option. Additional options can be given as an object containing values for easing and duration.  .
   */
  external dynamic get animation;
  external void set animation (dynamic a_animation);
  /**
   * The pixel size of the up and down arrows in the legend paging navigation.  .
   */
  external num get arrowSize;
  external void set arrowSize (num a_arrowSize);
  /**
   * The color of the inactive up or down arrow in the legend page navigation.  .
   */
  external dynamic get inactiveColor;
  external void set inactiveColor (dynamic a_inactiveColor);
  /**
   * Text styles for the legend page navigation.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
}
@JS()
@anonymous
class LegendTitle extends OptionsObject {
  external factory LegendTitle ();
  /**
   * Generic CSS styles for the legend title.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * A text or HTML string for the title.
   */
  external String get text;
  external void set text (String a_text);
}
@JS()
@anonymous
class Loading extends OptionsObject {
  external factory Loading ();
  /**
   * The duration in milliseconds of the fade out effect.
   */
  external num get hideDuration;
  external void set hideDuration (num a_hideDuration);
  /**
   * CSS styles for the loading label <code>span</code>.
   */
  external dynamic get labelStyle;
  external void set labelStyle (dynamic a_labelStyle);
  /**
   * The duration in milliseconds of the fade in effect.
   */
  external num get showDuration;
  external void set showDuration (num a_showDuration);
  /**
   * CSS styles for the loading screen that covers the plot area. Defaults to:
      <pre>style: {
      position: 'absolute',
      backgroundColor: 'white',
      opacity: 0.5,
      textAlign: 'center'
      }</pre>
   */
  external dynamic get style;
  external void set style (dynamic a_style);
}
@JS()
@anonymous
class Navigation extends OptionsObject {
  external factory Navigation ();
  /**
   * A collection of options for buttons appearing in the exporting module.
   */
  external NavigationButtonOptions get buttonOptions;
  external void set buttonOptions (NavigationButtonOptions a_buttonOptions);
  /**
   * CSS styles for the hover state of the individual items within the popup menu appearing by  default when the export icon is clicked. The menu items are rendered in HTML. Defaults to
      <pre>menuItemHoverStyle: {
      background: '#4572A5',
      color: '#FFFFFF'
      }</pre>
   */
  external dynamic get menuItemHoverStyle;
  external void set menuItemHoverStyle (dynamic a_menuItemHoverStyle);
  /**
   * CSS styles for the individual items within the popup menu appearing by  default when the export icon is clicked. The menu items are rendered in HTML. Defaults to
      <pre>menuItemStyle: {
      padding: '0 5px',
      background: NONE,
      color: '#303030'
      }</pre>
   */
  external dynamic get menuItemStyle;
  external void set menuItemStyle (dynamic a_menuItemStyle);
  /**
   * CSS styles for the popup menu appearing by default when the export icon is clicked. This menu is rendered in HTML. Defaults to
      <pre>menuStyle: {
      border: '1px solid #A0A0A0',
      background: '#FFFFFF'
      }</pre>
   */
  external dynamic get menuStyle;
  external void set menuStyle (dynamic a_menuStyle);
}
@JS()
@anonymous
class NavigationButtonOptions extends OptionsObject {
  external factory NavigationButtonOptions ();
  /**
   * Alignment for the buttons.
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to enable buttons.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Pixel height of the buttons.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * Fill color for the symbol within the button.
   */
  external dynamic get symbolFill;
  external void set symbolFill (dynamic a_symbolFill);
  /**
   * The pixel size of the symbol on the button.
   */
  external num get symbolSize;
  external void set symbolSize (num a_symbolSize);
  /**
   * The color of the symbol's stroke or line.
   */
  external dynamic get symbolStroke;
  external void set symbolStroke (dynamic a_symbolStroke);
  /**
   * The pixel stroke width of the symbol on the button.
   */
  external num get symbolStrokeWidth;
  external void set symbolStrokeWidth (num a_symbolStrokeWidth);
  /**
   * The x position of the center of the symbol inside the button.
   */
  external num get symbolX;
  external void set symbolX (num a_symbolX);
  /**
   * The y position of the center of the symbol inside the button.
   */
  external num get symbolY;
  external void set symbolY (num a_symbolY);
  /**
   * A text string to add to the individual button.
   */
  external String get text;
  external void set text (String a_text);
  /**
   * A configuration object for the button theme. The object accepts SVG properties like <code>stroke-width</code>, <code>stroke</code> and <code>fill</code>. Tri-state button styles are supported by the <code>states.hover</code> and <code>states.select</code> objects.
   */
  external JsObject get theme;
  external void set theme (JsObject a_theme);
  /**
   * The vertical alignment of the buttons. Can be one of "top", "middle" or "bottom".
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The pixel width of the button.
   */
  external num get width;
  external void set width (num a_width);
  /**
   * The vertical offset of the button's position relative to its <code>verticalAlign</code>.			 .
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class NoData extends OptionsObject {
  external factory NoData ();
  /**
   * An object of additional SVG attributes for the no-data label.
   */
  external JsObject get attr;
  external void set attr (JsObject a_attr);
  /**
   * The position of the no-data label, relative to the plot area.
   */
  external JsObject get position;
  external void set position (JsObject a_position);
  /**
   * CSS styles for the no-data label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to insert the label as HTML, or as pseudo-HTML rendered with SVG.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
}
@JS()
@anonymous
class Pane extends OptionsObject {
  external factory Pane ();
  /**
   * An object, or array of objects, for backgrounds. Sub options include <code>backgroundColor</code> (can be solid or gradient), <code>shape</code> ("solid" or "arc"), <code>innerWidth</code>, <code>outerWidth</code>, <code>borderWidth</code>, <code>borderColor</code>.
   */
  external List<JsObject> get background;
  external void set background (List<JsObject> a_background);
  /**
   * The center of a polar chart or angular gauge, given as an array of [x, y] positions. Positions can be given as integers that transform to pixels, or as percentages of the plot area size.
   */
  external dynamic get center;
  external void set center (dynamic a_center);
  /**
   * The end angle of the polar X axis or gauge value axis, given in degrees where 0 is north. Defaults to <a href="#pane.startAngle">startAngle</a> + 360.
   */
  external num get endAngle;
  external void set endAngle (num a_endAngle);
  /**
   * The size of the pane, either as a number defining pixels, or a percentage defining a percentage of the plot are.
   */
  external dynamic get size;
  external void set size (dynamic a_size);
  /**
   * The start angle of the polar X axis or gauge axis, given in degrees where 0 is north. Defaults to 0.
   */
  external num get startAngle;
  external void set startAngle (num a_startAngle);
}
@JS()
@anonymous
class PlotOptions extends OptionsObject {
  external factory PlotOptions ();
  /**
   * null
   */
  external PlotOptionsArea get area;
  external void set area (PlotOptionsArea a_area);
  /**
   * The area range is a cartesian series type with higher and lower Y values along an X axis. Requires <code>highcharts-more.js</code>.
   */
  external PlotOptionsArearange get arearange;
  external void set arearange (PlotOptionsArearange a_arearange);
  /**
   * null
   */
  external PlotOptionsAreaspline get areaspline;
  external void set areaspline (PlotOptionsAreaspline a_areaspline);
  /**
   * The area spline range is a cartesian series type with higher and lower Y values along an X axis. Requires <code>highcharts-more.js</code>.
   */
  external PlotOptionsAreasplinerange get areasplinerange;
  external void set areasplinerange (PlotOptionsAreasplinerange a_areasplinerange);
  /**
   * null
   */
  external PlotOptionsBar get bar;
  external void set bar (PlotOptionsBar a_bar);
  /**
   * A box plot is a convenient way of depicting groups of data through their five-number summaries: the smallest observation (sample minimum), lower quartile (Q1), median (Q2), upper quartile (Q3), and largest observation (sample maximum).
   */
  external JsObject get boxplot;
  external void set boxplot (JsObject a_boxplot);
  /**
   * A bubble series is a three dimensional series type where each point renders an X, Y and Z value. Each points is drawn as a bubble where the position along the X and Y axes mark the X and Y values, and the size of the bubble relates to the Z value.
   */
  external JsObject get bubble;
  external void set bubble (JsObject a_bubble);
  /**
   * null
   */
  external PlotOptionsColumn get column;
  external void set column (PlotOptionsColumn a_column);
  /**
   * The column range is a cartesian series type with higher and lower Y values along an X axis. Requires <code>highcharts-more.js</code>. To display horizontal bars, set <a href="#chart.inverted">chart.inverted</a> to <code>true</code>.
   */
  external JsObject get columnrange;
  external void set columnrange (JsObject a_columnrange);
  /**
   * Error bars are a graphical representation of the variability of data and are used on graphs to indicate the error, or uncertainty in a reported measurement.
   */
  external JsObject get errorbar;
  external void set errorbar (JsObject a_errorbar);
  /**
   * Funnel charts are a type of chart often used to visualize stages in a sales project, where the top are the initial stages with the most clients. It requires that the <code>modules/funnel.js</code> file is loaded.
   */
  external JsObject get funnel;
  external void set funnel (JsObject a_funnel);
  /**
   * General plotting options for the gauge series type. Requires <code>highcharts-more.js</code>
   */
  external JsObject get gauge;
  external void set gauge (JsObject a_gauge);
  /**
   * <p>The heatmap series type. This series type is available both in Highcharts and Highmaps.</p>



      <p>The colors of each heat map point is usually determined by its value and controlled by settings on the <a href="#colorAxis">colorAxis</a>.</p>
   */
  external JsObject get heatmap;
  external void set heatmap (JsObject a_heatmap);
  /**
   * null
   */
  external PlotOptionsLine get line;
  external void set line (PlotOptionsLine a_line);
  /**
   * A pie chart is a circular chart divided into sectors, illustrating numerical proportion.
   */
  external PlotOptionsPie get pie;
  external void set pie (PlotOptionsPie a_pie);
  /**
   * A polygon series can be used to draw any freeform shape in the cartesian coordinate system. A fill is applied with the <code>color</code> option, and stroke is applied through <code>lineWidth</code> and <code>lineColor</code> options. Requires the <code>highcharts-more.js</code> file.
   */
  external JsObject get polygon;
  external void set polygon (JsObject a_polygon);
  /**
   * A pyramid chart consists of a single pyramid with item heights corresponding to each point value. Technically it is the same as a reversed funnel chart without a neck.
   */
  external JsObject get pyramid;
  external void set pyramid (JsObject a_pyramid);
  /**
   * null
   */
  external PlotOptionsScatter get scatter;
  external void set scatter (PlotOptionsScatter a_scatter);
  /**
   * <p>General options for all series types.</p>
   */
  external PlotOptionsSeries get series;
  external void set series (PlotOptionsSeries a_series);
  /**
   * A gauge showing values using a filled arc with colors indicating the value. The solid gauge plots values against the <code>yAxis</code>, which is extended with some color options, <a href="#yAxis.minColor">minColor</a>, <a href="#yAxis.maxColor">maxColor</a> and <a href="#yAxis.stops">stops</a>, to control the color of the gauge itself.
   */
  external JsObject get solidgauge;
  external void set solidgauge (JsObject a_solidgauge);
  /**
   * null
   */
  external PlotOptionsSpline get spline;
  external void set spline (PlotOptionsSpline a_spline);
  /**
   * The size of the point shape is determined by its value relative to its siblings values.

      Requires the module <code>heatmap.js</code> as well, if functionality such as the <a href="http://api.highcharts.com/highmaps#colorAxis">colorAxis</a> is to be used.
   */
  external JsObject get treemap;
  external void set treemap (JsObject a_treemap);
  /**
   * Options for the waterfall series type.
   */
  external JsObject get waterfall;
  external void set waterfall (JsObject a_waterfall);
}
@JS()
@anonymous
class PlotOptionsArea extends OptionsObject {
  external factory PlotOptionsArea ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Polar charts only. Whether to connect the ends of a line series plot across the extremes.
   */
  external bool get connectEnds;
  external void set connectEnds (bool a_connectEnds);
  /**
   * Whether to connect a graph line across null points.
   */
  external bool get connectNulls;
  external void set connectNulls (bool a_connectNulls);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * null
   */
  external PlotOptionsAreaDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsAreaDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsAreaEvents get events;
  external void set events (PlotOptionsAreaEvents a_events);
  /**
   * Fill color or gradient for the area. When <code>null</code>, the series' <code>color</code>  is  used with the series' <code>fillOpacity</code>.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Fill opacity for the area. Note that when you set an explicit <code>fillColor</code>, the <code>fillOpacity</code> is not applied. Instead, you should define the opacity in the <code>fillColor</code> with an rgba color definition.
   */
  external num get fillOpacity;
  external void set fillOpacity (num a_fillOpacity);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * A separate color for the graph line. By default the line takes the <code>color</code> of the series, but the lineColor setting allows setting a separate color for the line without altering the <code>fillColor</code>.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The line cap used for line ends and line joins on the graph.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external PlotOptionsAreaMarker get marker;
  external void set marker (PlotOptionsAreaMarker a_marker);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * A separate color for the negative part of the area.
   */
  external dynamic get negativeFillColor;
  external void set negativeFillColor (dynamic a_negativeFillColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsAreaPoint get point;
  external void set point (PlotOptionsAreaPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * Whether to stack the values of each series on top of each other. Possible values are null to disable, "normal" to stack by value or "percent".
   */
  external String get stacking;
  external void set stacking (String a_stacking);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Whether to apply steps to the line. Possible values are <code>left</code>, <code>center</code> and <code>right</code>. Prior to 2.3.5, only <code>left</code> was supported.
   */
  external String get step;
  external void set step (String a_step);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The Y axis value to serve as the base for the area, for distinguishing between values above and below a threshold. If <code>null</code>, the area behaves
      like a line series with fill between the graph and the Y axis minimum.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Whether the whole area or just the line should respond to mouseover tooltips and other mouse or touch events.
   */
  external bool get trackByArea;
  external void set trackByArea (bool a_trackByArea);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsAreaDataLabels extends OptionsObject {
  external factory PlotOptionsAreaDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsAreaEvents extends OptionsObject {
  external factory PlotOptionsAreaEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsAreaMarker extends OptionsObject {
  external factory PlotOptionsAreaMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external PlotOptionsAreaMarkerStates get states;
  external void set states (PlotOptionsAreaMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsAreaMarkerStates extends OptionsObject {
  external factory PlotOptionsAreaMarkerStates ();
  /**
   * null
   */
  external PlotOptionsAreaMarkerStatesHover get hover;
  external void set hover (PlotOptionsAreaMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external PlotOptionsAreaMarkerStatesSelect get select;
  external void set select (PlotOptionsAreaMarkerStatesSelect a_select);
}
@JS()
@anonymous
class PlotOptionsAreaMarkerStatesHover extends OptionsObject {
  external factory PlotOptionsAreaMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class PlotOptionsAreaMarkerStatesSelect extends OptionsObject {
  external factory PlotOptionsAreaMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class PlotOptionsAreaPoint extends OptionsObject {
  external factory PlotOptionsAreaPoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsAreaPointEvents get events;
  external void set events (PlotOptionsAreaPointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsAreaPointEvents extends OptionsObject {
  external factory PlotOptionsAreaPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsAreaStates extends OptionsObject {
  external factory PlotOptionsAreaStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsAreaStatesHover get hover;
  external void set hover (PlotOptionsAreaStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsAreaStatesHover extends OptionsObject {
  external factory PlotOptionsAreaStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsAreaStatesHoverMarker get marker;
  external void set marker (PlotOptionsAreaStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsAreaStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsAreaStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsAreaStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsAreaStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsAreaTooltip extends OptionsObject {
  external factory PlotOptionsAreaTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsAreaZones extends OptionsObject {
  external factory PlotOptionsAreaZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsArearange extends OptionsObject {
  external factory PlotOptionsArearange ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to connect a graph line across null points.
   */
  external bool get connectNulls;
  external void set connectNulls (bool a_connectNulls);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Extended data labels for range series types. Range series  data labels have no <code>x</code> and <code>y</code> options. Instead, they have <code>xLow</code>, <code>xHigh</code>, <code>yLow</code> and <code>yHigh</code> options to allow the higher and lower data label sets individually.
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsArearangeEvents get events;
  external void set events (PlotOptionsArearangeEvents a_events);
  /**
   * Fill color or gradient for the area. When <code>null</code>, the series' <code>color</code>  is  used with the series' <code>fillOpacity</code>.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Fill opacity for the area. Note that when you set an explicit <code>fillColor</code>, the <code>fillOpacity</code> is not applied. Instead, you should define the opacity in the <code>fillColor</code> with an rgba color definition.
   */
  external num get fillOpacity;
  external void set fillOpacity (num a_fillOpacity);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * A separate color for the graph line. By default the line takes the <code>color</code> of the series, but the lineColor setting allows setting a separate color for the line without altering the <code>fillColor</code>.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * Pixel width of the arearange graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The line cap used for line ends and line joins on the graph.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * A separate color for the negative part of the area.
   */
  external dynamic get negativeFillColor;
  external void set negativeFillColor (dynamic a_negativeFillColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsArearangePoint get point;
  external void set point (PlotOptionsArearangePoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Whether to apply steps to the line. Possible values are <code>left</code>, <code>center</code> and <code>right</code>. Prior to 2.3.5, only <code>left</code> was supported.
   */
  external String get step;
  external void set step (String a_step);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Whether the whole area or just the line should respond to mouseover tooltips and other mouse or touch events.
   */
  external bool get trackByArea;
  external void set trackByArea (bool a_trackByArea);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsArearangeDataLabels extends OptionsObject {
  external factory PlotOptionsArearangeDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * X offset of the higher data labels relative to the point value.
   */
  external num get xHigh;
  external void set xHigh (num a_xHigh);
  /**
   * X offset of the lower data labels relative to the point value.
   */
  external num get xLow;
  external void set xLow (num a_xLow);
  /**
   * Y offset of the higher data labels relative to the point value.
   */
  external num get yHigh;
  external void set yHigh (num a_yHigh);
  /**
   * Y offset of the lower data labels relative to the point value.
   */
  external num get yLow;
  external void set yLow (num a_yLow);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsArearangeEvents extends OptionsObject {
  external factory PlotOptionsArearangeEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsArearangePoint extends OptionsObject {
  external factory PlotOptionsArearangePoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsArearangePointEvents get events;
  external void set events (PlotOptionsArearangePointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsArearangePointEvents extends OptionsObject {
  external factory PlotOptionsArearangePointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsArearangeStates extends OptionsObject {
  external factory PlotOptionsArearangeStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsArearangeStatesHover get hover;
  external void set hover (PlotOptionsArearangeStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsArearangeStatesHover extends OptionsObject {
  external factory PlotOptionsArearangeStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsArearangeStatesHoverMarker get marker;
  external void set marker (PlotOptionsArearangeStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsArearangeStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsArearangeStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsArearangeStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsArearangeStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsArearangeTooltip extends OptionsObject {
  external factory PlotOptionsArearangeTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsArearangeZones extends OptionsObject {
  external factory PlotOptionsArearangeZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsAreaspline extends OptionsObject {
  external factory PlotOptionsAreaspline ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Polar charts only. Whether to connect the ends of a line series plot across the extremes.
   */
  external bool get connectEnds;
  external void set connectEnds (bool a_connectEnds);
  /**
   * Whether to connect a graph line across null points.
   */
  external bool get connectNulls;
  external void set connectNulls (bool a_connectNulls);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * null
   */
  external PlotOptionsAreasplineDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsAreasplineDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsAreasplineEvents get events;
  external void set events (PlotOptionsAreasplineEvents a_events);
  /**
   * Fill color or gradient for the area. When <code>null</code>, the series' <code>color</code>  is  used with the series' <code>fillOpacity</code>.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Fill opacity for the area. Note that when you set an explicit <code>fillColor</code>, the <code>fillOpacity</code> is not applied. Instead, you should define the opacity in the <code>fillColor</code> with an rgba color definition.
   */
  external num get fillOpacity;
  external void set fillOpacity (num a_fillOpacity);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * A separate color for the graph line. By default the line takes the <code>color</code> of the series, but the lineColor setting allows setting a separate color for the line without altering the <code>fillColor</code>.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The line cap used for line ends and line joins on the graph.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external PlotOptionsAreasplineMarker get marker;
  external void set marker (PlotOptionsAreasplineMarker a_marker);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * A separate color for the negative part of the area.
   */
  external dynamic get negativeFillColor;
  external void set negativeFillColor (dynamic a_negativeFillColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsAreasplinePoint get point;
  external void set point (PlotOptionsAreasplinePoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * Whether to stack the values of each series on top of each other. Possible values are null to disable, "normal" to stack by value or "percent".
   */
  external String get stacking;
  external void set stacking (String a_stacking);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The Y axis value to serve as the base for the area, for distinguishing between values above and below a threshold. If <code>null</code>, the area behaves
      like a line series with fill between the graph and the Y axis minimum.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Whether the whole area or just the line should respond to mouseover tooltips and other mouse or touch events.
   */
  external bool get trackByArea;
  external void set trackByArea (bool a_trackByArea);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsAreasplineDataLabels extends OptionsObject {
  external factory PlotOptionsAreasplineDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsAreasplineEvents extends OptionsObject {
  external factory PlotOptionsAreasplineEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsAreasplineMarker extends OptionsObject {
  external factory PlotOptionsAreasplineMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external PlotOptionsAreasplineMarkerStates get states;
  external void set states (PlotOptionsAreasplineMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsAreasplineMarkerStates extends OptionsObject {
  external factory PlotOptionsAreasplineMarkerStates ();
  /**
   * null
   */
  external PlotOptionsAreasplineMarkerStatesHover get hover;
  external void set hover (PlotOptionsAreasplineMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external PlotOptionsAreasplineMarkerStatesSelect get select;
  external void set select (PlotOptionsAreasplineMarkerStatesSelect a_select);
}
@JS()
@anonymous
class PlotOptionsAreasplineMarkerStatesHover extends OptionsObject {
  external factory PlotOptionsAreasplineMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class PlotOptionsAreasplineMarkerStatesSelect extends OptionsObject {
  external factory PlotOptionsAreasplineMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class PlotOptionsAreasplinePoint extends OptionsObject {
  external factory PlotOptionsAreasplinePoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsAreasplinePointEvents get events;
  external void set events (PlotOptionsAreasplinePointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsAreasplinePointEvents extends OptionsObject {
  external factory PlotOptionsAreasplinePointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsAreasplineStates extends OptionsObject {
  external factory PlotOptionsAreasplineStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsAreasplineStatesHover get hover;
  external void set hover (PlotOptionsAreasplineStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsAreasplineStatesHover extends OptionsObject {
  external factory PlotOptionsAreasplineStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsAreasplineStatesHoverMarker get marker;
  external void set marker (PlotOptionsAreasplineStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsAreasplineStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsAreasplineStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsAreasplineStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsAreasplineStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsAreasplineTooltip extends OptionsObject {
  external factory PlotOptionsAreasplineTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsAreasplineZones extends OptionsObject {
  external factory PlotOptionsAreasplineZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsAreasplinerange extends OptionsObject {
  external factory PlotOptionsAreasplinerange ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to connect a graph line across null points.
   */
  external bool get connectNulls;
  external void set connectNulls (bool a_connectNulls);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Extended data labels for range series types. Range series  data labels have no <code>x</code> and <code>y</code> options. Instead, they have <code>xLow</code>, <code>xHigh</code>, <code>yLow</code> and <code>yHigh</code> options to allow the higher and lower data label sets individually.
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsAreasplinerangeEvents get events;
  external void set events (PlotOptionsAreasplinerangeEvents a_events);
  /**
   * Fill color or gradient for the area. When <code>null</code>, the series' <code>color</code>  is  used with the series' <code>fillOpacity</code>.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Fill opacity for the area. Note that when you set an explicit <code>fillColor</code>, the <code>fillOpacity</code> is not applied. Instead, you should define the opacity in the <code>fillColor</code> with an rgba color definition.
   */
  external num get fillOpacity;
  external void set fillOpacity (num a_fillOpacity);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * A separate color for the graph line. By default the line takes the <code>color</code> of the series, but the lineColor setting allows setting a separate color for the line without altering the <code>fillColor</code>.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * Pixel width of the arearange graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The line cap used for line ends and line joins on the graph.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * A separate color for the negative part of the area.
   */
  external dynamic get negativeFillColor;
  external void set negativeFillColor (dynamic a_negativeFillColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsAreasplinerangePoint get point;
  external void set point (PlotOptionsAreasplinerangePoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Whether the whole area or just the line should respond to mouseover tooltips and other mouse or touch events.
   */
  external bool get trackByArea;
  external void set trackByArea (bool a_trackByArea);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsAreasplinerangeDataLabels extends OptionsObject {
  external factory PlotOptionsAreasplinerangeDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * X offset of the higher data labels relative to the point value.
   */
  external num get xHigh;
  external void set xHigh (num a_xHigh);
  /**
   * X offset of the lower data labels relative to the point value.
   */
  external num get xLow;
  external void set xLow (num a_xLow);
  /**
   * Y offset of the higher data labels relative to the point value.
   */
  external num get yHigh;
  external void set yHigh (num a_yHigh);
  /**
   * Y offset of the lower data labels relative to the point value.
   */
  external num get yLow;
  external void set yLow (num a_yLow);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsAreasplinerangeEvents extends OptionsObject {
  external factory PlotOptionsAreasplinerangeEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsAreasplinerangePoint extends OptionsObject {
  external factory PlotOptionsAreasplinerangePoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsAreasplinerangePointEvents get events;
  external void set events (PlotOptionsAreasplinerangePointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsAreasplinerangePointEvents extends OptionsObject {
  external factory PlotOptionsAreasplinerangePointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsAreasplinerangeStates extends OptionsObject {
  external factory PlotOptionsAreasplinerangeStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsAreasplinerangeStatesHover get hover;
  external void set hover (PlotOptionsAreasplinerangeStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsAreasplinerangeStatesHover extends OptionsObject {
  external factory PlotOptionsAreasplinerangeStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsAreasplinerangeStatesHoverMarker get marker;
  external void set marker (PlotOptionsAreasplinerangeStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsAreasplinerangeStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsAreasplinerangeStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsAreasplinerangeStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsAreasplinerangeStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsAreasplinerangeTooltip extends OptionsObject {
  external factory PlotOptionsAreasplinerangeTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsAreasplinerangeZones extends OptionsObject {
  external factory PlotOptionsAreasplinerangeZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsBar extends OptionsObject {
  external factory PlotOptionsBar ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border surrounding each column or bar.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The corner radius of the border surrounding each column or bar.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The width of the border surrounding each column or bar.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * null
   */
  external PlotOptionsBarDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsBarDataLabels a_dataLabels);
  /**
   * Depth of the columns in a 3D column chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * 3D columns only. The color of the edges. Similar to <code>borderColor</code>, except it defaults to the same color as the column.
   */
  external dynamic get edgeColor;
  external void set edgeColor (dynamic a_edgeColor);
  /**
   * 3D columns only. The width of the colored edges.
   */
  external num get edgeWidth;
  external void set edgeWidth (num a_edgeWidth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsBarEvents get events;
  external void set events (PlotOptionsBarEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * Padding between each value groups, in x axis units.
   */
  external num get groupPadding;
  external void set groupPadding (num a_groupPadding);
  /**
   * The spacing between columns on the Z Axis in a 3D chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get groupZPadding;
  external void set groupZPadding (num a_groupZPadding);
  /**
   * Whether to group non-stacked columns or to let them render independent of each other. Non-grouped columns will be laid out individually and overlap each other.
   */
  external bool get grouping;
  external void set grouping (bool a_grouping);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The minimal height for a column or width for a bar. By default, 0 values are not shown. To visualize a 0 (or close to zero) point, set the minimal point length to a  pixel value like 3. In stacked column charts, minPointLength might not be respected for tightly packed values.
   */
  external num get minPointLength;
  external void set minPointLength (num a_minPointLength);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsBarPoint get point;
  external void set point (PlotOptionsBarPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * Padding between each column or bar, in x axis units.
   */
  external num get pointPadding;
  external void set pointPadding (num a_pointPadding);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * The X axis range that each point is valid for. This determines the width of the column. On a categorized axis, the range will be 1 by default (one category unit). On linear and datetime axes, the range will be computed as the distance between the two closest data points.
   */
  external num get pointRange;
  external void set pointRange (num a_pointRange);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * A pixel value specifying a fixed width for each column or bar. When <code>null</code>, the width is calculated from the <code>pointPadding</code> and <code>groupPadding</code>.
   */
  external num get pointWidth;
  external void set pointWidth (num a_pointWidth);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * Whether to stack the values of each series on top of each other. Possible values are null to disable, "normal" to stack by value or "percent".
   */
  external String get stacking;
  external void set stacking (String a_stacking);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The Y axis value to serve as the base for the columns, for distinguishing between values above and below a threshold. If <code>null</code>, the columns extend from the padding Y axis minimum.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsBarDataLabels extends OptionsObject {
  external factory PlotOptionsBarDataLabels ();
  /**
   * Alignment of the data label relative to the data point.
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position of the data label relative to the data point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsBarEvents extends OptionsObject {
  external factory PlotOptionsBarEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsBarPoint extends OptionsObject {
  external factory PlotOptionsBarPoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsBarPointEvents get events;
  external void set events (PlotOptionsBarPointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsBarPointEvents extends OptionsObject {
  external factory PlotOptionsBarPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsBarStates extends OptionsObject {
  external factory PlotOptionsBarStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsBarStatesHover get hover;
  external void set hover (PlotOptionsBarStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsBarStatesHover extends OptionsObject {
  external factory PlotOptionsBarStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class PlotOptionsBarStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsBarStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsBarTooltip extends OptionsObject {
  external factory PlotOptionsBarTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsBarZones extends OptionsObject {
  external factory PlotOptionsBarZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsBoxplot extends OptionsObject {
  external factory PlotOptionsBoxplot ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * Depth of the columns in a 3D column chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * 3D columns only. The color of the edges. Similar to <code>borderColor</code>, except it defaults to the same color as the column.
   */
  external dynamic get edgeColor;
  external void set edgeColor (dynamic a_edgeColor);
  /**
   * 3D columns only. The width of the colored edges.
   */
  external num get edgeWidth;
  external void set edgeWidth (num a_edgeWidth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsBoxplotEvents get events;
  external void set events (PlotOptionsBoxplotEvents a_events);
  /**
   * The fill color of the box.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * Padding between each value groups, in x axis units.
   */
  external num get groupPadding;
  external void set groupPadding (num a_groupPadding);
  /**
   * The spacing between columns on the Z Axis in a 3D chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get groupZPadding;
  external void set groupZPadding (num a_groupZPadding);
  /**
   * Whether to group non-stacked columns or to let them render independent of each other. Non-grouped columns will be laid out individually and overlap each other.
   */
  external bool get grouping;
  external void set grouping (bool a_grouping);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The width of the line surrounding the box. If any of <a href="#plotOptions.boxplot.stemWidth">stemWidth</a>, <a href="#plotOptions.boxplot.medianWidth">medianWidth</a> or <a href="#plotOptions.boxplot.whiskerWidth">whiskerWidth</a> are <code>null</code>, the lineWidth also applies to these lines.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The color of the median line. If <code>null</code>, the general series color applies.
   */
  external dynamic get medianColor;
  external void set medianColor (dynamic a_medianColor);
  /**
   * The pixel width of the median line. If <code>null</code>, the <a href="#plotOptions.boxplot.lineWidth">lineWidth</a> is used.
   */
  external num get medianWidth;
  external void set medianWidth (num a_medianWidth);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsBoxplotPoint get point;
  external void set point (PlotOptionsBoxplotPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * Padding between each column or bar, in x axis units.
   */
  external num get pointPadding;
  external void set pointPadding (num a_pointPadding);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * The X axis range that each point is valid for. This determines the width of the column. On a categorized axis, the range will be 1 by default (one category unit). On linear and datetime axes, the range will be computed as the distance between the two closest data points.
   */
  external num get pointRange;
  external void set pointRange (num a_pointRange);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * A pixel value specifying a fixed width for each column or bar. When <code>null</code>, the width is calculated from the <code>pointPadding</code> and <code>groupPadding</code>.
   */
  external num get pointWidth;
  external void set pointWidth (num a_pointWidth);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * The color of the stem, the vertical line extending from the box to the whiskers. If <code>null</code>, the series color is used.
   */
  external dynamic get stemColor;
  external void set stemColor (dynamic a_stemColor);
  /**
   * The dash style of the stem, the vertical line extending from the box to the whiskers.
   */
  external String get stemDashStyle;
  external void set stemDashStyle (String a_stemDashStyle);
  /**
   * The width of the stem, the vertical line extending from the box to the whiskers. If <code>null</code>, the width is inherited from the <a href="#plotOptions.boxplot.lineWidth">lineWidth</a> option.
   */
  external num get stemWidth;
  external void set stemWidth (num a_stemWidth);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * The color of the whiskers, the horizontal lines marking low and high values. When <code>null</code>, the general series color is used.
   */
  external dynamic get whiskerColor;
  external void set whiskerColor (dynamic a_whiskerColor);
  /**
   * The length of the whiskers, the horizontal lines marking low and high values. It can be a numerical pixel value, or a percentage value of the box width. Set <code>0</code> to disable whiskers.
   */
  external dynamic get whiskerLength;
  external void set whiskerLength (dynamic a_whiskerLength);
  /**
   * The line width of the whiskers, the horizontal lines marking low and high values. When <code>null</code>, the general <a href="#plotOptions.boxplot.lineWidth">lineWidth</a> applies.
   */
  external num get whiskerWidth;
  external void set whiskerWidth (num a_whiskerWidth);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsBoxplotEvents extends OptionsObject {
  external factory PlotOptionsBoxplotEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsBoxplotPoint extends OptionsObject {
  external factory PlotOptionsBoxplotPoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsBoxplotPointEvents get events;
  external void set events (PlotOptionsBoxplotPointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsBoxplotPointEvents extends OptionsObject {
  external factory PlotOptionsBoxplotPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsBoxplotStates extends OptionsObject {
  external factory PlotOptionsBoxplotStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsBoxplotStatesHover get hover;
  external void set hover (PlotOptionsBoxplotStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsBoxplotStatesHover extends OptionsObject {
  external factory PlotOptionsBoxplotStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class PlotOptionsBoxplotStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsBoxplotStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsBoxplotTooltip extends OptionsObject {
  external factory PlotOptionsBoxplotTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsBoxplotZones extends OptionsObject {
  external factory PlotOptionsBoxplotZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsBubble extends OptionsObject {
  external factory PlotOptionsBubble ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * null
   */
  external PlotOptionsBubbleDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsBubbleDataLabels a_dataLabels);
  /**
   * Whether to display negative sized bubbles. The threshold is given by the <a href="#plotOptions.bubble.zThreshold">zThreshold</a> option, and negative bubbles can be visualized by setting <a href="#plotOptions.bubble.negativeColor">negativeColor</a>.
   */
  external bool get displayNegative;
  external void set displayNegative (bool a_displayNegative);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsBubbleEvents get events;
  external void set events (PlotOptionsBubbleEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external PlotOptionsBubbleMarker get marker;
  external void set marker (PlotOptionsBubbleMarker a_marker);
  /**
   * Maximum bubble size. Bubbles will automatically size between the <code>minSize</code> and <code>maxSize</code> to reflect the <code>z</code> value of each bubble. Can be either pixels (when no unit is given), or a percentage of the smallest one of the plot width and height.
   */
  external String get maxSize;
  external void set maxSize (String a_maxSize);
  /**
   * Minimum bubble size. Bubbles will automatically size between the <code>minSize</code> and <code>maxSize</code> to reflect the <code>z</code> value of each bubble. Can be either pixels (when no unit is given), or a percentage of the smallest one of the plot width and height.
   */
  external String get minSize;
  external void set minSize (String a_minSize);
  /**
   * When a point's Z value is below the <a href="#plotOptions.bubble.zThreshold">zThreshold</a> setting, this color is used.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsBubblePoint get point;
  external void set point (PlotOptionsBubblePoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * Whether the bubble's value should be represented by the area or the width of the bubble. The default, <code>area</code>, corresponds best to the human perception of the size of each bubble.
   */
  external String get sizeBy;
  external void set sizeBy (String a_sizeBy);
  /**
   * When this is true, the absolute value of z determines the size of the bubble. This means that with the default <code>zThreshold</code> of 0, a bubble of value -1 will have the same size as a bubble of value 1, while a bubble of value 0 will have a smaller size according to <code>minSize</code>.
   */
  external bool get sizeByAbsoluteValue;
  external void set sizeByAbsoluteValue (bool a_sizeByAbsoluteValue);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The threshold, also called zero level or base level. For line type series this is only used in conjunction with <a href="#plotOptions.series.negativeColor">negativeColor</a>.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * The minimum for the Z value range. Defaults to the highest Z value in the data.
   */
  external num get zMax;
  external void set zMax (num a_zMax);
  /**
   * The minimum for the Z value range. Defaults to the lowest Z value in the data.
   */
  external num get zMin;
  external void set zMin (num a_zMin);
  /**
   * When <a href="#plotOptions.bubble.displayNegative">displayNegative</a> is <code>false</code>, bubbles with lower Z values are skipped. When <code>displayNegative</code> is <code>true</code> and a <a href="#plotOptions.bubble.negativeColor">negativeColor</a> is given, points with lower Z is colored.
   */
  external num get zThreshold;
  external void set zThreshold (num a_zThreshold);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsBubbleDataLabels extends OptionsObject {
  external factory PlotOptionsBubbleDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsBubbleEvents extends OptionsObject {
  external factory PlotOptionsBubbleEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsBubbleMarker extends OptionsObject {
  external factory PlotOptionsBubbleMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external PlotOptionsBubbleMarkerStates get states;
  external void set states (PlotOptionsBubbleMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsBubbleMarkerStates extends OptionsObject {
  external factory PlotOptionsBubbleMarkerStates ();
  /**
   * null
   */
  external PlotOptionsBubbleMarkerStatesHover get hover;
  external void set hover (PlotOptionsBubbleMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external PlotOptionsBubbleMarkerStatesSelect get select;
  external void set select (PlotOptionsBubbleMarkerStatesSelect a_select);
}
@JS()
@anonymous
class PlotOptionsBubbleMarkerStatesHover extends OptionsObject {
  external factory PlotOptionsBubbleMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class PlotOptionsBubbleMarkerStatesSelect extends OptionsObject {
  external factory PlotOptionsBubbleMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class PlotOptionsBubblePoint extends OptionsObject {
  external factory PlotOptionsBubblePoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsBubblePointEvents get events;
  external void set events (PlotOptionsBubblePointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsBubblePointEvents extends OptionsObject {
  external factory PlotOptionsBubblePointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsBubbleStates extends OptionsObject {
  external factory PlotOptionsBubbleStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsBubbleStatesHover get hover;
  external void set hover (PlotOptionsBubbleStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsBubbleStatesHover extends OptionsObject {
  external factory PlotOptionsBubbleStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsBubbleStatesHoverMarker get marker;
  external void set marker (PlotOptionsBubbleStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsBubbleStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsBubbleStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsBubbleStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsBubbleStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsBubbleTooltip extends OptionsObject {
  external factory PlotOptionsBubbleTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsBubbleZones extends OptionsObject {
  external factory PlotOptionsBubbleZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsColumn extends OptionsObject {
  external factory PlotOptionsColumn ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border surrounding each column or bar.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The corner radius of the border surrounding each column or bar.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The width of the border surrounding each column or bar.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * null
   */
  external PlotOptionsColumnDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsColumnDataLabels a_dataLabels);
  /**
   * Depth of the columns in a 3D column chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * 3D columns only. The color of the edges. Similar to <code>borderColor</code>, except it defaults to the same color as the column.
   */
  external dynamic get edgeColor;
  external void set edgeColor (dynamic a_edgeColor);
  /**
   * 3D columns only. The width of the colored edges.
   */
  external num get edgeWidth;
  external void set edgeWidth (num a_edgeWidth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsColumnEvents get events;
  external void set events (PlotOptionsColumnEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * Padding between each value groups, in x axis units.
   */
  external num get groupPadding;
  external void set groupPadding (num a_groupPadding);
  /**
   * The spacing between columns on the Z Axis in a 3D chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get groupZPadding;
  external void set groupZPadding (num a_groupZPadding);
  /**
   * Whether to group non-stacked columns or to let them render independent of each other. Non-grouped columns will be laid out individually and overlap each other.
   */
  external bool get grouping;
  external void set grouping (bool a_grouping);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The minimal height for a column or width for a bar. By default, 0 values are not shown. To visualize a 0 (or close to zero) point, set the minimal point length to a  pixel value like 3. In stacked column charts, minPointLength might not be respected for tightly packed values.
   */
  external num get minPointLength;
  external void set minPointLength (num a_minPointLength);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsColumnPoint get point;
  external void set point (PlotOptionsColumnPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * Padding between each column or bar, in x axis units.
   */
  external num get pointPadding;
  external void set pointPadding (num a_pointPadding);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * The X axis range that each point is valid for. This determines the width of the column. On a categorized axis, the range will be 1 by default (one category unit). On linear and datetime axes, the range will be computed as the distance between the two closest data points.
   */
  external num get pointRange;
  external void set pointRange (num a_pointRange);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * A pixel value specifying a fixed width for each column or bar. When <code>null</code>, the width is calculated from the <code>pointPadding</code> and <code>groupPadding</code>.
   */
  external num get pointWidth;
  external void set pointWidth (num a_pointWidth);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * Whether to stack the values of each series on top of each other. Possible values are null to disable, "normal" to stack by value or "percent".
   */
  external String get stacking;
  external void set stacking (String a_stacking);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The Y axis value to serve as the base for the columns, for distinguishing between values above and below a threshold. If <code>null</code>, the columns extend from the padding Y axis minimum.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsColumnDataLabels extends OptionsObject {
  external factory PlotOptionsColumnDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsColumnEvents extends OptionsObject {
  external factory PlotOptionsColumnEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsColumnPoint extends OptionsObject {
  external factory PlotOptionsColumnPoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsColumnPointEvents get events;
  external void set events (PlotOptionsColumnPointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsColumnPointEvents extends OptionsObject {
  external factory PlotOptionsColumnPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsColumnStates extends OptionsObject {
  external factory PlotOptionsColumnStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsColumnStatesHover get hover;
  external void set hover (PlotOptionsColumnStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsColumnStatesHover extends OptionsObject {
  external factory PlotOptionsColumnStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class PlotOptionsColumnStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsColumnStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsColumnTooltip extends OptionsObject {
  external factory PlotOptionsColumnTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsColumnZones extends OptionsObject {
  external factory PlotOptionsColumnZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsColumnrange extends OptionsObject {
  external factory PlotOptionsColumnrange ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border surrounding each column or bar.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The corner radius of the border surrounding each column or bar.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The width of the border surrounding each column or bar.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * Extended data labels for range series types. Range series  data labels have no <code>x</code> and <code>y</code> options. Instead, they have <code>xLow</code>, <code>xHigh</code>, <code>yLow</code> and <code>yHigh</code> options to allow the higher and lower data label sets individually.
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Depth of the columns in a 3D column chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * 3D columns only. The color of the edges. Similar to <code>borderColor</code>, except it defaults to the same color as the column.
   */
  external dynamic get edgeColor;
  external void set edgeColor (dynamic a_edgeColor);
  /**
   * 3D columns only. The width of the colored edges.
   */
  external num get edgeWidth;
  external void set edgeWidth (num a_edgeWidth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsColumnrangeEvents get events;
  external void set events (PlotOptionsColumnrangeEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * Padding between each value groups, in x axis units.
   */
  external num get groupPadding;
  external void set groupPadding (num a_groupPadding);
  /**
   * The spacing between columns on the Z Axis in a 3D chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get groupZPadding;
  external void set groupZPadding (num a_groupZPadding);
  /**
   * Whether to group non-stacked columns or to let them render independent of each other. Non-grouped columns will be laid out individually and overlap each other.
   */
  external bool get grouping;
  external void set grouping (bool a_grouping);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The minimal height for a column or width for a bar. By default, 0 values are not shown. To visualize a 0 (or close to zero) point, set the minimal point length to a  pixel value like 3. In stacked column charts, minPointLength might not be respected for tightly packed values.
   */
  external num get minPointLength;
  external void set minPointLength (num a_minPointLength);
  /**
   * Properties for each single point
   */
  external PlotOptionsColumnrangePoint get point;
  external void set point (PlotOptionsColumnrangePoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * Padding between each column or bar, in x axis units.
   */
  external num get pointPadding;
  external void set pointPadding (num a_pointPadding);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * The X axis range that each point is valid for. This determines the width of the column. On a categorized axis, the range will be 1 by default (one category unit). On linear and datetime axes, the range will be computed as the distance between the two closest data points.
   */
  external num get pointRange;
  external void set pointRange (num a_pointRange);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * A pixel value specifying a fixed width for each column or bar. When <code>null</code>, the width is calculated from the <code>pointPadding</code> and <code>groupPadding</code>.
   */
  external num get pointWidth;
  external void set pointWidth (num a_pointWidth);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsColumnrangeDataLabels extends OptionsObject {
  external factory PlotOptionsColumnrangeDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * X offset of the higher data labels relative to the point value.
   */
  external num get xHigh;
  external void set xHigh (num a_xHigh);
  /**
   * X offset of the lower data labels relative to the point value.
   */
  external num get xLow;
  external void set xLow (num a_xLow);
  /**
   * Y offset of the higher data labels relative to the point value.
   */
  external num get yHigh;
  external void set yHigh (num a_yHigh);
  /**
   * Y offset of the lower data labels relative to the point value.
   */
  external num get yLow;
  external void set yLow (num a_yLow);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsColumnrangeEvents extends OptionsObject {
  external factory PlotOptionsColumnrangeEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsColumnrangePoint extends OptionsObject {
  external factory PlotOptionsColumnrangePoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsColumnrangePointEvents get events;
  external void set events (PlotOptionsColumnrangePointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsColumnrangePointEvents extends OptionsObject {
  external factory PlotOptionsColumnrangePointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsColumnrangeStates extends OptionsObject {
  external factory PlotOptionsColumnrangeStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsColumnrangeStatesHover get hover;
  external void set hover (PlotOptionsColumnrangeStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsColumnrangeStatesHover extends OptionsObject {
  external factory PlotOptionsColumnrangeStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class PlotOptionsColumnrangeStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsColumnrangeStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsColumnrangeTooltip extends OptionsObject {
  external factory PlotOptionsColumnrangeTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsColumnrangeZones extends OptionsObject {
  external factory PlotOptionsColumnrangeZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsErrorbar extends OptionsObject {
  external factory PlotOptionsErrorbar ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * The main color of the bars. This can be overridden by <a href="#plotOptions.errorbar.stemColor">stemColor</a> and <a href="#plotOptions.errorbar.whiskerColor">whiskerColor</a> individually.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * Depth of the columns in a 3D column chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * 3D columns only. The color of the edges. Similar to <code>borderColor</code>, except it defaults to the same color as the column.
   */
  external dynamic get edgeColor;
  external void set edgeColor (dynamic a_edgeColor);
  /**
   * 3D columns only. The width of the colored edges.
   */
  external num get edgeWidth;
  external void set edgeWidth (num a_edgeWidth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsErrorbarEvents get events;
  external void set events (PlotOptionsErrorbarEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * The spacing between columns on the Z Axis in a 3D chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get groupZPadding;
  external void set groupZPadding (num a_groupZPadding);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The width of the line surrounding the box. If any of <a href="#plotOptions.boxplot.stemWidth">stemWidth</a>, <a href="#plotOptions.boxplot.medianWidth">medianWidth</a> or <a href="#plotOptions.boxplot.whiskerWidth">whiskerWidth</a> are <code>null</code>, the lineWidth also applies to these lines.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The parent series of the error bar. The default value links it to the previous series. Otherwise, use the id of the parent series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsErrorbarPoint get point;
  external void set point (PlotOptionsErrorbarPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * Padding between each column or bar, in x axis units.
   */
  external num get pointPadding;
  external void set pointPadding (num a_pointPadding);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * The X axis range that each point is valid for. This determines the width of the column. On a categorized axis, the range will be 1 by default (one category unit). On linear and datetime axes, the range will be computed as the distance between the two closest data points.
   */
  external num get pointRange;
  external void set pointRange (num a_pointRange);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * A pixel value specifying a fixed width for each column or bar. When <code>null</code>, the width is calculated from the <code>pointPadding</code> and <code>groupPadding</code>.
   */
  external num get pointWidth;
  external void set pointWidth (num a_pointWidth);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * The color of the stem, the vertical line extending from the box to the whiskers. If <code>null</code>, the series color is used.
   */
  external dynamic get stemColor;
  external void set stemColor (dynamic a_stemColor);
  /**
   * The dash style of the stem, the vertical line extending from the box to the whiskers.
   */
  external String get stemDashStyle;
  external void set stemDashStyle (String a_stemDashStyle);
  /**
   * The width of the stem, the vertical line extending from the box to the whiskers. If <code>null</code>, the width is inherited from the <a href="#plotOptions.boxplot.lineWidth">lineWidth</a> option.
   */
  external num get stemWidth;
  external void set stemWidth (num a_stemWidth);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * The color of the whiskers, the horizontal lines marking low and high values. When <code>null</code>, the general series color is used.
   */
  external dynamic get whiskerColor;
  external void set whiskerColor (dynamic a_whiskerColor);
  /**
   * The length of the whiskers, the horizontal lines marking low and high values. It can be a numerical pixel value, or a percentage value of the box width. Set <code>0</code> to disable whiskers.
   */
  external dynamic get whiskerLength;
  external void set whiskerLength (dynamic a_whiskerLength);
  /**
   * The line width of the whiskers, the horizontal lines marking low and high values. When <code>null</code>, the general <a href="#plotOptions.errorbar.lineWidth">lineWidth</a> applies.
   */
  external num get whiskerWidth;
  external void set whiskerWidth (num a_whiskerWidth);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsErrorbarEvents extends OptionsObject {
  external factory PlotOptionsErrorbarEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsErrorbarPoint extends OptionsObject {
  external factory PlotOptionsErrorbarPoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsErrorbarPointEvents get events;
  external void set events (PlotOptionsErrorbarPointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsErrorbarPointEvents extends OptionsObject {
  external factory PlotOptionsErrorbarPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsErrorbarStates extends OptionsObject {
  external factory PlotOptionsErrorbarStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsErrorbarStatesHover get hover;
  external void set hover (PlotOptionsErrorbarStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsErrorbarStatesHover extends OptionsObject {
  external factory PlotOptionsErrorbarStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class PlotOptionsErrorbarStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsErrorbarStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsErrorbarTooltip extends OptionsObject {
  external factory PlotOptionsErrorbarTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsErrorbarZones extends OptionsObject {
  external factory PlotOptionsErrorbarZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsFunnel extends OptionsObject {
  external factory PlotOptionsFunnel ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * The color of the border surrounding each slice. When <code>null</code>, the border takes the same color as the slice fill. This can be used together with a <code>borderWidth</code> to fill drawing gaps created by antialiazing artefacts in borderless pies.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * <p>The width of the border surrounding each slice.</p>



      <p>When setting the border width to 0, there may be small gaps between the slices due to SVG antialiasing artefacts. To work around this, keep the border width at 0.5 or 1, but set the <code>borderColor</code> to <code>null</code> instead.</p>
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The center of the series. By default, it is centered in the middle of the plot area, so it fills the plot area height.
   */
  external dynamic get center;
  external void set center (dynamic a_center);
  /**
   * A series specific or series type specific color set to use instead of the global <a href="#colors">colors</a>.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * null
   */
  external PlotOptionsFunnelDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsFunnelDataLabels a_dataLabels);
  /**
   * The thickness of a 3D pie. Requires <code>highcharts-3d.js</code>
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsFunnelEvents get events;
  external void set events (PlotOptionsFunnelEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * The height of the funnel or pyramid. If it is a number it defines the pixel height, if it is a percentage string it is the percentage of the plot area height.
   */
  external dynamic get height;
  external void set height (dynamic a_height);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The minimum size for a pie in response to auto margins. The pie will try to shrink to make room for data labels in side the plot area, but only to this size.
   */
  external num get minSize;
  external void set minSize (num a_minSize);
  /**
   * The height of the neck, the lower part of the funnel. A number defines pixel width, a percentage string defines a percentage of the plot area height.
   */
  external dynamic get neckHeight;
  external void set neckHeight (dynamic a_neckHeight);
  /**
   * The width of the neck, the lower part of the funnel. A number defines pixel width, a percentage string defines a percentage of the plot area width.
   */
  external dynamic get neckWidth;
  external void set neckWidth (dynamic a_neckWidth);
  /**
   * Properties for each single point
   */
  external PlotOptionsFunnelPoint get point;
  external void set point (PlotOptionsFunnelPoint a_point);
  /**
   * A reversed funnel has the widest area down. A reversed funnel with no neck width and neck height is a pyramid.
   */
  external bool get reversed;
  external void set reversed (bool a_reversed);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * Whether to display this particular series or series type in the legend. Since 2.1, pies are not shown in the legend by default.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * If a point is sliced, moved out from the center, how many pixels should  it be moved?.
   */
  external num get slicedOffset;
  external void set slicedOffset (num a_slicedOffset);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * The width of the funnel compared to the width of the plot area, or the pixel width if it is a number.
   */
  external dynamic get width;
  external void set width (dynamic a_width);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsFunnelDataLabels extends OptionsObject {
  external factory PlotOptionsFunnelDataLabels ();
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * The color of the line connecting the data label to the pie slice. The default color is the same as the point's color.
   */
  external String get connectorColor;
  external void set connectorColor (String a_connectorColor);
  /**
   * The distance from the data label to the connector.
   */
  external num get connectorPadding;
  external void set connectorPadding (num a_connectorPadding);
  /**
   * The width of the line connecting the data label to the pie slice.
   */
  external num get connectorWidth;
  external void set connectorWidth (num a_connectorWidth);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * The distance of the data label from the pie's edge. Negative numbers put the data label on top of the pie slices. Connectors are only shown for data labels outside the pie.
   */
  external num get distance;
  external void set distance (num a_distance);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Whether to render the connector as a soft arc or a line with sharp break.
   */
  external bool get softConnector;
  external void set softConnector (bool a_softConnector);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsFunnelEvents extends OptionsObject {
  external factory PlotOptionsFunnelEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the point name in the legend is clicked. One parameter, event, is passed to the function. The state of the checkbox is found by event.checked. The checked item is found by event.item. Return false to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Not applicable to pies, as the legend item is per point. See point.events.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsFunnelPoint extends OptionsObject {
  external factory PlotOptionsFunnelPoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsFunnelPointEvents get events;
  external void set events (PlotOptionsFunnelPointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsFunnelPointEvents extends OptionsObject {
  external factory PlotOptionsFunnelPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the legend item belonging to the pie point (slice) is clicked.  The <code>this</code> keyword refers to the  point itself. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. The default action is to toggle the visibility of the point. This can be prevented by calling  <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsFunnelStates extends OptionsObject {
  external factory PlotOptionsFunnelStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsFunnelStatesHover get hover;
  external void set hover (PlotOptionsFunnelStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsFunnelStatesHover extends OptionsObject {
  external factory PlotOptionsFunnelStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsFunnelStatesHoverMarker get marker;
  external void set marker (PlotOptionsFunnelStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsFunnelStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsFunnelStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsFunnelStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsFunnelStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsFunnelTooltip extends OptionsObject {
  external factory PlotOptionsFunnelTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsFunnelZones extends OptionsObject {
  external factory PlotOptionsFunnelZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsGauge extends OptionsObject {
  external factory PlotOptionsGauge ();
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * Data labels for the gauge. For gauges, the data labels are enabled by default and shown in a bordered box below the point.
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Options for the dial or arrow pointer of the gauge.
   */
  external JsObject get dial;
  external void set dial (JsObject a_dial);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsGaugeEvents get events;
  external void set events (PlotOptionsGaugeEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Allow the dial to overshoot the end of the perimeter axis by this many degrees. Say if the gauge axis goes from 0 to 60, a value of 100, or 1000, will show 5 degrees beyond the end of the axis.
   */
  external num get overshoot;
  external void set overshoot (num a_overshoot);
  /**
   * Options for the pivot or the center point of the gauge.
   */
  external JsObject get pivot;
  external void set pivot (JsObject a_pivot);
  /**
   * Properties for each single point
   */
  external PlotOptionsGaugePoint get point;
  external void set point (PlotOptionsGaugePoint a_point);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. Defaults to false for gauge series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The threshold, also called zero level or base level. For line type series this is only used in conjunction with <a href="#plotOptions.series.negativeColor">negativeColor</a>.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When this option is <code>true</code>, the dial will wrap around the axes. For instance, in a full-range gauge going from 0 to 360, a value of 400 will point to 40. When <code>wrap</code> is <code>false</code>, the dial stops at 360.
   */
  external bool get wrap;
  external void set wrap (bool a_wrap);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsGaugeDataLabels extends OptionsObject {
  external factory PlotOptionsGaugeDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the gauge's data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the gauge data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of the data label.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the center of the gauge.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. A value of 2 display them behind the dial.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsGaugeDial extends OptionsObject {
  external factory PlotOptionsGaugeDial ();
  /**
   * The background or fill color of the gauge's dial.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The length of the dial's base part, relative to the total radius or length of the dial.
   */
  external String get baseLength;
  external void set baseLength (String a_baseLength);
  /**
   * The pixel width of the base of the gauge dial. The base is the part closest to the pivot, defined by baseLength.
   */
  external num get baseWidth;
  external void set baseWidth (num a_baseWidth);
  /**
   * The border color or stroke of the gauge's dial. By default, the borderWidth is 0, so this must be set in addition to a custom border color.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The width of the gauge dial border in pixels.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The radius or length of the dial, in percentages relative to the radius of the gauge itself.
   */
  external String get radius;
  external void set radius (String a_radius);
  /**
   * The length of the dial's rear end, the part that extends out on the other side of the pivot. Relative to the dial's length.
   */
  external String get rearLength;
  external void set rearLength (String a_rearLength);
  /**
   * The width of the top of the dial, closest to the perimeter. The pivot narrows in from the base to the top.
   */
  external num get topWidth;
  external void set topWidth (num a_topWidth);
}
@JS()
@anonymous
class PlotOptionsGaugeEvents extends OptionsObject {
  external factory PlotOptionsGaugeEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsGaugePivot extends OptionsObject {
  external factory PlotOptionsGaugePivot ();
  /**
   * The background color or fill of the pivot.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border or stroke color of the pivot. In able to change this, the borderWidth must also be set to something other than the default 0.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border or stroke width of the pivot.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The pixel radius of the pivot.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class PlotOptionsGaugePoint extends OptionsObject {
  external factory PlotOptionsGaugePoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsGaugePointEvents get events;
  external void set events (PlotOptionsGaugePointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsGaugePointEvents extends OptionsObject {
  external factory PlotOptionsGaugePointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsGaugeStates extends OptionsObject {
  external factory PlotOptionsGaugeStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsGaugeStatesHover get hover;
  external void set hover (PlotOptionsGaugeStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsGaugeStatesHover extends OptionsObject {
  external factory PlotOptionsGaugeStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsGaugeStatesHoverMarker get marker;
  external void set marker (PlotOptionsGaugeStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsGaugeStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsGaugeStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsGaugeStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsGaugeStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsGaugeTooltip extends OptionsObject {
  external factory PlotOptionsGaugeTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsGaugeZones extends OptionsObject {
  external factory PlotOptionsGaugeZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsHeatmap extends OptionsObject {
  external factory PlotOptionsHeatmap ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border surrounding each column or bar.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The corner radius of the border surrounding each column or bar.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The width of the border surrounding each column or bar.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The main color of the series. In heat maps this color is rarely used, as we mostly use the color to denote the value of each point. Unless options are set in the <a href="#colorAxis">colorAxis</a>, the default value is pulled from the <a href="#colors">options.colors</a> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * The column size - how many X axis units each column in the heatmap should span.
   */
  external num get colsize;
  external void set colsize (num a_colsize);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * null
   */
  external PlotOptionsHeatmapDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsHeatmapDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsHeatmapEvents get events;
  external void set events (PlotOptionsHeatmapEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * Properties for each single point
   */
  external PlotOptionsHeatmapPoint get point;
  external void set point (PlotOptionsHeatmapPoint a_point);
  /**
   * The row size - how many Y axis units each heatmap row should span.
   */
  external num get rowsize;
  external void set rowsize (num a_rowsize);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsHeatmapDataLabels extends OptionsObject {
  external factory PlotOptionsHeatmapDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsHeatmapEvents extends OptionsObject {
  external factory PlotOptionsHeatmapEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsHeatmapPoint extends OptionsObject {
  external factory PlotOptionsHeatmapPoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsHeatmapPointEvents get events;
  external void set events (PlotOptionsHeatmapPointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsHeatmapPointEvents extends OptionsObject {
  external factory PlotOptionsHeatmapPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsHeatmapStates extends OptionsObject {
  external factory PlotOptionsHeatmapStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsHeatmapStatesHover get hover;
  external void set hover (PlotOptionsHeatmapStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsHeatmapStatesHover extends OptionsObject {
  external factory PlotOptionsHeatmapStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class PlotOptionsHeatmapStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsHeatmapStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsHeatmapTooltip extends OptionsObject {
  external factory PlotOptionsHeatmapTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsHeatmapZones extends OptionsObject {
  external factory PlotOptionsHeatmapZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsLine extends OptionsObject {
  external factory PlotOptionsLine ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Polar charts only. Whether to connect the ends of a line series plot across the extremes.
   */
  external bool get connectEnds;
  external void set connectEnds (bool a_connectEnds);
  /**
   * Whether to connect a graph line across null points.
   */
  external bool get connectNulls;
  external void set connectNulls (bool a_connectNulls);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * null
   */
  external PlotOptionsLineDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsLineDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsLineEvents get events;
  external void set events (PlotOptionsLineEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The line cap used for line ends and line joins on the graph.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external PlotOptionsLineMarker get marker;
  external void set marker (PlotOptionsLineMarker a_marker);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsLinePoint get point;
  external void set point (PlotOptionsLinePoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * Whether to stack the values of each series on top of each other. Possible values are null to disable, "normal" to stack by value or "percent".
   */
  external String get stacking;
  external void set stacking (String a_stacking);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Whether to apply steps to the line. Possible values are <code>left</code>, <code>center</code> and <code>right</code>. Prior to 2.3.5, only <code>left</code> was supported.
   */
  external String get step;
  external void set step (String a_step);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The threshold, also called zero level or base level. For line type series this is only used in conjunction with <a href="#plotOptions.series.negativeColor">negativeColor</a>.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsLineDataLabels extends OptionsObject {
  external factory PlotOptionsLineDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsLineEvents extends OptionsObject {
  external factory PlotOptionsLineEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsLineMarker extends OptionsObject {
  external factory PlotOptionsLineMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external PlotOptionsLineMarkerStates get states;
  external void set states (PlotOptionsLineMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsLineMarkerStates extends OptionsObject {
  external factory PlotOptionsLineMarkerStates ();
  /**
   * null
   */
  external PlotOptionsLineMarkerStatesHover get hover;
  external void set hover (PlotOptionsLineMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external PlotOptionsLineMarkerStatesSelect get select;
  external void set select (PlotOptionsLineMarkerStatesSelect a_select);
}
@JS()
@anonymous
class PlotOptionsLineMarkerStatesHover extends OptionsObject {
  external factory PlotOptionsLineMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class PlotOptionsLineMarkerStatesSelect extends OptionsObject {
  external factory PlotOptionsLineMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class PlotOptionsLinePoint extends OptionsObject {
  external factory PlotOptionsLinePoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsLinePointEvents get events;
  external void set events (PlotOptionsLinePointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsLinePointEvents extends OptionsObject {
  external factory PlotOptionsLinePointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsLineStates extends OptionsObject {
  external factory PlotOptionsLineStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsLineStatesHover get hover;
  external void set hover (PlotOptionsLineStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsLineStatesHover extends OptionsObject {
  external factory PlotOptionsLineStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsLineStatesHoverMarker get marker;
  external void set marker (PlotOptionsLineStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsLineStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsLineStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsLineStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsLineStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsLineTooltip extends OptionsObject {
  external factory PlotOptionsLineTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsLineZones extends OptionsObject {
  external factory PlotOptionsLineZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsPie extends OptionsObject {
  external factory PlotOptionsPie ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border surrounding each slice. When <code>null</code>, the border takes the same color as the slice fill. This can be used together with a <code>borderWidth</code> to fill drawing gaps created by antialiazing artefacts in borderless pies.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * <p>The width of the border surrounding each slice.</p>



      <p>When setting the border width to 0, there may be small gaps between the slices due to SVG antialiasing artefacts. To work around this, keep the border width at 0.5 or 1, but set the <code>borderColor</code> to <code>null</code> instead.</p>
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The center of the pie chart relative to the plot area. Can be percentages or pixel values. The default behaviour (as of 3.0) is to center the pie so that all slices and data labels are within the plot area. As a consequence, the pie may actually jump around in a chart with dynamic values, as the data labels move. In that case, the center should be explicitly set, for example to <code>["50%", "50%"]</code>.


   */
  external dynamic get center;
  external void set center (dynamic a_center);
  /**
   * A series specific or series type specific color set to use instead of the global <a href="#colors">colors</a>.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * null
   */
  external PlotOptionsPieDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsPieDataLabels a_dataLabels);
  /**
   * The thickness of a 3D pie. Requires <code>highcharts-3d.js</code>
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * The end angle of the pie in degrees where 0 is top and 90 is right. Defaults to <code>startAngle</code> plus 360.
   */
  external num get endAngle;
  external void set endAngle (num a_endAngle);
  /**
   * null
   */
  external PlotOptionsPieEvents get events;
  external void set events (PlotOptionsPieEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * <p>Equivalent to <a href="#chart.ignoreHiddenSeries">chart.ignoreHiddenSeries</a>, this option tells whether the series shall be redrawn as if the hidden point were <code>null</code>.</p>

      <p>The default value changed from <code>false</code> to <code>true</code> with Highcharts 3.0.</p>
   */
  external bool get ignoreHiddenPoint;
  external void set ignoreHiddenPoint (bool a_ignoreHiddenPoint);
  /**
   * <p>The size of the inner diameter for the pie. A size greater than 0 renders a donut chart. Can be a percentage or pixel value. Percentages are relative to the pie size. Pixel values are given as integers.</p>



      <p>Note: in Highcharts < 4.1.2, the percentage was relative to the plot area, not the pie size.</p>
   */
  external dynamic get innerSize;
  external void set innerSize (dynamic a_innerSize);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The minimum size for a pie in response to auto margins. The pie will try to shrink to make room for data labels in side the plot area, but only to this size.
   */
  external num get minSize;
  external void set minSize (num a_minSize);
  /**
   * Properties for each single point
   */
  external PlotOptionsPiePoint get point;
  external void set point (PlotOptionsPiePoint a_point);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * Whether to display this particular series or series type in the legend. Since 2.1, pies are not shown in the legend by default.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * The diameter of the pie relative to the plot area. Can be a percentage or pixel value. Pixel values are given as integers. The default behaviour (as of 3.0) is to scale to the plot area and give room for data labels within the plot area. As a consequence, the size of the pie may vary when points are updated and data labels more around. In that case it is best to set a fixed value, for example <code>"75%"</code>.
   */
  external dynamic get size;
  external void set size (dynamic a_size);
  /**
   * If a point is sliced, moved out from the center, how many pixels should  it be moved?.
   */
  external num get slicedOffset;
  external void set slicedOffset (num a_slicedOffset);
  /**
   * The start angle of the pie slices in degrees where 0 is top and 90 right.
   */
  external num get startAngle;
  external void set startAngle (num a_startAngle);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsPieDataLabels extends OptionsObject {
  external factory PlotOptionsPieDataLabels ();
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * The color of the line connecting the data label to the pie slice. The default color is the same as the point's color.
   */
  external String get connectorColor;
  external void set connectorColor (String a_connectorColor);
  /**
   * The distance from the data label to the connector.
   */
  external num get connectorPadding;
  external void set connectorPadding (num a_connectorPadding);
  /**
   * The width of the line connecting the data label to the pie slice.
   */
  external num get connectorWidth;
  external void set connectorWidth (num a_connectorWidth);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * The distance of the data label from the pie's edge. Negative numbers put the data label on top of the pie slices. Connectors are only shown for data labels outside the pie.
   */
  external num get distance;
  external void set distance (num a_distance);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Whether to render the connector as a soft arc or a line with sharp break.
   */
  external bool get softConnector;
  external void set softConnector (bool a_softConnector);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsPieEvents extends OptionsObject {
  external factory PlotOptionsPieEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the point name in the legend is clicked. One parameter, event, is passed to the function. The state of the checkbox is found by event.checked. The checked item is found by event.item. Return false to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Not applicable to pies, as the legend item is per point. See point.events.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsPiePoint extends OptionsObject {
  external factory PlotOptionsPiePoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsPiePointEvents get events;
  external void set events (PlotOptionsPiePointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsPiePointEvents extends OptionsObject {
  external factory PlotOptionsPiePointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the legend item belonging to the pie point (slice) is clicked.  The <code>this</code> keyword refers to the  point itself. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. The default action is to toggle the visibility of the point. This can be prevented by calling  <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsPieStates extends OptionsObject {
  external factory PlotOptionsPieStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsPieStatesHover get hover;
  external void set hover (PlotOptionsPieStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsPieStatesHover extends OptionsObject {
  external factory PlotOptionsPieStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsPieStatesHoverMarker get marker;
  external void set marker (PlotOptionsPieStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsPieStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsPieStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsPieStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsPieStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsPieTooltip extends OptionsObject {
  external factory PlotOptionsPieTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsPieZones extends OptionsObject {
  external factory PlotOptionsPieZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsPolygon extends OptionsObject {
  external factory PlotOptionsPolygon ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * null
   */
  external PlotOptionsPolygonDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsPolygonDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsPolygonEvents get events;
  external void set events (PlotOptionsPolygonEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external PlotOptionsPolygonMarker get marker;
  external void set marker (PlotOptionsPolygonMarker a_marker);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsPolygonPoint get point;
  external void set point (PlotOptionsPolygonPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsPolygonDataLabels extends OptionsObject {
  external factory PlotOptionsPolygonDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsPolygonEvents extends OptionsObject {
  external factory PlotOptionsPolygonEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsPolygonMarker extends OptionsObject {
  external factory PlotOptionsPolygonMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external PlotOptionsPolygonMarkerStates get states;
  external void set states (PlotOptionsPolygonMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsPolygonMarkerStates extends OptionsObject {
  external factory PlotOptionsPolygonMarkerStates ();
  /**
   * null
   */
  external PlotOptionsPolygonMarkerStatesHover get hover;
  external void set hover (PlotOptionsPolygonMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external PlotOptionsPolygonMarkerStatesSelect get select;
  external void set select (PlotOptionsPolygonMarkerStatesSelect a_select);
}
@JS()
@anonymous
class PlotOptionsPolygonMarkerStatesHover extends OptionsObject {
  external factory PlotOptionsPolygonMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class PlotOptionsPolygonMarkerStatesSelect extends OptionsObject {
  external factory PlotOptionsPolygonMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class PlotOptionsPolygonPoint extends OptionsObject {
  external factory PlotOptionsPolygonPoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsPolygonPointEvents get events;
  external void set events (PlotOptionsPolygonPointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsPolygonPointEvents extends OptionsObject {
  external factory PlotOptionsPolygonPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsPolygonStates extends OptionsObject {
  external factory PlotOptionsPolygonStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsPolygonStatesHover get hover;
  external void set hover (PlotOptionsPolygonStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsPolygonStatesHover extends OptionsObject {
  external factory PlotOptionsPolygonStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsPolygonStatesHoverMarker get marker;
  external void set marker (PlotOptionsPolygonStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsPolygonStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsPolygonStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsPolygonStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsPolygonStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsPolygonTooltip extends OptionsObject {
  external factory PlotOptionsPolygonTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsPolygonZones extends OptionsObject {
  external factory PlotOptionsPolygonZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsPyramid extends OptionsObject {
  external factory PlotOptionsPyramid ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * The color of the border surrounding each slice. When <code>null</code>, the border takes the same color as the slice fill. This can be used together with a <code>borderWidth</code> to fill drawing gaps created by antialiazing artefacts in borderless pies.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * <p>The width of the border surrounding each slice.</p>



      <p>When setting the border width to 0, there may be small gaps between the slices due to SVG antialiasing artefacts. To work around this, keep the border width at 0.5 or 1, but set the <code>borderColor</code> to <code>null</code> instead.</p>
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The center of the series. By default, it is centered in the middle of the plot area, so it fills the plot area height.
   */
  external dynamic get center;
  external void set center (dynamic a_center);
  /**
   * A series specific or series type specific color set to use instead of the global <a href="#colors">colors</a>.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * null
   */
  external PlotOptionsPyramidDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsPyramidDataLabels a_dataLabels);
  /**
   * The thickness of a 3D pie. Requires <code>highcharts-3d.js</code>
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsPyramidEvents get events;
  external void set events (PlotOptionsPyramidEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * The height of the funnel or pyramid. If it is a number it defines the pixel height, if it is a percentage string it is the percentage of the plot area height.
   */
  external dynamic get height;
  external void set height (dynamic a_height);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The minimum size for a pie in response to auto margins. The pie will try to shrink to make room for data labels in side the plot area, but only to this size.
   */
  external num get minSize;
  external void set minSize (num a_minSize);
  /**
   * Properties for each single point
   */
  external PlotOptionsPyramidPoint get point;
  external void set point (PlotOptionsPyramidPoint a_point);
  /**
   * The pyramid is reversed by default, as opposed to the funnel, which shares the layout engine, and is not reversed.
   */
  external bool get reversed;
  external void set reversed (bool a_reversed);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * Whether to display this particular series or series type in the legend. Since 2.1, pies are not shown in the legend by default.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * If a point is sliced, moved out from the center, how many pixels should  it be moved?.
   */
  external num get slicedOffset;
  external void set slicedOffset (num a_slicedOffset);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * The width of the funnel compared to the width of the plot area, or the pixel width if it is a number.
   */
  external dynamic get width;
  external void set width (dynamic a_width);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsPyramidDataLabels extends OptionsObject {
  external factory PlotOptionsPyramidDataLabels ();
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * The color of the line connecting the data label to the pie slice. The default color is the same as the point's color.
   */
  external String get connectorColor;
  external void set connectorColor (String a_connectorColor);
  /**
   * The distance from the data label to the connector.
   */
  external num get connectorPadding;
  external void set connectorPadding (num a_connectorPadding);
  /**
   * The width of the line connecting the data label to the pie slice.
   */
  external num get connectorWidth;
  external void set connectorWidth (num a_connectorWidth);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * The distance of the data label from the pie's edge. Negative numbers put the data label on top of the pie slices. Connectors are only shown for data labels outside the pie.
   */
  external num get distance;
  external void set distance (num a_distance);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Whether to render the connector as a soft arc or a line with sharp break.
   */
  external bool get softConnector;
  external void set softConnector (bool a_softConnector);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsPyramidEvents extends OptionsObject {
  external factory PlotOptionsPyramidEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the point name in the legend is clicked. One parameter, event, is passed to the function. The state of the checkbox is found by event.checked. The checked item is found by event.item. Return false to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Not applicable to pies, as the legend item is per point. See point.events.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsPyramidPoint extends OptionsObject {
  external factory PlotOptionsPyramidPoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsPyramidPointEvents get events;
  external void set events (PlotOptionsPyramidPointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsPyramidPointEvents extends OptionsObject {
  external factory PlotOptionsPyramidPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the legend item belonging to the pie point (slice) is clicked.  The <code>this</code> keyword refers to the  point itself. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. The default action is to toggle the visibility of the point. This can be prevented by calling  <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsPyramidStates extends OptionsObject {
  external factory PlotOptionsPyramidStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsPyramidStatesHover get hover;
  external void set hover (PlotOptionsPyramidStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsPyramidStatesHover extends OptionsObject {
  external factory PlotOptionsPyramidStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsPyramidStatesHoverMarker get marker;
  external void set marker (PlotOptionsPyramidStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsPyramidStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsPyramidStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsPyramidStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsPyramidStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsPyramidTooltip extends OptionsObject {
  external factory PlotOptionsPyramidTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsPyramidZones extends OptionsObject {
  external factory PlotOptionsPyramidZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsScatter extends OptionsObject {
  external factory PlotOptionsScatter ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * null
   */
  external PlotOptionsScatterDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsScatterDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsScatterEvents get events;
  external void set events (PlotOptionsScatterEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external PlotOptionsScatterMarker get marker;
  external void set marker (PlotOptionsScatterMarker a_marker);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsScatterPoint get point;
  external void set point (PlotOptionsScatterPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The threshold, also called zero level or base level. For line type series this is only used in conjunction with <a href="#plotOptions.series.negativeColor">negativeColor</a>.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsScatterDataLabels extends OptionsObject {
  external factory PlotOptionsScatterDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsScatterEvents extends OptionsObject {
  external factory PlotOptionsScatterEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsScatterMarker extends OptionsObject {
  external factory PlotOptionsScatterMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external PlotOptionsScatterMarkerStates get states;
  external void set states (PlotOptionsScatterMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsScatterMarkerStates extends OptionsObject {
  external factory PlotOptionsScatterMarkerStates ();
  /**
   * null
   */
  external PlotOptionsScatterMarkerStatesHover get hover;
  external void set hover (PlotOptionsScatterMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external PlotOptionsScatterMarkerStatesSelect get select;
  external void set select (PlotOptionsScatterMarkerStatesSelect a_select);
}
@JS()
@anonymous
class PlotOptionsScatterMarkerStatesHover extends OptionsObject {
  external factory PlotOptionsScatterMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class PlotOptionsScatterMarkerStatesSelect extends OptionsObject {
  external factory PlotOptionsScatterMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class PlotOptionsScatterPoint extends OptionsObject {
  external factory PlotOptionsScatterPoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsScatterPointEvents get events;
  external void set events (PlotOptionsScatterPointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsScatterPointEvents extends OptionsObject {
  external factory PlotOptionsScatterPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsScatterStates extends OptionsObject {
  external factory PlotOptionsScatterStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsScatterStatesHover get hover;
  external void set hover (PlotOptionsScatterStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsScatterStatesHover extends OptionsObject {
  external factory PlotOptionsScatterStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsScatterStatesHoverMarker get marker;
  external void set marker (PlotOptionsScatterStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsScatterStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsScatterStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsScatterStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsScatterStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsScatterTooltip extends OptionsObject {
  external factory PlotOptionsScatterTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsScatterZones extends OptionsObject {
  external factory PlotOptionsScatterZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsSeries extends Series {
  external factory PlotOptionsSeries ();


  /**
   * Padding between each value groups, in x axis units.
   */
  external num get groupPadding;
  external void set groupPadding (num a_groupPadding);

  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Polar charts only. Whether to connect the ends of a line series plot across the extremes.
   */
  external bool get connectEnds;
  external void set connectEnds (bool a_connectEnds);
  /**
   * Whether to connect a graph line across null points.
   */
  external bool get connectNulls;
  external void set connectNulls (bool a_connectNulls);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * null
   */
  external PlotOptionsSeriesDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsSeriesDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsSeriesEvents get events;
  external void set events (PlotOptionsSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The line cap used for line ends and line joins on the graph.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external PlotOptionsSeriesMarker get marker;
  external void set marker (PlotOptionsSeriesMarker a_marker);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsSeriesPoint get point;
  external void set point (PlotOptionsSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * Whether to stack the values of each series on top of each other. Possible values are null to disable, "normal" to stack by value or "percent".
   */
  external String get stacking;
  external void set stacking (String a_stacking);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Whether to apply steps to the line. Possible values are <code>left</code>, <code>center</code> and <code>right</code>. Prior to 2.3.5, only <code>left</code> was supported.
   */
  external String get step;
  external void set step (String a_step);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The threshold, also called zero level or base level. For line type series this is only used in conjunction with <a href="#plotOptions.series.negativeColor">negativeColor</a>.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsSeriesDataLabels extends OptionsObject {
  external factory PlotOptionsSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsSeriesEvents extends OptionsObject {
  external factory PlotOptionsSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsSeriesMarker extends OptionsObject {
  external factory PlotOptionsSeriesMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external PlotOptionsSeriesMarkerStates get states;
  external void set states (PlotOptionsSeriesMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsSeriesMarkerStates extends OptionsObject {
  external factory PlotOptionsSeriesMarkerStates ();
  /**
   * null
   */
  external PlotOptionsSeriesMarkerStatesHover get hover;
  external void set hover (PlotOptionsSeriesMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external PlotOptionsSeriesMarkerStatesSelect get select;
  external void set select (PlotOptionsSeriesMarkerStatesSelect a_select);
}
@JS()
@anonymous
class PlotOptionsSeriesMarkerStatesHover extends OptionsObject {
  external factory PlotOptionsSeriesMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class PlotOptionsSeriesMarkerStatesSelect extends OptionsObject {
  external factory PlotOptionsSeriesMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class PlotOptionsSeriesPoint extends OptionsObject {
  external factory PlotOptionsSeriesPoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsSeriesPointEvents get events;
  external void set events (PlotOptionsSeriesPointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsSeriesPointEvents extends OptionsObject {
  external factory PlotOptionsSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsSeriesStates extends OptionsObject {
  external factory PlotOptionsSeriesStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsSeriesStatesHover get hover;
  external void set hover (PlotOptionsSeriesStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsSeriesStatesHover extends OptionsObject {
  external factory PlotOptionsSeriesStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsSeriesStatesHoverMarker get marker;
  external void set marker (PlotOptionsSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsSeriesStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsSeriesStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsSeriesTooltip extends OptionsObject {
  external factory PlotOptionsSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsSeriesZones extends OptionsObject {
  external factory PlotOptionsSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsSolidgauge extends OptionsObject {
  external factory PlotOptionsSolidgauge ();
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * Data labels for the gauge. For gauges, the data labels are enabled by default and shown in a bordered box below the point.
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsSolidgaugeEvents get events;
  external void set events (PlotOptionsSolidgaugeEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * Whether the strokes of the solid gauge should be <code>round</code> or <code>square</code>.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * Allow the dial to overshoot the end of the perimeter axis by this many degrees. Say if the gauge axis goes from 0 to 60, a value of 100, or 1000, will show 5 degrees beyond the end of the axis.
   */
  external num get overshoot;
  external void set overshoot (num a_overshoot);
  /**
   * Properties for each single point
   */
  external PlotOptionsSolidgaugePoint get point;
  external void set point (PlotOptionsSolidgaugePoint a_point);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. Defaults to false for gauge series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When this option is <code>true</code>, the dial will wrap around the axes. For instance, in a full-range gauge going from 0 to 360, a value of 400 will point to 40. When <code>wrap</code> is <code>false</code>, the dial stops at 360.
   */
  external bool get wrap;
  external void set wrap (bool a_wrap);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsSolidgaugeDataLabels extends OptionsObject {
  external factory PlotOptionsSolidgaugeDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the gauge's data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the gauge data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of the data label.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the center of the gauge.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. A value of 2 display them behind the dial.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsSolidgaugeEvents extends OptionsObject {
  external factory PlotOptionsSolidgaugeEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsSolidgaugePoint extends OptionsObject {
  external factory PlotOptionsSolidgaugePoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsSolidgaugePointEvents get events;
  external void set events (PlotOptionsSolidgaugePointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsSolidgaugePointEvents extends OptionsObject {
  external factory PlotOptionsSolidgaugePointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsSolidgaugeStates extends OptionsObject {
  external factory PlotOptionsSolidgaugeStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsSolidgaugeStatesHover get hover;
  external void set hover (PlotOptionsSolidgaugeStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsSolidgaugeStatesHover extends OptionsObject {
  external factory PlotOptionsSolidgaugeStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsSolidgaugeStatesHoverMarker get marker;
  external void set marker (PlotOptionsSolidgaugeStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsSolidgaugeStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsSolidgaugeStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsSolidgaugeStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsSolidgaugeStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsSolidgaugeTooltip extends OptionsObject {
  external factory PlotOptionsSolidgaugeTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsSolidgaugeZones extends OptionsObject {
  external factory PlotOptionsSolidgaugeZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsSpline extends OptionsObject {
  external factory PlotOptionsSpline ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Polar charts only. Whether to connect the ends of a line series plot across the extremes.
   */
  external bool get connectEnds;
  external void set connectEnds (bool a_connectEnds);
  /**
   * Whether to connect a graph line across null points.
   */
  external bool get connectNulls;
  external void set connectNulls (bool a_connectNulls);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * null
   */
  external PlotOptionsSplineDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsSplineDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsSplineEvents get events;
  external void set events (PlotOptionsSplineEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The line cap used for line ends and line joins on the graph.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external PlotOptionsSplineMarker get marker;
  external void set marker (PlotOptionsSplineMarker a_marker);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external PlotOptionsSplinePoint get point;
  external void set point (PlotOptionsSplinePoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * Whether to stack the values of each series on top of each other. Possible values are null to disable, "normal" to stack by value or "percent".
   */
  external String get stacking;
  external void set stacking (String a_stacking);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The threshold, also called zero level or base level. For line type series this is only used in conjunction with <a href="#plotOptions.series.negativeColor">negativeColor</a>.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsSplineDataLabels extends OptionsObject {
  external factory PlotOptionsSplineDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsSplineEvents extends OptionsObject {
  external factory PlotOptionsSplineEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsSplineMarker extends OptionsObject {
  external factory PlotOptionsSplineMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external PlotOptionsSplineMarkerStates get states;
  external void set states (PlotOptionsSplineMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsSplineMarkerStates extends OptionsObject {
  external factory PlotOptionsSplineMarkerStates ();
  /**
   * null
   */
  external PlotOptionsSplineMarkerStatesHover get hover;
  external void set hover (PlotOptionsSplineMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external PlotOptionsSplineMarkerStatesSelect get select;
  external void set select (PlotOptionsSplineMarkerStatesSelect a_select);
}
@JS()
@anonymous
class PlotOptionsSplineMarkerStatesHover extends OptionsObject {
  external factory PlotOptionsSplineMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class PlotOptionsSplineMarkerStatesSelect extends OptionsObject {
  external factory PlotOptionsSplineMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class PlotOptionsSplinePoint extends OptionsObject {
  external factory PlotOptionsSplinePoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsSplinePointEvents get events;
  external void set events (PlotOptionsSplinePointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsSplinePointEvents extends OptionsObject {
  external factory PlotOptionsSplinePointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsSplineStates extends OptionsObject {
  external factory PlotOptionsSplineStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsSplineStatesHover get hover;
  external void set hover (PlotOptionsSplineStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsSplineStatesHover extends OptionsObject {
  external factory PlotOptionsSplineStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PlotOptionsSplineStatesHoverMarker get marker;
  external void set marker (PlotOptionsSplineStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PlotOptionsSplineStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsSplineStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsSplineStatesHoverMarker extends OptionsObject {
  external factory PlotOptionsSplineStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PlotOptionsSplineTooltip extends OptionsObject {
  external factory PlotOptionsSplineTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsSplineZones extends OptionsObject {
  external factory PlotOptionsSplineZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsTreemap extends OptionsObject {
  external factory PlotOptionsTreemap ();
  /**
   * When enabled the user can click on a point which is a parent and zoom in on its children.
   */
  external bool get allowDrillToNode;
  external void set allowDrillToNode (bool a_allowDrillToNode);
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * Enabling this option will make the treemap alternate the drawing direction between vertical and horizontal.

      The next levels starting direction will always be the opposite of the previous.
   */
  external bool get alternateStartingDirection;
  external void set alternateStartingDirection (bool a_alternateStartingDirection);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border surrounding each tree map item.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The width of the border surrounding each column or bar.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The main color of the series. In heat maps this color is rarely used, as we mostly use the color to denote the value of each point. Unless options are set in the <a href="#colorAxis">colorAxis</a>, the default value is pulled from the <a href="#colors">options.colors</a> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * When the series contains less points than the crop threshold, all points are drawn, event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   *
   */
  external dynamic get dataLabels;
  external void set dataLabels (dynamic a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsTreemapEvents get events;
  external void set events (PlotOptionsTreemapEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * This option decides if the user can interact with the parent nodes or just the leaf nodes. When this option is undefined, it will be true by default. However when allowDrillToNode is true, then it will be false by default.
   */
  external bool get interactByLeaf;
  external void set interactByLeaf (bool a_interactByLeaf);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * This option decides which algorithm is used for setting position and dimensions of the points. Can be one of <code>sliceAndDice</code>, <code>stripes</code>, <code>squarified</code> or <code>strip</code>.
   */
  external String get layoutAlgorithm;
  external void set layoutAlgorithm (String a_layoutAlgorithm);
  /**
   * Defines which direction the layout algorithm will start drawing. Possible values are "vertical" and "horizontal".
   */
  external String get layoutStartingDirection;
  external void set layoutStartingDirection (String a_layoutStartingDirection);
  /**
   * Used together with the levels and allowDrillToNode options. When set to false the first level visible when drilling is considered to be level one. Otherwise the level will be the same as the tree structure.
   */
  external bool get levelIsConstant;
  external void set levelIsConstant (bool a_levelIsConstant);
  /**
   * Set options on specific levels. Takes precedence over series options, but not point options.
   */
  external List<JsObject> get levels;
  external void set levels (List<JsObject> a_levels);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * Properties for each single point
   */
  external PlotOptionsTreemapPoint get point;
  external void set point (PlotOptionsTreemapPoint a_point);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this series type or specific series item in the legend.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * The sort index of the point inside the treemap level.
   */
  external num get sortIndex;
  external void set sortIndex (num a_sortIndex);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   *
   */
  external dynamic get tooltip;
  external void set tooltip (dynamic a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsTreemapDataLabels extends OptionsObject {
  external factory PlotOptionsTreemapDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * Whether to align the data label inside the box or to the actual value point.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of top, middle or bottom. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsTreemapEvents extends OptionsObject {
  external factory PlotOptionsTreemapEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsTreemapLevels extends OptionsObject {
  external factory PlotOptionsTreemapLevels ();
  /**
   * Can set borderColor on all points which lies on the same level.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * Set the dash style of the border of all the point which lies on the level.

      See <a href"#plotOptions.scatter.dashStyle">plotOptions.scatter.dashStyle</a> for possible options.
   */
  external String get borderDashStyle;
  external void set borderDashStyle (String a_borderDashStyle);
  /**
   * Can set the borderWidth on all points which lies on the same level.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * Can set a color on all points which lies on the same level.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Can set the options of dataLabels on each point which lies on the level.

      <a href="#plotOptions.treemap.dataLabels">plotOptions.treemap.dataLabels</a> for possible values.
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Can set the layoutAlgorithm option on a specific level.
   */
  external String get layoutAlgorithm;
  external void set layoutAlgorithm (String a_layoutAlgorithm);
  /**
   * Can set the layoutStartingDirection option on a specific level.
   */
  external String get layoutStartingDirection;
  external void set layoutStartingDirection (String a_layoutStartingDirection);
  /**
   * Decides which level takes effect from the options set in the levels object.
   */
  external num get level;
  external void set level (num a_level);
}
@JS()
@anonymous
class PlotOptionsTreemapPoint extends OptionsObject {
  external factory PlotOptionsTreemapPoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsTreemapPointEvents get events;
  external void set events (PlotOptionsTreemapPointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsTreemapPointEvents extends OptionsObject {
  external factory PlotOptionsTreemapPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsTreemapStates extends OptionsObject {
  external factory PlotOptionsTreemapStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsTreemapStatesHover get hover;
  external void set hover (PlotOptionsTreemapStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsTreemapStatesHover extends OptionsObject {
  external factory PlotOptionsTreemapStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class PlotOptionsTreemapStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsTreemapStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsTreemapTooltip extends OptionsObject {
  external factory PlotOptionsTreemapTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables	are point.key, series.name, series.color and other members from the point and series objects. The point.key variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the point.key date format can be set using tooltip.xDateFormat.
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore, point.y can be extended by the tooltip.yPrefix and tooltip.ySuffix variables. This can also be overridden for each series, which makes it a good hook for displaying units.
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsTreemapZones extends OptionsObject {
  external factory PlotOptionsTreemapZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PlotOptionsWaterfall extends OptionsObject {
  external factory PlotOptionsWaterfall ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border of each waterfall column.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The corner radius of the border surrounding each column or bar.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The width of the border surrounding each column or bar.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the line connecting the columns of the waterfall series. Possible values:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * null
   */
  external PlotOptionsWaterfallDataLabels get dataLabels;
  external void set dataLabels (PlotOptionsWaterfallDataLabels a_dataLabels);
  /**
   * Depth of the columns in a 3D column chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * 3D columns only. The color of the edges. Similar to <code>borderColor</code>, except it defaults to the same color as the column.
   */
  external dynamic get edgeColor;
  external void set edgeColor (dynamic a_edgeColor);
  /**
   * 3D columns only. The width of the colored edges.
   */
  external num get edgeWidth;
  external void set edgeWidth (num a_edgeWidth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PlotOptionsWaterfallEvents get events;
  external void set events (PlotOptionsWaterfallEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * Padding between each value groups, in x axis units.
   */
  external num get groupPadding;
  external void set groupPadding (num a_groupPadding);
  /**
   * The spacing between columns on the Z Axis in a 3D chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get groupZPadding;
  external void set groupZPadding (num a_groupZPadding);
  /**
   * Whether to group non-stacked columns or to let them render independent of each other. Non-grouped columns will be laid out individually and overlap each other.
   */
  external bool get grouping;
  external void set grouping (bool a_grouping);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The color of the line that connects columns in a waterfall series.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The minimal height for a column or width for a bar. By default, 0 values are not shown. To visualize a 0 (or close to zero) point, set the minimal point length to a  pixel value like 3. In stacked column charts, minPointLength might not be respected for tightly packed values.
   */
  external num get minPointLength;
  external void set minPointLength (num a_minPointLength);
  /**
   * Properties for each single point
   */
  external PlotOptionsWaterfallPoint get point;
  external void set point (PlotOptionsWaterfallPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * Padding between each column or bar, in x axis units.
   */
  external num get pointPadding;
  external void set pointPadding (num a_pointPadding);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * The X axis range that each point is valid for. This determines the width of the column. On a categorized axis, the range will be 1 by default (one category unit). On linear and datetime axes, the range will be computed as the distance between the two closest data points.
   */
  external num get pointRange;
  external void set pointRange (num a_pointRange);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * A pixel value specifying a fixed width for each column or bar. When <code>null</code>, the width is calculated from the <code>pointPadding</code> and <code>groupPadding</code>.
   */
  external num get pointWidth;
  external void set pointWidth (num a_pointWidth);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The Y axis value to serve as the base for the columns, for distinguishing between values above and below a threshold. If <code>null</code>, the columns extend from the padding Y axis minimum.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * The color used specifically for positive point columns. When not specified, the general series color is used.
   */
  external dynamic get upColor;
  external void set upColor (dynamic a_upColor);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PlotOptionsWaterfallDataLabels extends OptionsObject {
  external factory PlotOptionsWaterfallDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PlotOptionsWaterfallEvents extends OptionsObject {
  external factory PlotOptionsWaterfallEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PlotOptionsWaterfallPoint extends OptionsObject {
  external factory PlotOptionsWaterfallPoint ();
  /**
   * Events for each single point
   */
  external PlotOptionsWaterfallPointEvents get events;
  external void set events (PlotOptionsWaterfallPointEvents a_events);
}
@JS()
@anonymous
class PlotOptionsWaterfallPointEvents extends OptionsObject {
  external factory PlotOptionsWaterfallPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PlotOptionsWaterfallStates extends OptionsObject {
  external factory PlotOptionsWaterfallStates ();
  /**
   * Options for the hovered series
   */
  external PlotOptionsWaterfallStatesHover get hover;
  external void set hover (PlotOptionsWaterfallStatesHover a_hover);
}
@JS()
@anonymous
class PlotOptionsWaterfallStatesHover extends OptionsObject {
  external factory PlotOptionsWaterfallStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class PlotOptionsWaterfallStatesHoverHalo extends OptionsObject {
  external factory PlotOptionsWaterfallStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PlotOptionsWaterfallTooltip extends OptionsObject {
  external factory PlotOptionsWaterfallTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PlotOptionsWaterfallZones extends OptionsObject {
  external factory PlotOptionsWaterfallZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class Series extends PlotOptions {
  external factory Series ();
  /**
   * An array of data points for the series. The points can be given in three ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as y values, and x values will be automatically calculated,

      either starting at 0 and incrementing by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the plotOptions. If the axis is

      has categories, these will be used. This option is not available for range series. Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of arrays with two values. In this case, the first value is the

      x value and the second is the y value. If the first value is a string, it is

      applied as the name of the point, and the x value is incremented following

      the above rules.</p>

      <p>For range series, the arrays will be interpreted as <code>[x, low, high]</code>. In this cases, the X value can be skipped altogether to make use of <code>pointStart</code> and <code>pointRange</code>.</p>



      Example:

      <pre>data: [[5, 2], [6, 3], [8, 2]]</pre></li>





      <li><p>An array of objects with named values. In this case the objects are

      point configuration objects as seen below.</p>



      <p>Range series values are given by <code>low</code> and <code>high</code>.</p>



      Example:

      <pre>data: [{

      name: 'Point 1',

      color: '#00FF00',

      y: 0

      }, {

      name: 'Point 2',

      color: '#FF00FF',

      y: 5

      }]</pre></li>

      </ol>



      <p>Note that line series and derived types like spline and area, require data to be sorted by X because it interpolates mouse coordinates for the tooltip. Column and scatter series, where each point has its own mouse event, does not require sorting.</p>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * This method is deprecated as of version 2.0. Instead, use options preprocessing as described in <a href="http://docs.highcharts.com/#preprocessing">the docs</a>.
   */
  @deprecated
  external Function get dataParser;
  @deprecated
  external void set dataParser (Function a_dataParser);
  /**
   * This method is deprecated as of version 2.0. Instead, load the data using jQuery.ajax and use options preprocessing as described in <a href="http://docs.highcharts.com/#preprocessing">the docs</a>.
   */
  @deprecated
  external String get dataURL;
  @deprecated
  external void set dataURL (String a_dataURL);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * This option allows grouping series in a stacked chart. The stack option can be a string  or a number or anything else, as long as the grouped series' stack options match each other.
   */
  external String get stack;
  external void set stack (String a_stack);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * options: Number|Array|Object<br>The point options. If options is a single number, a point with that y value is appended to the series.If it is an array, it will be interpreted as x and y values respectively. If it is an object, advanced options as outlined under <a class="internal" href="#series.data">series.data</a> are applied.||

      redraw: Boolean<br>Defaults to <code>true</code>. Whether to redraw the chart after the point is added. When adding more than one point, it is highly recommended that the <code>redraw</code> option be set to false, and instead <code>chart.redraw()</code> is explicitly called after the adding of points is finished.||

      shift: Boolean<br>Defaults to <code>false</code>. When shift is true, one point is shifted off the start of the series as one is appended to the end. Use this option for live charts monitoring a value over time.||animation: Mixed<br>Defaults to true. When true, the graph will be animated with default animation options. The animation can also be a configuration object with properties <code>duration</code> and <code>easing</code>.
   */
  external void addPoint ( dynamic options, bool redraw, bool shift, dynamic animation);
  /**
   * null
   */
  external void hide ();
  /**
   * redraw: Boolean<br>Defaults to <code>true</code>. Whether to redraw the chart after the series is removed.If doing more operations on the chart, it is a good idea to set redraw to false and call <code>chart.redraw()</code> after.
   */
  external void remove ( bool redraw);
  /**
   * index: Number<br>The index of the point in the data array.||

      redraw: Boolean<br>Defaults to <code>true</code>. Whether to redraw the chart after the point is added. When adding more than one point, it is highly recommended that the <code>redraw</code> option be set to false, and instead <code>chart.redraw()</code> is explicitly called after the adding of points is finished.||

      animation: Mixed<br>Defaults to true. When true, the graph will be animated with default animation options. The animation can also be a configuration object with properties <code>duration</code> and <code>easing</code>.
   */
  external void removePoint ( dynamic index, bool redraw, dynamic animation);
  /**
   * selected: Boolean|null<br>When <code>true</code>, the series is selected. When <code>false</code> it is unselected. When <code>null</code> or <code>undefined</code>, the series' selection state is toggled.
   */
  external void select ( bool selected_or_null);
  /**
   * data: Array&lt;Number&gt;|Array&lt;Array&gt;|Array&lt;Object&gt;<br>Takes an array of data in the same format as described under <code>series&lt;type&gt;data</code> for the given series type.||



      redraw: Boolean<br>Defaults to <code>true</code>. Whether to redraw the chart after the series is altered.If doing more operations on the chart, it is a good idea to set redraw to false and call <code>chart.redraw()</code> after.||





      animation: Mixed<br>When the updated data is the same length as the existing data, points will be updated by default, and animation visualizes how the points are changed. Set false to disable animation, or a configuration object to set duration or easing.||





      updatePoints: Boolean<br>When the updated data is the same length as the existing data, points will be updated instead of replace. This option prevents this, and makes setData behave like it did prior to Highcharts 3.0.10.
   */
  external void setData ( dynamic data, bool redraw, dynamic animation, bool updatePoints);
  /**
   * visible: Boolean<br>Whether to show or hide the series. If undefined, the visibility is toggled.||redraw: Boolean<br>Defaults to <code>true</code>. Whether to redraw the chart after the series is altered.If doing more operations on the chart, it is a good idea to set redraw to false and call <code>chart.redraw()</code> after.
   */
  external void setVisible ( bool visible, bool redraw);
  /**
   * null
   */
  external void show ();
  /**
   * options: Boolean<br>

      New options that will be merged into the series' existing options.



      ||



      redraw: Boolean<br>

      Defaults to <code>true</code>. Whether to redraw the chart after the series is altered. If doing more operations on the chart, it is a good idea to set redraw to false and call <code>chart.redraw()</code> after.
   */
  external void update ( dynamic options, bool redraw);
}
@JS()
@anonymous
class SeriesData extends OptionsObject {
  external factory SeriesData ();
}
@JS()
@anonymous
class AreaSeries extends Series {
  external factory AreaSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Polar charts only. Whether to connect the ends of a line series plot across the extremes.
   */
  external bool get connectEnds;
  external void set connectEnds (bool a_connectEnds);
  /**
   * Whether to connect a graph line across null points.
   */
  external bool get connectNulls;
  external void set connectNulls (bool a_connectNulls);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * An array of data points for the series. For the <code>area</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options. The <code>x</code> values will be automatically calculated,

      either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options. If the axis

      has categories, these will be used.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of arrays with 2 values. In this case, the values correspond to <code>x,y</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. <pre>data: [
      [0, 9],
      [1, 7],
      [2, 6]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<area>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      y: 9,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      y: 6,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external AreaSeriesDataLabels get dataLabels;
  external void set dataLabels (AreaSeriesDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external AreaSeriesEvents get events;
  external void set events (AreaSeriesEvents a_events);
  /**
   * Fill color or gradient for the area. When <code>null</code>, the series' <code>color</code>  is  used with the series' <code>fillOpacity</code>.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Fill opacity for the area. Note that when you set an explicit <code>fillColor</code>, the <code>fillOpacity</code> is not applied. Instead, you should define the opacity in the <code>fillColor</code> with an rgba color definition.
   */
  external num get fillOpacity;
  external void set fillOpacity (num a_fillOpacity);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * A separate color for the graph line. By default the line takes the <code>color</code> of the series, but the lineColor setting allows setting a separate color for the line without altering the <code>fillColor</code>.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The line cap used for line ends and line joins on the graph.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external AreaSeriesMarker get marker;
  external void set marker (AreaSeriesMarker a_marker);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * A separate color for the negative part of the area.
   */
  external dynamic get negativeFillColor;
  external void set negativeFillColor (dynamic a_negativeFillColor);
  /**
   * Properties for each single point
   */
  external AreaSeriesPoint get point;
  external void set point (AreaSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * This option allows grouping series in a stacked chart. The stack option can be a string  or a number or anything else, as long as the grouped series' stack options match each other.
   */
  external String get stack;
  external void set stack (String a_stack);
  /**
   * Whether to stack the values of each series on top of each other. Possible values are null to disable, "normal" to stack by value or "percent".
   */
  external String get stacking;
  external void set stacking (String a_stacking);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Whether to apply steps to the line. Possible values are <code>left</code>, <code>center</code> and <code>right</code>. Prior to 2.3.5, only <code>left</code> was supported.
   */
  external String get step;
  external void set step (String a_step);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The Y axis value to serve as the base for the area, for distinguishing between values above and below a threshold. If <code>null</code>, the area behaves
      like a line series with fill between the graph and the Y axis minimum.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Whether the whole area or just the line should respond to mouseover tooltips and other mouse or touch events.
   */
  external bool get trackByArea;
  external void set trackByArea (bool a_trackByArea);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class AreaSeriesData extends OptionsObject {
  external factory AreaSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * null
   */
  external AreaSeriesDataMarker get marker;
  external void set marker (AreaSeriesDataMarker a_marker);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class AreaSeriesDataEvents extends OptionsObject {
  external factory AreaSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class AreaSeriesDataMarker extends OptionsObject {
  external factory AreaSeriesDataMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external AreaSeriesDataMarkerStates get states;
  external void set states (AreaSeriesDataMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class AreaSeriesDataMarkerStates extends OptionsObject {
  external factory AreaSeriesDataMarkerStates ();
  /**
   * Options for the hovered series
   */
  external AreaSeriesDataMarkerStatesHover get hover;
  external void set hover (AreaSeriesDataMarkerStatesHover a_hover);
}
@JS()
@anonymous
class AreaSeriesDataMarkerStatesHover extends OptionsObject {
  external factory AreaSeriesDataMarkerStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external AreaSeriesDataMarkerStatesHoverMarker get marker;
  external void set marker (AreaSeriesDataMarkerStatesHoverMarker a_marker);
}
@JS()
@anonymous
class AreaSeriesDataMarkerStatesHoverHalo extends OptionsObject {
  external factory AreaSeriesDataMarkerStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class AreaSeriesDataMarkerStatesHoverMarker extends OptionsObject {
  external factory AreaSeriesDataMarkerStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class AreaSeriesDataLabels extends OptionsObject {
  external factory AreaSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class AreaSeriesEvents extends OptionsObject {
  external factory AreaSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class AreaSeriesMarker extends OptionsObject {
  external factory AreaSeriesMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external AreaSeriesMarkerStates get states;
  external void set states (AreaSeriesMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class AreaSeriesMarkerStates extends OptionsObject {
  external factory AreaSeriesMarkerStates ();
  /**
   * null
   */
  external AreaSeriesMarkerStatesHover get hover;
  external void set hover (AreaSeriesMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external AreaSeriesMarkerStatesSelect get select;
  external void set select (AreaSeriesMarkerStatesSelect a_select);
}
@JS()
@anonymous
class AreaSeriesMarkerStatesHover extends OptionsObject {
  external factory AreaSeriesMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class AreaSeriesMarkerStatesSelect extends OptionsObject {
  external factory AreaSeriesMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class AreaSeriesPoint extends OptionsObject {
  external factory AreaSeriesPoint ();
  /**
   * Events for each single point
   */
  external AreaSeriesPointEvents get events;
  external void set events (AreaSeriesPointEvents a_events);
}
@JS()
@anonymous
class AreaSeriesPointEvents extends OptionsObject {
  external factory AreaSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class AreaSeriesStates extends OptionsObject {
  external factory AreaSeriesStates ();
  /**
   * Options for the hovered series
   */
  external AreaSeriesStatesHover get hover;
  external void set hover (AreaSeriesStatesHover a_hover);
}
@JS()
@anonymous
class AreaSeriesStatesHover extends OptionsObject {
  external factory AreaSeriesStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external AreaSeriesStatesHoverMarker get marker;
  external void set marker (AreaSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class AreaSeriesStatesHoverHalo extends OptionsObject {
  external factory AreaSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class AreaSeriesStatesHoverMarker extends OptionsObject {
  external factory AreaSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class AreaSeriesTooltip extends OptionsObject {
  external factory AreaSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class AreaSeriesZones extends OptionsObject {
  external factory AreaSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class ArearangeSeries extends Series {
  external factory ArearangeSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to connect a graph line across null points.
   */
  external bool get connectNulls;
  external void set connectNulls (bool a_connectNulls);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * An array of data points for the series. For the <code>arearange</code> series type, points can be given in the following ways:

      <ol>

      <li><p>An array of arrays with 3 or 2 values. In this case, the values correspond to <code>x,low,high</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. The <code>x</code> value can also be omitted, in which case the inner arrays should be of length 2. Then the <code>x</code> value is automatically calculated, either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options.</p>

      <pre>data: [
      [0, 8, 3],
      [1, 1, 1],
      [2, 6, 8]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<arearange>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      low: 9,
      high: 0,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      low: 3,
      high: 4,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * Extended data labels for range series types. Range series  data labels have no <code>x</code> and <code>y</code> options. Instead, they have <code>xLow</code>, <code>xHigh</code>, <code>yLow</code> and <code>yHigh</code> options to allow the higher and lower data label sets individually.
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external ArearangeSeriesEvents get events;
  external void set events (ArearangeSeriesEvents a_events);
  /**
   * Fill color or gradient for the area. When <code>null</code>, the series' <code>color</code>  is  used with the series' <code>fillOpacity</code>.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Fill opacity for the area. Note that when you set an explicit <code>fillColor</code>, the <code>fillOpacity</code> is not applied. Instead, you should define the opacity in the <code>fillColor</code> with an rgba color definition.
   */
  external num get fillOpacity;
  external void set fillOpacity (num a_fillOpacity);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * A separate color for the graph line. By default the line takes the <code>color</code> of the series, but the lineColor setting allows setting a separate color for the line without altering the <code>fillColor</code>.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * Pixel width of the arearange graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The line cap used for line ends and line joins on the graph.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * A separate color for the negative part of the area.
   */
  external dynamic get negativeFillColor;
  external void set negativeFillColor (dynamic a_negativeFillColor);
  /**
   * Properties for each single point
   */
  external ArearangeSeriesPoint get point;
  external void set point (ArearangeSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Whether to apply steps to the line. Possible values are <code>left</code>, <code>center</code> and <code>right</code>. Prior to 2.3.5, only <code>left</code> was supported.
   */
  external String get step;
  external void set step (String a_step);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Whether the whole area or just the line should respond to mouseover tooltips and other mouse or touch events.
   */
  external bool get trackByArea;
  external void set trackByArea (bool a_trackByArea);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class ArearangeSeriesData extends OptionsObject {
  external factory ArearangeSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * The high or maximum value for each data point.
   */
  external num get high;
  external void set high (num a_high);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The low or minimum value for each data point.
   */
  external num get low;
  external void set low (num a_low);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
}
@JS()
@anonymous
class ArearangeSeriesDataEvents extends OptionsObject {
  external factory ArearangeSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class ArearangeSeriesDataLabels extends OptionsObject {
  external factory ArearangeSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * X offset of the higher data labels relative to the point value.
   */
  external num get xHigh;
  external void set xHigh (num a_xHigh);
  /**
   * X offset of the lower data labels relative to the point value.
   */
  external num get xLow;
  external void set xLow (num a_xLow);
  /**
   * Y offset of the higher data labels relative to the point value.
   */
  external num get yHigh;
  external void set yHigh (num a_yHigh);
  /**
   * Y offset of the lower data labels relative to the point value.
   */
  external num get yLow;
  external void set yLow (num a_yLow);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class ArearangeSeriesEvents extends OptionsObject {
  external factory ArearangeSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class ArearangeSeriesPoint extends OptionsObject {
  external factory ArearangeSeriesPoint ();
  /**
   * Events for each single point
   */
  external ArearangeSeriesPointEvents get events;
  external void set events (ArearangeSeriesPointEvents a_events);
}
@JS()
@anonymous
class ArearangeSeriesPointEvents extends OptionsObject {
  external factory ArearangeSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class ArearangeSeriesStates extends OptionsObject {
  external factory ArearangeSeriesStates ();
  /**
   * Options for the hovered series
   */
  external ArearangeSeriesStatesHover get hover;
  external void set hover (ArearangeSeriesStatesHover a_hover);
}
@JS()
@anonymous
class ArearangeSeriesStatesHover extends OptionsObject {
  external factory ArearangeSeriesStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external ArearangeSeriesStatesHoverMarker get marker;
  external void set marker (ArearangeSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class ArearangeSeriesStatesHoverHalo extends OptionsObject {
  external factory ArearangeSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class ArearangeSeriesStatesHoverMarker extends OptionsObject {
  external factory ArearangeSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class ArearangeSeriesTooltip extends OptionsObject {
  external factory ArearangeSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class ArearangeSeriesZones extends OptionsObject {
  external factory ArearangeSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class AreasplineSeries extends Series {
  external factory AreasplineSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Polar charts only. Whether to connect the ends of a line series plot across the extremes.
   */
  external bool get connectEnds;
  external void set connectEnds (bool a_connectEnds);
  /**
   * Whether to connect a graph line across null points.
   */
  external bool get connectNulls;
  external void set connectNulls (bool a_connectNulls);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * An array of data points for the series. For the <code>areaspline</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options. The <code>x</code> values will be automatically calculated,

      either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options. If the axis

      has categories, these will be used.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of arrays with 2 values. In this case, the values correspond to <code>x,y</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. <pre>data: [
      [0, 10],
      [1, 9],
      [2, 3]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<areaspline>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      y: 4,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      y: 4,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external AreasplineSeriesDataLabels get dataLabels;
  external void set dataLabels (AreasplineSeriesDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external AreasplineSeriesEvents get events;
  external void set events (AreasplineSeriesEvents a_events);
  /**
   * Fill color or gradient for the area. When <code>null</code>, the series' <code>color</code>  is  used with the series' <code>fillOpacity</code>.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Fill opacity for the area. Note that when you set an explicit <code>fillColor</code>, the <code>fillOpacity</code> is not applied. Instead, you should define the opacity in the <code>fillColor</code> with an rgba color definition.
   */
  external num get fillOpacity;
  external void set fillOpacity (num a_fillOpacity);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * A separate color for the graph line. By default the line takes the <code>color</code> of the series, but the lineColor setting allows setting a separate color for the line without altering the <code>fillColor</code>.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The line cap used for line ends and line joins on the graph.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external AreasplineSeriesMarker get marker;
  external void set marker (AreasplineSeriesMarker a_marker);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * A separate color for the negative part of the area.
   */
  external dynamic get negativeFillColor;
  external void set negativeFillColor (dynamic a_negativeFillColor);
  /**
   * Properties for each single point
   */
  external AreasplineSeriesPoint get point;
  external void set point (AreasplineSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * This option allows grouping series in a stacked chart. The stack option can be a string  or a number or anything else, as long as the grouped series' stack options match each other.
   */
  external String get stack;
  external void set stack (String a_stack);
  /**
   * Whether to stack the values of each series on top of each other. Possible values are null to disable, "normal" to stack by value or "percent".
   */
  external String get stacking;
  external void set stacking (String a_stacking);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The Y axis value to serve as the base for the area, for distinguishing between values above and below a threshold. If <code>null</code>, the area behaves
      like a line series with fill between the graph and the Y axis minimum.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Whether the whole area or just the line should respond to mouseover tooltips and other mouse or touch events.
   */
  external bool get trackByArea;
  external void set trackByArea (bool a_trackByArea);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class AreasplineSeriesData extends OptionsObject {
  external factory AreasplineSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * null
   */
  external AreasplineSeriesDataMarker get marker;
  external void set marker (AreasplineSeriesDataMarker a_marker);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class AreasplineSeriesDataEvents extends OptionsObject {
  external factory AreasplineSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class AreasplineSeriesDataMarker extends OptionsObject {
  external factory AreasplineSeriesDataMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external AreasplineSeriesDataMarkerStates get states;
  external void set states (AreasplineSeriesDataMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class AreasplineSeriesDataMarkerStates extends OptionsObject {
  external factory AreasplineSeriesDataMarkerStates ();
  /**
   * Options for the hovered series
   */
  external AreasplineSeriesDataMarkerStatesHover get hover;
  external void set hover (AreasplineSeriesDataMarkerStatesHover a_hover);
}
@JS()
@anonymous
class AreasplineSeriesDataMarkerStatesHover extends OptionsObject {
  external factory AreasplineSeriesDataMarkerStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external AreasplineSeriesDataMarkerStatesHoverMarker get marker;
  external void set marker (AreasplineSeriesDataMarkerStatesHoverMarker a_marker);
}
@JS()
@anonymous
class AreasplineSeriesDataMarkerStatesHoverHalo extends OptionsObject {
  external factory AreasplineSeriesDataMarkerStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class AreasplineSeriesDataMarkerStatesHoverMarker extends OptionsObject {
  external factory AreasplineSeriesDataMarkerStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class AreasplineSeriesDataLabels extends OptionsObject {
  external factory AreasplineSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class AreasplineSeriesEvents extends OptionsObject {
  external factory AreasplineSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class AreasplineSeriesMarker extends OptionsObject {
  external factory AreasplineSeriesMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external AreasplineSeriesMarkerStates get states;
  external void set states (AreasplineSeriesMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class AreasplineSeriesMarkerStates extends OptionsObject {
  external factory AreasplineSeriesMarkerStates ();
  /**
   * null
   */
  external AreasplineSeriesMarkerStatesHover get hover;
  external void set hover (AreasplineSeriesMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external AreasplineSeriesMarkerStatesSelect get select;
  external void set select (AreasplineSeriesMarkerStatesSelect a_select);
}
@JS()
@anonymous
class AreasplineSeriesMarkerStatesHover extends OptionsObject {
  external factory AreasplineSeriesMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class AreasplineSeriesMarkerStatesSelect extends OptionsObject {
  external factory AreasplineSeriesMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class AreasplineSeriesPoint extends OptionsObject {
  external factory AreasplineSeriesPoint ();
  /**
   * Events for each single point
   */
  external AreasplineSeriesPointEvents get events;
  external void set events (AreasplineSeriesPointEvents a_events);
}
@JS()
@anonymous
class AreasplineSeriesPointEvents extends OptionsObject {
  external factory AreasplineSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class AreasplineSeriesStates extends OptionsObject {
  external factory AreasplineSeriesStates ();
  /**
   * Options for the hovered series
   */
  external AreasplineSeriesStatesHover get hover;
  external void set hover (AreasplineSeriesStatesHover a_hover);
}
@JS()
@anonymous
class AreasplineSeriesStatesHover extends OptionsObject {
  external factory AreasplineSeriesStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external AreasplineSeriesStatesHoverMarker get marker;
  external void set marker (AreasplineSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class AreasplineSeriesStatesHoverHalo extends OptionsObject {
  external factory AreasplineSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class AreasplineSeriesStatesHoverMarker extends OptionsObject {
  external factory AreasplineSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class AreasplineSeriesTooltip extends OptionsObject {
  external factory AreasplineSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class AreasplineSeriesZones extends OptionsObject {
  external factory AreasplineSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class AreasplinerangeSeries extends Series {
  external factory AreasplinerangeSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to connect a graph line across null points.
   */
  external bool get connectNulls;
  external void set connectNulls (bool a_connectNulls);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * An array of data points for the series. For the <code>areasplinerange</code> series type, points can be given in the following ways:

      <ol>

      <li><p>An array of arrays with 3 or 2 values. In this case, the values correspond to <code>x,low,high</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. The <code>x</code> value can also be omitted, in which case the inner arrays should be of length 2. Then the <code>x</code> value is automatically calculated, either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options.</p>

      <pre>data: [
      [0, 0, 5],
      [1, 9, 1],
      [2, 5, 2]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<areasplinerange>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      low: 5,
      high: 0,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      low: 4,
      high: 1,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * Extended data labels for range series types. Range series  data labels have no <code>x</code> and <code>y</code> options. Instead, they have <code>xLow</code>, <code>xHigh</code>, <code>yLow</code> and <code>yHigh</code> options to allow the higher and lower data label sets individually.
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external AreasplinerangeSeriesEvents get events;
  external void set events (AreasplinerangeSeriesEvents a_events);
  /**
   * Fill color or gradient for the area. When <code>null</code>, the series' <code>color</code>  is  used with the series' <code>fillOpacity</code>.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Fill opacity for the area. Note that when you set an explicit <code>fillColor</code>, the <code>fillOpacity</code> is not applied. Instead, you should define the opacity in the <code>fillColor</code> with an rgba color definition.
   */
  external num get fillOpacity;
  external void set fillOpacity (num a_fillOpacity);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * A separate color for the graph line. By default the line takes the <code>color</code> of the series, but the lineColor setting allows setting a separate color for the line without altering the <code>fillColor</code>.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * Pixel width of the arearange graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The line cap used for line ends and line joins on the graph.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * A separate color for the negative part of the area.
   */
  external dynamic get negativeFillColor;
  external void set negativeFillColor (dynamic a_negativeFillColor);
  /**
   * Properties for each single point
   */
  external AreasplinerangeSeriesPoint get point;
  external void set point (AreasplinerangeSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * Whether the whole area or just the line should respond to mouseover tooltips and other mouse or touch events.
   */
  external bool get trackByArea;
  external void set trackByArea (bool a_trackByArea);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class AreasplinerangeSeriesData extends OptionsObject {
  external factory AreasplinerangeSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * The high or maximum value for each data point.
   */
  external num get high;
  external void set high (num a_high);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The low or minimum value for each data point.
   */
  external num get low;
  external void set low (num a_low);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
}
@JS()
@anonymous
class AreasplinerangeSeriesDataEvents extends OptionsObject {
  external factory AreasplinerangeSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class AreasplinerangeSeriesDataLabels extends OptionsObject {
  external factory AreasplinerangeSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * X offset of the higher data labels relative to the point value.
   */
  external num get xHigh;
  external void set xHigh (num a_xHigh);
  /**
   * X offset of the lower data labels relative to the point value.
   */
  external num get xLow;
  external void set xLow (num a_xLow);
  /**
   * Y offset of the higher data labels relative to the point value.
   */
  external num get yHigh;
  external void set yHigh (num a_yHigh);
  /**
   * Y offset of the lower data labels relative to the point value.
   */
  external num get yLow;
  external void set yLow (num a_yLow);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class AreasplinerangeSeriesEvents extends OptionsObject {
  external factory AreasplinerangeSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class AreasplinerangeSeriesPoint extends OptionsObject {
  external factory AreasplinerangeSeriesPoint ();
  /**
   * Events for each single point
   */
  external AreasplinerangeSeriesPointEvents get events;
  external void set events (AreasplinerangeSeriesPointEvents a_events);
}
@JS()
@anonymous
class AreasplinerangeSeriesPointEvents extends OptionsObject {
  external factory AreasplinerangeSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class AreasplinerangeSeriesStates extends OptionsObject {
  external factory AreasplinerangeSeriesStates ();
  /**
   * Options for the hovered series
   */
  external AreasplinerangeSeriesStatesHover get hover;
  external void set hover (AreasplinerangeSeriesStatesHover a_hover);
}
@JS()
@anonymous
class AreasplinerangeSeriesStatesHover extends OptionsObject {
  external factory AreasplinerangeSeriesStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external AreasplinerangeSeriesStatesHoverMarker get marker;
  external void set marker (AreasplinerangeSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class AreasplinerangeSeriesStatesHoverHalo extends OptionsObject {
  external factory AreasplinerangeSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class AreasplinerangeSeriesStatesHoverMarker extends OptionsObject {
  external factory AreasplinerangeSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class AreasplinerangeSeriesTooltip extends OptionsObject {
  external factory AreasplinerangeSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class AreasplinerangeSeriesZones extends OptionsObject {
  external factory AreasplinerangeSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class BarSeries extends Series {
  external factory BarSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border surrounding each column or bar.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The corner radius of the border surrounding each column or bar.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The width of the border surrounding each column or bar.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * An array of data points for the series. For the <code>bar</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options. The <code>x</code> values will be automatically calculated,

      either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options. If the axis

      has categories, these will be used.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of arrays with 2 values. In this case, the values correspond to <code>x,y</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. <pre>data: [
      [0, 5],
      [1, 10],
      [2, 3]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<bar>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      y: 1,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      y: 10,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external BarSeriesDataLabels get dataLabels;
  external void set dataLabels (BarSeriesDataLabels a_dataLabels);
  /**
   * Depth of the columns in a 3D column chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * 3D columns only. The color of the edges. Similar to <code>borderColor</code>, except it defaults to the same color as the column.
   */
  external dynamic get edgeColor;
  external void set edgeColor (dynamic a_edgeColor);
  /**
   * 3D columns only. The width of the colored edges.
   */
  external num get edgeWidth;
  external void set edgeWidth (num a_edgeWidth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external BarSeriesEvents get events;
  external void set events (BarSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * Padding between each value groups, in x axis units.
   */
  external num get groupPadding;
  external void set groupPadding (num a_groupPadding);
  /**
   * The spacing between columns on the Z Axis in a 3D chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get groupZPadding;
  external void set groupZPadding (num a_groupZPadding);
  /**
   * Whether to group non-stacked columns or to let them render independent of each other. Non-grouped columns will be laid out individually and overlap each other.
   */
  external bool get grouping;
  external void set grouping (bool a_grouping);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The minimal height for a column or width for a bar. By default, 0 values are not shown. To visualize a 0 (or close to zero) point, set the minimal point length to a  pixel value like 3. In stacked column charts, minPointLength might not be respected for tightly packed values.
   */
  external num get minPointLength;
  external void set minPointLength (num a_minPointLength);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external BarSeriesPoint get point;
  external void set point (BarSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * Padding between each column or bar, in x axis units.
   */
  external num get pointPadding;
  external void set pointPadding (num a_pointPadding);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * The X axis range that each point is valid for. This determines the width of the column. On a categorized axis, the range will be 1 by default (one category unit). On linear and datetime axes, the range will be computed as the distance between the two closest data points.
   */
  external num get pointRange;
  external void set pointRange (num a_pointRange);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * A pixel value specifying a fixed width for each column or bar. When <code>null</code>, the width is calculated from the <code>pointPadding</code> and <code>groupPadding</code>.
   */
  external num get pointWidth;
  external void set pointWidth (num a_pointWidth);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * This option allows grouping series in a stacked chart. The stack option can be a string  or a number or anything else, as long as the grouped series' stack options match each other.
   */
  external String get stack;
  external void set stack (String a_stack);
  /**
   * Whether to stack the values of each series on top of each other. Possible values are null to disable, "normal" to stack by value or "percent".
   */
  external String get stacking;
  external void set stacking (String a_stacking);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The Y axis value to serve as the base for the columns, for distinguishing between values above and below a threshold. If <code>null</code>, the columns extend from the padding Y axis minimum.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class BarSeriesData extends OptionsObject {
  external factory BarSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class BarSeriesDataEvents extends OptionsObject {
  external factory BarSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class BarSeriesDataLabels extends OptionsObject {
  external factory BarSeriesDataLabels ();
  /**
   * Alignment of the data label relative to the data point.
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position of the data label relative to the data point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class BarSeriesEvents extends OptionsObject {
  external factory BarSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class BarSeriesPoint extends OptionsObject {
  external factory BarSeriesPoint ();
  /**
   * Events for each single point
   */
  external BarSeriesPointEvents get events;
  external void set events (BarSeriesPointEvents a_events);
}
@JS()
@anonymous
class BarSeriesPointEvents extends OptionsObject {
  external factory BarSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class BarSeriesStates extends OptionsObject {
  external factory BarSeriesStates ();
  /**
   * Options for the hovered series
   */
  external BarSeriesStatesHover get hover;
  external void set hover (BarSeriesStatesHover a_hover);
}
@JS()
@anonymous
class BarSeriesStatesHover extends OptionsObject {
  external factory BarSeriesStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class BarSeriesStatesHoverHalo extends OptionsObject {
  external factory BarSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class BarSeriesTooltip extends OptionsObject {
  external factory BarSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class BarSeriesZones extends OptionsObject {
  external factory BarSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class BoxplotSeries extends Series {
  external factory BoxplotSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * An array of data points for the series. For the <code>boxplot</code> series type, points can be given in the following ways:

      <ol>

      <li><p>An array of arrays with 6 or 5 values. In this case, the values correspond to <code>x,low,q1,median,q3,high</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. The <code>x</code> value can also be omitted, in which case the inner arrays should be of length 5. Then the <code>x</code> value is automatically calculated, either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options.</p>

      <pre>data: [
      [0, 3, 0, 10, 3, 5],
      [1, 7, 8, 7, 2, 9],
      [2, 6, 9, 5, 1, 3]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<boxplot>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      low: 4,
      q1: 9,
      median: 9,
      q3: 1,
      high: 10,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      low: 5,
      q1: 7,
      median: 3,
      q3: 6,
      high: 2,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * Depth of the columns in a 3D column chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * 3D columns only. The color of the edges. Similar to <code>borderColor</code>, except it defaults to the same color as the column.
   */
  external dynamic get edgeColor;
  external void set edgeColor (dynamic a_edgeColor);
  /**
   * 3D columns only. The width of the colored edges.
   */
  external num get edgeWidth;
  external void set edgeWidth (num a_edgeWidth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external BoxplotSeriesEvents get events;
  external void set events (BoxplotSeriesEvents a_events);
  /**
   * The fill color of the box.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * Padding between each value groups, in x axis units.
   */
  external num get groupPadding;
  external void set groupPadding (num a_groupPadding);
  /**
   * The spacing between columns on the Z Axis in a 3D chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get groupZPadding;
  external void set groupZPadding (num a_groupZPadding);
  /**
   * Whether to group non-stacked columns or to let them render independent of each other. Non-grouped columns will be laid out individually and overlap each other.
   */
  external bool get grouping;
  external void set grouping (bool a_grouping);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The width of the line surrounding the box. If any of <a href="#plotOptions.boxplot.stemWidth">stemWidth</a>, <a href="#plotOptions.boxplot.medianWidth">medianWidth</a> or <a href="#plotOptions.boxplot.whiskerWidth">whiskerWidth</a> are <code>null</code>, the lineWidth also applies to these lines.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The color of the median line. If <code>null</code>, the general series color applies.
   */
  external dynamic get medianColor;
  external void set medianColor (dynamic a_medianColor);
  /**
   * The pixel width of the median line. If <code>null</code>, the <a href="#plotOptions.boxplot.lineWidth">lineWidth</a> is used.
   */
  external num get medianWidth;
  external void set medianWidth (num a_medianWidth);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external BoxplotSeriesPoint get point;
  external void set point (BoxplotSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * Padding between each column or bar, in x axis units.
   */
  external num get pointPadding;
  external void set pointPadding (num a_pointPadding);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * The X axis range that each point is valid for. This determines the width of the column. On a categorized axis, the range will be 1 by default (one category unit). On linear and datetime axes, the range will be computed as the distance between the two closest data points.
   */
  external num get pointRange;
  external void set pointRange (num a_pointRange);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * A pixel value specifying a fixed width for each column or bar. When <code>null</code>, the width is calculated from the <code>pointPadding</code> and <code>groupPadding</code>.
   */
  external num get pointWidth;
  external void set pointWidth (num a_pointWidth);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * The color of the stem, the vertical line extending from the box to the whiskers. If <code>null</code>, the series color is used.
   */
  external dynamic get stemColor;
  external void set stemColor (dynamic a_stemColor);
  /**
   * The dash style of the stem, the vertical line extending from the box to the whiskers.
   */
  external String get stemDashStyle;
  external void set stemDashStyle (String a_stemDashStyle);
  /**
   * The width of the stem, the vertical line extending from the box to the whiskers. If <code>null</code>, the width is inherited from the <a href="#plotOptions.boxplot.lineWidth">lineWidth</a> option.
   */
  external num get stemWidth;
  external void set stemWidth (num a_stemWidth);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * The color of the whiskers, the horizontal lines marking low and high values. When <code>null</code>, the general series color is used.
   */
  external dynamic get whiskerColor;
  external void set whiskerColor (dynamic a_whiskerColor);
  /**
   * The length of the whiskers, the horizontal lines marking low and high values. It can be a numerical pixel value, or a percentage value of the box width. Set <code>0</code> to disable whiskers.
   */
  external dynamic get whiskerLength;
  external void set whiskerLength (dynamic a_whiskerLength);
  /**
   * The line width of the whiskers, the horizontal lines marking low and high values. When <code>null</code>, the general <a href="#plotOptions.boxplot.lineWidth">lineWidth</a> applies.
   */
  external num get whiskerWidth;
  external void set whiskerWidth (num a_whiskerWidth);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class BoxplotSeriesData extends OptionsObject {
  external factory BoxplotSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * The <code>high</code> value for each data point, signifying the highest value in the sample set. The top whisker is drawn here.
   */
  external num get high;
  external void set high (num a_high);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The <code>low</code> value for each data point, signifying the lowest value in the sample set. The bottom whisker is drawn here.
   */
  external num get low;
  external void set low (num a_low);
  /**
   * The median for each data point. This is drawn as a line through the middle area of the box.
   */
  external num get median;
  external void set median (num a_median);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The lower quartile for each data point. This is the bottom of the box.
   */
  external num get q1;
  external void set q1 (num a_q1);
  /**
   * The higher quartile for each data point. This is the top of the box.
   */
  external num get q3;
  external void set q3 (num a_q3);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class BoxplotSeriesDataEvents extends OptionsObject {
  external factory BoxplotSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class BoxplotSeriesEvents extends OptionsObject {
  external factory BoxplotSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class BoxplotSeriesPoint extends OptionsObject {
  external factory BoxplotSeriesPoint ();
  /**
   * Events for each single point
   */
  external BoxplotSeriesPointEvents get events;
  external void set events (BoxplotSeriesPointEvents a_events);
}
@JS()
@anonymous
class BoxplotSeriesPointEvents extends OptionsObject {
  external factory BoxplotSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class BoxplotSeriesStates extends OptionsObject {
  external factory BoxplotSeriesStates ();
  /**
   * Options for the hovered series
   */
  external BoxplotSeriesStatesHover get hover;
  external void set hover (BoxplotSeriesStatesHover a_hover);
}
@JS()
@anonymous
class BoxplotSeriesStatesHover extends OptionsObject {
  external factory BoxplotSeriesStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class BoxplotSeriesStatesHoverHalo extends OptionsObject {
  external factory BoxplotSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class BoxplotSeriesTooltip extends OptionsObject {
  external factory BoxplotSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class BoxplotSeriesZones extends OptionsObject {
  external factory BoxplotSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class BubbleSeries extends Series {
  external factory BubbleSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * An array of data points for the series. For the <code>bubble</code> series type, points can be given in the following ways:

      <ol>

      <li><p>An array of arrays with 3 or 2 values. In this case, the values correspond to <code>x,y,z</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. The <code>x</code> value can also be omitted, in which case the inner arrays should be of length 2. Then the <code>x</code> value is automatically calculated, either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options.</p>

      <pre>data: [
      [0, 1, 2],
      [1, 5, 5],
      [2, 0, 2]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<bubble>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      y: 1,
      z: 1,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      y: 5,
      z: 4,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external BubbleSeriesDataLabels get dataLabels;
  external void set dataLabels (BubbleSeriesDataLabels a_dataLabels);
  /**
   * Whether to display negative sized bubbles. The threshold is given by the <a href="#plotOptions.bubble.zThreshold">zThreshold</a> option, and negative bubbles can be visualized by setting <a href="#plotOptions.bubble.negativeColor">negativeColor</a>.
   */
  external bool get displayNegative;
  external void set displayNegative (bool a_displayNegative);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external BubbleSeriesEvents get events;
  external void set events (BubbleSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external BubbleSeriesMarker get marker;
  external void set marker (BubbleSeriesMarker a_marker);
  /**
   * Maximum bubble size. Bubbles will automatically size between the <code>minSize</code> and <code>maxSize</code> to reflect the <code>z</code> value of each bubble. Can be either pixels (when no unit is given), or a percentage of the smallest one of the plot width and height.
   */
  external String get maxSize;
  external void set maxSize (String a_maxSize);
  /**
   * Minimum bubble size. Bubbles will automatically size between the <code>minSize</code> and <code>maxSize</code> to reflect the <code>z</code> value of each bubble. Can be either pixels (when no unit is given), or a percentage of the smallest one of the plot width and height.
   */
  external String get minSize;
  external void set minSize (String a_minSize);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * When a point's Z value is below the <a href="#plotOptions.bubble.zThreshold">zThreshold</a> setting, this color is used.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external BubbleSeriesPoint get point;
  external void set point (BubbleSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * Whether the bubble's value should be represented by the area or the width of the bubble. The default, <code>area</code>, corresponds best to the human perception of the size of each bubble.
   */
  external String get sizeBy;
  external void set sizeBy (String a_sizeBy);
  /**
   * When this is true, the absolute value of z determines the size of the bubble. This means that with the default <code>zThreshold</code> of 0, a bubble of value -1 will have the same size as a bubble of value 1, while a bubble of value 0 will have a smaller size according to <code>minSize</code>.
   */
  external bool get sizeByAbsoluteValue;
  external void set sizeByAbsoluteValue (bool a_sizeByAbsoluteValue);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The threshold, also called zero level or base level. For line type series this is only used in conjunction with <a href="#plotOptions.series.negativeColor">negativeColor</a>.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * The minimum for the Z value range. Defaults to the highest Z value in the data.
   */
  external num get zMax;
  external void set zMax (num a_zMax);
  /**
   * The minimum for the Z value range. Defaults to the lowest Z value in the data.
   */
  external num get zMin;
  external void set zMin (num a_zMin);
  /**
   * When <a href="#plotOptions.bubble.displayNegative">displayNegative</a> is <code>false</code>, bubbles with lower Z values are skipped. When <code>displayNegative</code> is <code>true</code> and a <a href="#plotOptions.bubble.negativeColor">negativeColor</a> is given, points with lower Z is colored.
   */
  external num get zThreshold;
  external void set zThreshold (num a_zThreshold);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class BubbleSeriesData extends OptionsObject {
  external factory BubbleSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The size value for each bubble. The bubbles' diameters are computed based on the <code>z</code>, and controlled by series options like <code>minSize</code>, <code>maxSize</code>, <code>sizeBy</code>, <code>zMin</code> and <code>zMax</code>.
   */
  external num get z;
  external void set z (num a_z);
}
@JS()
@anonymous
class BubbleSeriesDataEvents extends OptionsObject {
  external factory BubbleSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class BubbleSeriesDataLabels extends OptionsObject {
  external factory BubbleSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class BubbleSeriesEvents extends OptionsObject {
  external factory BubbleSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class BubbleSeriesMarker extends OptionsObject {
  external factory BubbleSeriesMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external BubbleSeriesMarkerStates get states;
  external void set states (BubbleSeriesMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class BubbleSeriesMarkerStates extends OptionsObject {
  external factory BubbleSeriesMarkerStates ();
  /**
   * null
   */
  external BubbleSeriesMarkerStatesHover get hover;
  external void set hover (BubbleSeriesMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external BubbleSeriesMarkerStatesSelect get select;
  external void set select (BubbleSeriesMarkerStatesSelect a_select);
}
@JS()
@anonymous
class BubbleSeriesMarkerStatesHover extends OptionsObject {
  external factory BubbleSeriesMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class BubbleSeriesMarkerStatesSelect extends OptionsObject {
  external factory BubbleSeriesMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class BubbleSeriesPoint extends OptionsObject {
  external factory BubbleSeriesPoint ();
  /**
   * Events for each single point
   */
  external BubbleSeriesPointEvents get events;
  external void set events (BubbleSeriesPointEvents a_events);
}
@JS()
@anonymous
class BubbleSeriesPointEvents extends OptionsObject {
  external factory BubbleSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class BubbleSeriesStates extends OptionsObject {
  external factory BubbleSeriesStates ();
  /**
   * Options for the hovered series
   */
  external BubbleSeriesStatesHover get hover;
  external void set hover (BubbleSeriesStatesHover a_hover);
}
@JS()
@anonymous
class BubbleSeriesStatesHover extends OptionsObject {
  external factory BubbleSeriesStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external BubbleSeriesStatesHoverMarker get marker;
  external void set marker (BubbleSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class BubbleSeriesStatesHoverHalo extends OptionsObject {
  external factory BubbleSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class BubbleSeriesStatesHoverMarker extends OptionsObject {
  external factory BubbleSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class BubbleSeriesTooltip extends OptionsObject {
  external factory BubbleSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class BubbleSeriesZones extends OptionsObject {
  external factory BubbleSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class ColumnSeries extends Series {
  external factory ColumnSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border surrounding each column or bar.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The corner radius of the border surrounding each column or bar.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The width of the border surrounding each column or bar.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * An array of data points for the series. For the <code>column</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options. The <code>x</code> values will be automatically calculated,

      either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options. If the axis

      has categories, these will be used.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of arrays with 2 values. In this case, the values correspond to <code>x,y</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. <pre>data: [
      [0, 6],
      [1, 2],
      [2, 6]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<column>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      y: 5,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      y: 9,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external ColumnSeriesDataLabels get dataLabels;
  external void set dataLabels (ColumnSeriesDataLabels a_dataLabels);
  /**
   * Depth of the columns in a 3D column chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * 3D columns only. The color of the edges. Similar to <code>borderColor</code>, except it defaults to the same color as the column.
   */
  external dynamic get edgeColor;
  external void set edgeColor (dynamic a_edgeColor);
  /**
   * 3D columns only. The width of the colored edges.
   */
  external num get edgeWidth;
  external void set edgeWidth (num a_edgeWidth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external ColumnSeriesEvents get events;
  external void set events (ColumnSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * Padding between each value groups, in x axis units.
   */
  external num get groupPadding;
  external void set groupPadding (num a_groupPadding);
  /**
   * The spacing between columns on the Z Axis in a 3D chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get groupZPadding;
  external void set groupZPadding (num a_groupZPadding);
  /**
   * Whether to group non-stacked columns or to let them render independent of each other. Non-grouped columns will be laid out individually and overlap each other.
   */
  external bool get grouping;
  external void set grouping (bool a_grouping);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The minimal height for a column or width for a bar. By default, 0 values are not shown. To visualize a 0 (or close to zero) point, set the minimal point length to a  pixel value like 3. In stacked column charts, minPointLength might not be respected for tightly packed values.
   */
  external num get minPointLength;
  external void set minPointLength (num a_minPointLength);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external ColumnSeriesPoint get point;
  external void set point (ColumnSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * Padding between each column or bar, in x axis units.
   */
  external num get pointPadding;
  external void set pointPadding (num a_pointPadding);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * The X axis range that each point is valid for. This determines the width of the column. On a categorized axis, the range will be 1 by default (one category unit). On linear and datetime axes, the range will be computed as the distance between the two closest data points.
   */
  external num get pointRange;
  external void set pointRange (num a_pointRange);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * A pixel value specifying a fixed width for each column or bar. When <code>null</code>, the width is calculated from the <code>pointPadding</code> and <code>groupPadding</code>.
   */
  external num get pointWidth;
  external void set pointWidth (num a_pointWidth);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * This option allows grouping series in a stacked chart. The stack option can be a string  or a number or anything else, as long as the grouped series' stack options match each other.
   */
  external String get stack;
  external void set stack (String a_stack);
  /**
   * Whether to stack the values of each series on top of each other. Possible values are null to disable, "normal" to stack by value or "percent".
   */
  external String get stacking;
  external void set stacking (String a_stacking);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The Y axis value to serve as the base for the columns, for distinguishing between values above and below a threshold. If <code>null</code>, the columns extend from the padding Y axis minimum.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class ColumnSeriesData extends OptionsObject {
  external factory ColumnSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class ColumnSeriesDataEvents extends OptionsObject {
  external factory ColumnSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class ColumnSeriesDataLabels extends OptionsObject {
  external factory ColumnSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class ColumnSeriesEvents extends OptionsObject {
  external factory ColumnSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class ColumnSeriesPoint extends OptionsObject {
  external factory ColumnSeriesPoint ();
  /**
   * Events for each single point
   */
  external ColumnSeriesPointEvents get events;
  external void set events (ColumnSeriesPointEvents a_events);
}
@JS()
@anonymous
class ColumnSeriesPointEvents extends OptionsObject {
  external factory ColumnSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class ColumnSeriesStates extends OptionsObject {
  external factory ColumnSeriesStates ();
  /**
   * Options for the hovered series
   */
  external ColumnSeriesStatesHover get hover;
  external void set hover (ColumnSeriesStatesHover a_hover);
}
@JS()
@anonymous
class ColumnSeriesStatesHover extends OptionsObject {
  external factory ColumnSeriesStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class ColumnSeriesStatesHoverHalo extends OptionsObject {
  external factory ColumnSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class ColumnSeriesTooltip extends OptionsObject {
  external factory ColumnSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class ColumnSeriesZones extends OptionsObject {
  external factory ColumnSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class ColumnrangeSeries extends Series {
  external factory ColumnrangeSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border surrounding each column or bar.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The corner radius of the border surrounding each column or bar.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The width of the border surrounding each column or bar.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * An array of data points for the series. For the <code>columnrange</code> series type, points can be given in the following ways:

      <ol>

      <li><p>An array of arrays with 3 or 2 values. In this case, the values correspond to <code>x,low,high</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. The <code>x</code> value can also be omitted, in which case the inner arrays should be of length 2. Then the <code>x</code> value is automatically calculated, either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options.</p>

      <pre>data: [
      [0, 4, 2],
      [1, 2, 1],
      [2, 9, 10]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<columnrange>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      low: 0,
      high: 4,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      low: 5,
      high: 3,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * Extended data labels for range series types. Range series  data labels have no <code>x</code> and <code>y</code> options. Instead, they have <code>xLow</code>, <code>xHigh</code>, <code>yLow</code> and <code>yHigh</code> options to allow the higher and lower data label sets individually.
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Depth of the columns in a 3D column chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * 3D columns only. The color of the edges. Similar to <code>borderColor</code>, except it defaults to the same color as the column.
   */
  external dynamic get edgeColor;
  external void set edgeColor (dynamic a_edgeColor);
  /**
   * 3D columns only. The width of the colored edges.
   */
  external num get edgeWidth;
  external void set edgeWidth (num a_edgeWidth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external ColumnrangeSeriesEvents get events;
  external void set events (ColumnrangeSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * Padding between each value groups, in x axis units.
   */
  external num get groupPadding;
  external void set groupPadding (num a_groupPadding);
  /**
   * The spacing between columns on the Z Axis in a 3D chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get groupZPadding;
  external void set groupZPadding (num a_groupZPadding);
  /**
   * Whether to group non-stacked columns or to let them render independent of each other. Non-grouped columns will be laid out individually and overlap each other.
   */
  external bool get grouping;
  external void set grouping (bool a_grouping);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The minimal height for a column or width for a bar. By default, 0 values are not shown. To visualize a 0 (or close to zero) point, set the minimal point length to a  pixel value like 3. In stacked column charts, minPointLength might not be respected for tightly packed values.
   */
  external num get minPointLength;
  external void set minPointLength (num a_minPointLength);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Properties for each single point
   */
  external ColumnrangeSeriesPoint get point;
  external void set point (ColumnrangeSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * Padding between each column or bar, in x axis units.
   */
  external num get pointPadding;
  external void set pointPadding (num a_pointPadding);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * The X axis range that each point is valid for. This determines the width of the column. On a categorized axis, the range will be 1 by default (one category unit). On linear and datetime axes, the range will be computed as the distance between the two closest data points.
   */
  external num get pointRange;
  external void set pointRange (num a_pointRange);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * A pixel value specifying a fixed width for each column or bar. When <code>null</code>, the width is calculated from the <code>pointPadding</code> and <code>groupPadding</code>.
   */
  external num get pointWidth;
  external void set pointWidth (num a_pointWidth);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class ColumnrangeSeriesData extends OptionsObject {
  external factory ColumnrangeSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * The high or maximum value for each data point.
   */
  external num get high;
  external void set high (num a_high);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The low or minimum value for each data point.
   */
  external num get low;
  external void set low (num a_low);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
}
@JS()
@anonymous
class ColumnrangeSeriesDataEvents extends OptionsObject {
  external factory ColumnrangeSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class ColumnrangeSeriesDataLabels extends OptionsObject {
  external factory ColumnrangeSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * X offset of the higher data labels relative to the point value.
   */
  external num get xHigh;
  external void set xHigh (num a_xHigh);
  /**
   * X offset of the lower data labels relative to the point value.
   */
  external num get xLow;
  external void set xLow (num a_xLow);
  /**
   * Y offset of the higher data labels relative to the point value.
   */
  external num get yHigh;
  external void set yHigh (num a_yHigh);
  /**
   * Y offset of the lower data labels relative to the point value.
   */
  external num get yLow;
  external void set yLow (num a_yLow);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class ColumnrangeSeriesEvents extends OptionsObject {
  external factory ColumnrangeSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class ColumnrangeSeriesPoint extends OptionsObject {
  external factory ColumnrangeSeriesPoint ();
  /**
   * Events for each single point
   */
  external ColumnrangeSeriesPointEvents get events;
  external void set events (ColumnrangeSeriesPointEvents a_events);
}
@JS()
@anonymous
class ColumnrangeSeriesPointEvents extends OptionsObject {
  external factory ColumnrangeSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class ColumnrangeSeriesStates extends OptionsObject {
  external factory ColumnrangeSeriesStates ();
  /**
   * Options for the hovered series
   */
  external ColumnrangeSeriesStatesHover get hover;
  external void set hover (ColumnrangeSeriesStatesHover a_hover);
}
@JS()
@anonymous
class ColumnrangeSeriesStatesHover extends OptionsObject {
  external factory ColumnrangeSeriesStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class ColumnrangeSeriesStatesHoverHalo extends OptionsObject {
  external factory ColumnrangeSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class ColumnrangeSeriesTooltip extends OptionsObject {
  external factory ColumnrangeSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class ColumnrangeSeriesZones extends OptionsObject {
  external factory ColumnrangeSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class ErrorbarSeries extends Series {
  external factory ErrorbarSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * The main color of the bars. This can be overridden by <a href="#plotOptions.errorbar.stemColor">stemColor</a> and <a href="#plotOptions.errorbar.whiskerColor">whiskerColor</a> individually.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * An array of data points for the series. For the <code>errorbar</code> series type, points can be given in the following ways:

      <ol>

      <li><p>An array of arrays with 3 or 2 values. In this case, the values correspond to <code>x,low,high</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. The <code>x</code> value can also be omitted, in which case the inner arrays should be of length 2. Then the <code>x</code> value is automatically calculated, either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options.</p>

      <pre>data: [
      [0, 10, 2],
      [1, 1, 8],
      [2, 4, 5]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<errorbar>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      low: 0,
      high: 0,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      low: 5,
      high: 5,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * Depth of the columns in a 3D column chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * 3D columns only. The color of the edges. Similar to <code>borderColor</code>, except it defaults to the same color as the column.
   */
  external dynamic get edgeColor;
  external void set edgeColor (dynamic a_edgeColor);
  /**
   * 3D columns only. The width of the colored edges.
   */
  external num get edgeWidth;
  external void set edgeWidth (num a_edgeWidth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external ErrorbarSeriesEvents get events;
  external void set events (ErrorbarSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * The spacing between columns on the Z Axis in a 3D chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get groupZPadding;
  external void set groupZPadding (num a_groupZPadding);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The width of the line surrounding the box. If any of <a href="#plotOptions.boxplot.stemWidth">stemWidth</a>, <a href="#plotOptions.boxplot.medianWidth">medianWidth</a> or <a href="#plotOptions.boxplot.whiskerWidth">whiskerWidth</a> are <code>null</code>, the lineWidth also applies to these lines.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The parent series of the error bar. The default value links it to the previous series. Otherwise, use the id of the parent series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external ErrorbarSeriesPoint get point;
  external void set point (ErrorbarSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * Padding between each column or bar, in x axis units.
   */
  external num get pointPadding;
  external void set pointPadding (num a_pointPadding);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * The X axis range that each point is valid for. This determines the width of the column. On a categorized axis, the range will be 1 by default (one category unit). On linear and datetime axes, the range will be computed as the distance between the two closest data points.
   */
  external num get pointRange;
  external void set pointRange (num a_pointRange);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * A pixel value specifying a fixed width for each column or bar. When <code>null</code>, the width is calculated from the <code>pointPadding</code> and <code>groupPadding</code>.
   */
  external num get pointWidth;
  external void set pointWidth (num a_pointWidth);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * The color of the stem, the vertical line extending from the box to the whiskers. If <code>null</code>, the series color is used.
   */
  external dynamic get stemColor;
  external void set stemColor (dynamic a_stemColor);
  /**
   * The dash style of the stem, the vertical line extending from the box to the whiskers.
   */
  external String get stemDashStyle;
  external void set stemDashStyle (String a_stemDashStyle);
  /**
   * The width of the stem, the vertical line extending from the box to the whiskers. If <code>null</code>, the width is inherited from the <a href="#plotOptions.boxplot.lineWidth">lineWidth</a> option.
   */
  external num get stemWidth;
  external void set stemWidth (num a_stemWidth);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * The color of the whiskers, the horizontal lines marking low and high values. When <code>null</code>, the general series color is used.
   */
  external dynamic get whiskerColor;
  external void set whiskerColor (dynamic a_whiskerColor);
  /**
   * The length of the whiskers, the horizontal lines marking low and high values. It can be a numerical pixel value, or a percentage value of the box width. Set <code>0</code> to disable whiskers.
   */
  external dynamic get whiskerLength;
  external void set whiskerLength (dynamic a_whiskerLength);
  /**
   * The line width of the whiskers, the horizontal lines marking low and high values. When <code>null</code>, the general <a href="#plotOptions.errorbar.lineWidth">lineWidth</a> applies.
   */
  external num get whiskerWidth;
  external void set whiskerWidth (num a_whiskerWidth);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class ErrorbarSeriesData extends OptionsObject {
  external factory ErrorbarSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * The high or maximum value for each data point.
   */
  external num get high;
  external void set high (num a_high);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The low or minimum value for each data point.
   */
  external num get low;
  external void set low (num a_low);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
}
@JS()
@anonymous
class ErrorbarSeriesDataEvents extends OptionsObject {
  external factory ErrorbarSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class ErrorbarSeriesEvents extends OptionsObject {
  external factory ErrorbarSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class ErrorbarSeriesPoint extends OptionsObject {
  external factory ErrorbarSeriesPoint ();
  /**
   * Events for each single point
   */
  external ErrorbarSeriesPointEvents get events;
  external void set events (ErrorbarSeriesPointEvents a_events);
}
@JS()
@anonymous
class ErrorbarSeriesPointEvents extends OptionsObject {
  external factory ErrorbarSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class ErrorbarSeriesStates extends OptionsObject {
  external factory ErrorbarSeriesStates ();
  /**
   * Options for the hovered series
   */
  external ErrorbarSeriesStatesHover get hover;
  external void set hover (ErrorbarSeriesStatesHover a_hover);
}
@JS()
@anonymous
class ErrorbarSeriesStatesHover extends OptionsObject {
  external factory ErrorbarSeriesStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class ErrorbarSeriesStatesHoverHalo extends OptionsObject {
  external factory ErrorbarSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class ErrorbarSeriesTooltip extends OptionsObject {
  external factory ErrorbarSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class ErrorbarSeriesZones extends OptionsObject {
  external factory ErrorbarSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class FunnelSeries extends Series {
  external factory FunnelSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * The color of the border surrounding each slice. When <code>null</code>, the border takes the same color as the slice fill. This can be used together with a <code>borderWidth</code> to fill drawing gaps created by antialiazing artefacts in borderless pies.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * <p>The width of the border surrounding each slice.</p>



      <p>When setting the border width to 0, there may be small gaps between the slices due to SVG antialiasing artefacts. To work around this, keep the border width at 0.5 or 1, but set the <code>borderColor</code> to <code>null</code> instead.</p>
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The center of the series. By default, it is centered in the middle of the plot area, so it fills the plot area height.
   */
  external dynamic get center;
  external void set center (dynamic a_center);
  /**
   * A series specific or series type specific color set to use instead of the global <a href="#colors">colors</a>.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * An array of data points for the series. For the <code>funnel</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<funnel>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      y: 3,
      name: "Point2",
      color: "#00FF00"
      }, {
      y: 1,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external FunnelSeriesDataLabels get dataLabels;
  external void set dataLabels (FunnelSeriesDataLabels a_dataLabels);
  /**
   * The thickness of a 3D pie. Requires <code>highcharts-3d.js</code>
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external FunnelSeriesEvents get events;
  external void set events (FunnelSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * The height of the funnel or pyramid. If it is a number it defines the pixel height, if it is a percentage string it is the percentage of the plot area height.
   */
  external dynamic get height;
  external void set height (dynamic a_height);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The minimum size for a pie in response to auto margins. The pie will try to shrink to make room for data labels in side the plot area, but only to this size.
   */
  external num get minSize;
  external void set minSize (num a_minSize);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The height of the neck, the lower part of the funnel. A number defines pixel width, a percentage string defines a percentage of the plot area height.
   */
  external dynamic get neckHeight;
  external void set neckHeight (dynamic a_neckHeight);
  /**
   * The width of the neck, the lower part of the funnel. A number defines pixel width, a percentage string defines a percentage of the plot area width.
   */
  external dynamic get neckWidth;
  external void set neckWidth (dynamic a_neckWidth);
  /**
   * Properties for each single point
   */
  external FunnelSeriesPoint get point;
  external void set point (FunnelSeriesPoint a_point);
  /**
   * A reversed funnel has the widest area down. A reversed funnel with no neck width and neck height is a pyramid.
   */
  external bool get reversed;
  external void set reversed (bool a_reversed);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * Whether to display this particular series or series type in the legend. Since 2.1, pies are not shown in the legend by default.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * If a point is sliced, moved out from the center, how many pixels should  it be moved?.
   */
  external num get slicedOffset;
  external void set slicedOffset (num a_slicedOffset);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * The width of the funnel compared to the width of the plot area, or the pixel width if it is a number.
   */
  external dynamic get width;
  external void set width (dynamic a_width);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class FunnelSeriesData extends OptionsObject {
  external factory FunnelSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The sequential index of the data point in the legend.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class FunnelSeriesDataEvents extends OptionsObject {
  external factory FunnelSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class FunnelSeriesDataLabels extends OptionsObject {
  external factory FunnelSeriesDataLabels ();
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * The color of the line connecting the data label to the pie slice. The default color is the same as the point's color.
   */
  external String get connectorColor;
  external void set connectorColor (String a_connectorColor);
  /**
   * The distance from the data label to the connector.
   */
  external num get connectorPadding;
  external void set connectorPadding (num a_connectorPadding);
  /**
   * The width of the line connecting the data label to the pie slice.
   */
  external num get connectorWidth;
  external void set connectorWidth (num a_connectorWidth);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * The distance of the data label from the pie's edge. Negative numbers put the data label on top of the pie slices. Connectors are only shown for data labels outside the pie.
   */
  external num get distance;
  external void set distance (num a_distance);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Whether to render the connector as a soft arc or a line with sharp break.
   */
  external bool get softConnector;
  external void set softConnector (bool a_softConnector);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class FunnelSeriesEvents extends OptionsObject {
  external factory FunnelSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the point name in the legend is clicked. One parameter, event, is passed to the function. The state of the checkbox is found by event.checked. The checked item is found by event.item. Return false to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Not applicable to pies, as the legend item is per point. See point.events.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class FunnelSeriesPoint extends OptionsObject {
  external factory FunnelSeriesPoint ();
  /**
   * Events for each single point
   */
  external FunnelSeriesPointEvents get events;
  external void set events (FunnelSeriesPointEvents a_events);
}
@JS()
@anonymous
class FunnelSeriesPointEvents extends OptionsObject {
  external factory FunnelSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the legend item belonging to the pie point (slice) is clicked.  The <code>this</code> keyword refers to the  point itself. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. The default action is to toggle the visibility of the point. This can be prevented by calling  <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class FunnelSeriesStates extends OptionsObject {
  external factory FunnelSeriesStates ();
  /**
   * Options for the hovered series
   */
  external FunnelSeriesStatesHover get hover;
  external void set hover (FunnelSeriesStatesHover a_hover);
}
@JS()
@anonymous
class FunnelSeriesStatesHover extends OptionsObject {
  external factory FunnelSeriesStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external FunnelSeriesStatesHoverMarker get marker;
  external void set marker (FunnelSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class FunnelSeriesStatesHoverHalo extends OptionsObject {
  external factory FunnelSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class FunnelSeriesStatesHoverMarker extends OptionsObject {
  external factory FunnelSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class FunnelSeriesTooltip extends OptionsObject {
  external factory FunnelSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class FunnelSeriesZones extends OptionsObject {
  external factory FunnelSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class GaugeSeries extends Series {
  external factory GaugeSeries ();
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * An array of data points for the series. For the <code>gauge</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<gauge>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      y: 6,
      name: "Point2",
      color: "#00FF00"
      }, {
      y: 8,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol><p>The typical gauge only contains a single data value.</p>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * Data labels for the gauge. For gauges, the data labels are enabled by default and shown in a bordered box below the point.
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Options for the dial or arrow pointer of the gauge.
   */
  external JsObject get dial;
  external void set dial (JsObject a_dial);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external GaugeSeriesEvents get events;
  external void set events (GaugeSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Allow the dial to overshoot the end of the perimeter axis by this many degrees. Say if the gauge axis goes from 0 to 60, a value of 100, or 1000, will show 5 degrees beyond the end of the axis.
   */
  external num get overshoot;
  external void set overshoot (num a_overshoot);
  /**
   * Options for the pivot or the center point of the gauge.
   */
  external JsObject get pivot;
  external void set pivot (JsObject a_pivot);
  /**
   * Properties for each single point
   */
  external GaugeSeriesPoint get point;
  external void set point (GaugeSeriesPoint a_point);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. Defaults to false for gauge series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The threshold, also called zero level or base level. For line type series this is only used in conjunction with <a href="#plotOptions.series.negativeColor">negativeColor</a>.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When this option is <code>true</code>, the dial will wrap around the axes. For instance, in a full-range gauge going from 0 to 360, a value of 400 will point to 40. When <code>wrap</code> is <code>false</code>, the dial stops at 360.
   */
  external bool get wrap;
  external void set wrap (bool a_wrap);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class GaugeSeriesData extends OptionsObject {
  external factory GaugeSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class GaugeSeriesDataEvents extends OptionsObject {
  external factory GaugeSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class GaugeSeriesDataLabels extends OptionsObject {
  external factory GaugeSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the gauge's data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the gauge data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of the data label.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the center of the gauge.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. A value of 2 display them behind the dial.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class GaugeSeriesDial extends OptionsObject {
  external factory GaugeSeriesDial ();
  /**
   * The background or fill color of the gauge's dial.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The length of the dial's base part, relative to the total radius or length of the dial.
   */
  external String get baseLength;
  external void set baseLength (String a_baseLength);
  /**
   * The pixel width of the base of the gauge dial. The base is the part closest to the pivot, defined by baseLength.
   */
  external num get baseWidth;
  external void set baseWidth (num a_baseWidth);
  /**
   * The border color or stroke of the gauge's dial. By default, the borderWidth is 0, so this must be set in addition to a custom border color.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The width of the gauge dial border in pixels.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The radius or length of the dial, in percentages relative to the radius of the gauge itself.
   */
  external String get radius;
  external void set radius (String a_radius);
  /**
   * The length of the dial's rear end, the part that extends out on the other side of the pivot. Relative to the dial's length.
   */
  external String get rearLength;
  external void set rearLength (String a_rearLength);
  /**
   * The width of the top of the dial, closest to the perimeter. The pivot narrows in from the base to the top.
   */
  external num get topWidth;
  external void set topWidth (num a_topWidth);
}
@JS()
@anonymous
class GaugeSeriesEvents extends OptionsObject {
  external factory GaugeSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class GaugeSeriesPivot extends OptionsObject {
  external factory GaugeSeriesPivot ();
  /**
   * The background color or fill of the pivot.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border or stroke color of the pivot. In able to change this, the borderWidth must also be set to something other than the default 0.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border or stroke width of the pivot.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The pixel radius of the pivot.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class GaugeSeriesPoint extends OptionsObject {
  external factory GaugeSeriesPoint ();
  /**
   * Events for each single point
   */
  external GaugeSeriesPointEvents get events;
  external void set events (GaugeSeriesPointEvents a_events);
}
@JS()
@anonymous
class GaugeSeriesPointEvents extends OptionsObject {
  external factory GaugeSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class GaugeSeriesStates extends OptionsObject {
  external factory GaugeSeriesStates ();
  /**
   * Options for the hovered series
   */
  external GaugeSeriesStatesHover get hover;
  external void set hover (GaugeSeriesStatesHover a_hover);
}
@JS()
@anonymous
class GaugeSeriesStatesHover extends OptionsObject {
  external factory GaugeSeriesStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external GaugeSeriesStatesHoverMarker get marker;
  external void set marker (GaugeSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class GaugeSeriesStatesHoverHalo extends OptionsObject {
  external factory GaugeSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class GaugeSeriesStatesHoverMarker extends OptionsObject {
  external factory GaugeSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class GaugeSeriesTooltip extends OptionsObject {
  external factory GaugeSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class GaugeSeriesZones extends OptionsObject {
  external factory GaugeSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class HeatmapSeries extends Series {
  external factory HeatmapSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border surrounding each column or bar.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The corner radius of the border surrounding each column or bar.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The width of the border surrounding each column or bar.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The main color of the series. In heat maps this color is rarely used, as we mostly use the color to denote the value of each point. Unless options are set in the <a href="#colorAxis">colorAxis</a>, the default value is pulled from the <a href="#colors">options.colors</a> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * The column size - how many X axis units each column in the heatmap should span.
   */
  external num get colsize;
  external void set colsize (num a_colsize);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * An array of data points for the series. For the <code>heatmap</code> series type, points can be given in the following ways:

      <ol>

      <li><p>An array of arrays with 3 or 2 values. In this case, the values correspond to <code>x,y,value</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. The <code>x</code> value can also be omitted, in which case the inner arrays should be of length 2. Then the <code>x</code> value is automatically calculated, either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options.</p>

      <pre>data: [
      [0, 9, 7],
      [1, 10, 4],
      [2, 6, 3]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<heatmap>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      y: 3,
      value: 10,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      y: 7,
      value: 10,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external HeatmapSeriesDataLabels get dataLabels;
  external void set dataLabels (HeatmapSeriesDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external HeatmapSeriesEvents get events;
  external void set events (HeatmapSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Properties for each single point
   */
  external HeatmapSeriesPoint get point;
  external void set point (HeatmapSeriesPoint a_point);
  /**
   * The row size - how many Y axis units each heatmap row should span.
   */
  external num get rowsize;
  external void set rowsize (num a_rowsize);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class HeatmapSeriesData extends OptionsObject {
  external factory HeatmapSeriesData ();
  /**
   * The color of the point. In heat maps the point color is rarely set explicitly, as we use the color to denote the <code>value</code>. Options for this are set in the <a href="#colorAxis">colorAxis</a> configuration.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The value of the point, resulting in a color controled by options as set in the <a href="#colorAxis">colorAxis</a> configuration.
   */
  external num get value;
  external void set value (num a_value);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class HeatmapSeriesDataEvents extends OptionsObject {
  external factory HeatmapSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class HeatmapSeriesDataLabels extends OptionsObject {
  external factory HeatmapSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class HeatmapSeriesEvents extends OptionsObject {
  external factory HeatmapSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class HeatmapSeriesPoint extends OptionsObject {
  external factory HeatmapSeriesPoint ();
  /**
   * Events for each single point
   */
  external HeatmapSeriesPointEvents get events;
  external void set events (HeatmapSeriesPointEvents a_events);
}
@JS()
@anonymous
class HeatmapSeriesPointEvents extends OptionsObject {
  external factory HeatmapSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class HeatmapSeriesStates extends OptionsObject {
  external factory HeatmapSeriesStates ();
  /**
   * Options for the hovered series
   */
  external HeatmapSeriesStatesHover get hover;
  external void set hover (HeatmapSeriesStatesHover a_hover);
}
@JS()
@anonymous
class HeatmapSeriesStatesHover extends OptionsObject {
  external factory HeatmapSeriesStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class HeatmapSeriesStatesHoverHalo extends OptionsObject {
  external factory HeatmapSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class HeatmapSeriesTooltip extends OptionsObject {
  external factory HeatmapSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class HeatmapSeriesZones extends OptionsObject {
  external factory HeatmapSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class LineSeries extends Series {
  external factory LineSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Polar charts only. Whether to connect the ends of a line series plot across the extremes.
   */
  external bool get connectEnds;
  external void set connectEnds (bool a_connectEnds);
  /**
   * Whether to connect a graph line across null points.
   */
  external bool get connectNulls;
  external void set connectNulls (bool a_connectNulls);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * An array of data points for the series. For the <code>line</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options. The <code>x</code> values will be automatically calculated,

      either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options. If the axis

      has categories, these will be used.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of arrays with 2 values. In this case, the values correspond to <code>x,y</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. <pre>data: [
      [0, 1],
      [1, 2],
      [2, 8]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<line>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      y: 10,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      y: 6,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external LineSeriesDataLabels get dataLabels;
  external void set dataLabels (LineSeriesDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external LineSeriesEvents get events;
  external void set events (LineSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The line cap used for line ends and line joins on the graph.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external LineSeriesMarker get marker;
  external void set marker (LineSeriesMarker a_marker);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external LineSeriesPoint get point;
  external void set point (LineSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * This option allows grouping series in a stacked chart. The stack option can be a string  or a number or anything else, as long as the grouped series' stack options match each other.
   */
  external String get stack;
  external void set stack (String a_stack);
  /**
   * Whether to stack the values of each series on top of each other. Possible values are null to disable, "normal" to stack by value or "percent".
   */
  external String get stacking;
  external void set stacking (String a_stacking);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Whether to apply steps to the line. Possible values are <code>left</code>, <code>center</code> and <code>right</code>. Prior to 2.3.5, only <code>left</code> was supported.
   */
  external String get step;
  external void set step (String a_step);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The threshold, also called zero level or base level. For line type series this is only used in conjunction with <a href="#plotOptions.series.negativeColor">negativeColor</a>.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class LineSeriesData extends OptionsObject {
  external factory LineSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * null
   */
  external LineSeriesDataMarker get marker;
  external void set marker (LineSeriesDataMarker a_marker);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class LineSeriesDataEvents extends OptionsObject {
  external factory LineSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class LineSeriesDataMarker extends OptionsObject {
  external factory LineSeriesDataMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external LineSeriesDataMarkerStates get states;
  external void set states (LineSeriesDataMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class LineSeriesDataMarkerStates extends OptionsObject {
  external factory LineSeriesDataMarkerStates ();
  /**
   * Options for the hovered series
   */
  external LineSeriesDataMarkerStatesHover get hover;
  external void set hover (LineSeriesDataMarkerStatesHover a_hover);
}
@JS()
@anonymous
class LineSeriesDataMarkerStatesHover extends OptionsObject {
  external factory LineSeriesDataMarkerStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external LineSeriesDataMarkerStatesHoverMarker get marker;
  external void set marker (LineSeriesDataMarkerStatesHoverMarker a_marker);
}
@JS()
@anonymous
class LineSeriesDataMarkerStatesHoverHalo extends OptionsObject {
  external factory LineSeriesDataMarkerStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class LineSeriesDataMarkerStatesHoverMarker extends OptionsObject {
  external factory LineSeriesDataMarkerStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class LineSeriesDataLabels extends OptionsObject {
  external factory LineSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class LineSeriesEvents extends OptionsObject {
  external factory LineSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class LineSeriesMarker extends OptionsObject {
  external factory LineSeriesMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external LineSeriesMarkerStates get states;
  external void set states (LineSeriesMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class LineSeriesMarkerStates extends OptionsObject {
  external factory LineSeriesMarkerStates ();
  /**
   * null
   */
  external LineSeriesMarkerStatesHover get hover;
  external void set hover (LineSeriesMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external LineSeriesMarkerStatesSelect get select;
  external void set select (LineSeriesMarkerStatesSelect a_select);
}
@JS()
@anonymous
class LineSeriesMarkerStatesHover extends OptionsObject {
  external factory LineSeriesMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class LineSeriesMarkerStatesSelect extends OptionsObject {
  external factory LineSeriesMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class LineSeriesPoint extends OptionsObject {
  external factory LineSeriesPoint ();
  /**
   * Events for each single point
   */
  external LineSeriesPointEvents get events;
  external void set events (LineSeriesPointEvents a_events);
}
@JS()
@anonymous
class LineSeriesPointEvents extends OptionsObject {
  external factory LineSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class LineSeriesStates extends OptionsObject {
  external factory LineSeriesStates ();
  /**
   * Options for the hovered series
   */
  external LineSeriesStatesHover get hover;
  external void set hover (LineSeriesStatesHover a_hover);
}
@JS()
@anonymous
class LineSeriesStatesHover extends OptionsObject {
  external factory LineSeriesStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external LineSeriesStatesHoverMarker get marker;
  external void set marker (LineSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class LineSeriesStatesHoverHalo extends OptionsObject {
  external factory LineSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class LineSeriesStatesHoverMarker extends OptionsObject {
  external factory LineSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class LineSeriesTooltip extends OptionsObject {
  external factory LineSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class LineSeriesZones extends OptionsObject {
  external factory LineSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PieSeries extends Series {
  external factory PieSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border surrounding each slice. When <code>null</code>, the border takes the same color as the slice fill. This can be used together with a <code>borderWidth</code> to fill drawing gaps created by antialiazing artefacts in borderless pies.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * <p>The width of the border surrounding each slice.</p>



      <p>When setting the border width to 0, there may be small gaps between the slices due to SVG antialiasing artefacts. To work around this, keep the border width at 0.5 or 1, but set the <code>borderColor</code> to <code>null</code> instead.</p>
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The center of the pie chart relative to the plot area. Can be percentages or pixel values. The default behaviour (as of 3.0) is to center the pie so that all slices and data labels are within the plot area. As a consequence, the pie may actually jump around in a chart with dynamic values, as the data labels move. In that case, the center should be explicitly set, for example to <code>["50%", "50%"]</code>.


   */
  external dynamic get center;
  external void set center (dynamic a_center);
  /**
   * A series specific or series type specific color set to use instead of the global <a href="#colors">colors</a>.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * An array of data points for the series. For the <code>pie</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<pie>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      y: 1,
      name: "Point2",
      color: "#00FF00"
      }, {
      y: 7,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external PieSeriesDataLabels get dataLabels;
  external void set dataLabels (PieSeriesDataLabels a_dataLabels);
  /**
   * The thickness of a 3D pie. Requires <code>highcharts-3d.js</code>
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * The end angle of the pie in degrees where 0 is top and 90 is right. Defaults to <code>startAngle</code> plus 360.
   */
  external num get endAngle;
  external void set endAngle (num a_endAngle);
  /**
   * null
   */
  external PieSeriesEvents get events;
  external void set events (PieSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * <p>Equivalent to <a href="#chart.ignoreHiddenSeries">chart.ignoreHiddenSeries</a>, this option tells whether the series shall be redrawn as if the hidden point were <code>null</code>.</p>

      <p>The default value changed from <code>false</code> to <code>true</code> with Highcharts 3.0.</p>
   */
  external bool get ignoreHiddenPoint;
  external void set ignoreHiddenPoint (bool a_ignoreHiddenPoint);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * <p>The size of the inner diameter for the pie. A size greater than 0 renders a donut chart. Can be a percentage or pixel value. Percentages are relative to the pie size. Pixel values are given as integers.</p>



      <p>Note: in Highcharts < 4.1.2, the percentage was relative to the plot area, not the pie size.</p>
   */
  external dynamic get innerSize;
  external void set innerSize (dynamic a_innerSize);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The minimum size for a pie in response to auto margins. The pie will try to shrink to make room for data labels in side the plot area, but only to this size.
   */
  external num get minSize;
  external void set minSize (num a_minSize);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Properties for each single point
   */
  external PieSeriesPoint get point;
  external void set point (PieSeriesPoint a_point);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * Whether to display this particular series or series type in the legend. Since 2.1, pies are not shown in the legend by default.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * The diameter of the pie relative to the plot area. Can be a percentage or pixel value. Pixel values are given as integers. The default behaviour (as of 3.0) is to scale to the plot area and give room for data labels within the plot area. As a consequence, the size of the pie may vary when points are updated and data labels more around. In that case it is best to set a fixed value, for example <code>"75%"</code>.
   */
  external dynamic get size;
  external void set size (dynamic a_size);
  /**
   * If a point is sliced, moved out from the center, how many pixels should  it be moved?.
   */
  external num get slicedOffset;
  external void set slicedOffset (num a_slicedOffset);
  /**
   * The start angle of the pie slices in degrees where 0 is top and 90 right.
   */
  external num get startAngle;
  external void set startAngle (num a_startAngle);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PieSeriesData extends OptionsObject {
  external factory PieSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The sequential index of the data point in the legend.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to display a slice offset from the center.
   */
  external bool get sliced;
  external void set sliced (bool a_sliced);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class PieSeriesDataEvents extends OptionsObject {
  external factory PieSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PieSeriesDataLabels extends OptionsObject {
  external factory PieSeriesDataLabels ();
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * The color of the line connecting the data label to the pie slice. The default color is the same as the point's color.
   */
  external String get connectorColor;
  external void set connectorColor (String a_connectorColor);
  /**
   * The distance from the data label to the connector.
   */
  external num get connectorPadding;
  external void set connectorPadding (num a_connectorPadding);
  /**
   * The width of the line connecting the data label to the pie slice.
   */
  external num get connectorWidth;
  external void set connectorWidth (num a_connectorWidth);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * The distance of the data label from the pie's edge. Negative numbers put the data label on top of the pie slices. Connectors are only shown for data labels outside the pie.
   */
  external num get distance;
  external void set distance (num a_distance);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Whether to render the connector as a soft arc or a line with sharp break.
   */
  external bool get softConnector;
  external void set softConnector (bool a_softConnector);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PieSeriesEvents extends OptionsObject {
  external factory PieSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the point name in the legend is clicked. One parameter, event, is passed to the function. The state of the checkbox is found by event.checked. The checked item is found by event.item. Return false to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Not applicable to pies, as the legend item is per point. See point.events.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PieSeriesPoint extends OptionsObject {
  external factory PieSeriesPoint ();
  /**
   * Events for each single point
   */
  external PieSeriesPointEvents get events;
  external void set events (PieSeriesPointEvents a_events);
}
@JS()
@anonymous
class PieSeriesPointEvents extends OptionsObject {
  external factory PieSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the legend item belonging to the pie point (slice) is clicked.  The <code>this</code> keyword refers to the  point itself. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. The default action is to toggle the visibility of the point. This can be prevented by calling  <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PieSeriesStates extends OptionsObject {
  external factory PieSeriesStates ();
  /**
   * Options for the hovered series
   */
  external PieSeriesStatesHover get hover;
  external void set hover (PieSeriesStatesHover a_hover);
}
@JS()
@anonymous
class PieSeriesStatesHover extends OptionsObject {
  external factory PieSeriesStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PieSeriesStatesHoverMarker get marker;
  external void set marker (PieSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PieSeriesStatesHoverHalo extends OptionsObject {
  external factory PieSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PieSeriesStatesHoverMarker extends OptionsObject {
  external factory PieSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PieSeriesTooltip extends OptionsObject {
  external factory PieSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PieSeriesZones extends OptionsObject {
  external factory PieSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PolygonSeries extends Series {
  external factory PolygonSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * An array of data points for the series. For the <code>polygon</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options. The <code>x</code> values will be automatically calculated,

      either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options. If the axis

      has categories, these will be used.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of arrays with 2 values. In this case, the values correspond to <code>x,y</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. <pre>data: [
      [0, 10],
      [1, 3],
      [2, 1]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<polygon>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      y: 1,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      y: 8,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external PolygonSeriesDataLabels get dataLabels;
  external void set dataLabels (PolygonSeriesDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PolygonSeriesEvents get events;
  external void set events (PolygonSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external PolygonSeriesMarker get marker;
  external void set marker (PolygonSeriesMarker a_marker);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external PolygonSeriesPoint get point;
  external void set point (PolygonSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PolygonSeriesData extends OptionsObject {
  external factory PolygonSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * null
   */
  external PolygonSeriesDataMarker get marker;
  external void set marker (PolygonSeriesDataMarker a_marker);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class PolygonSeriesDataEvents extends OptionsObject {
  external factory PolygonSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PolygonSeriesDataMarker extends OptionsObject {
  external factory PolygonSeriesDataMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external PolygonSeriesDataMarkerStates get states;
  external void set states (PolygonSeriesDataMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PolygonSeriesDataMarkerStates extends OptionsObject {
  external factory PolygonSeriesDataMarkerStates ();
  /**
   * Options for the hovered series
   */
  external PolygonSeriesDataMarkerStatesHover get hover;
  external void set hover (PolygonSeriesDataMarkerStatesHover a_hover);
}
@JS()
@anonymous
class PolygonSeriesDataMarkerStatesHover extends OptionsObject {
  external factory PolygonSeriesDataMarkerStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PolygonSeriesDataMarkerStatesHoverMarker get marker;
  external void set marker (PolygonSeriesDataMarkerStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PolygonSeriesDataMarkerStatesHoverHalo extends OptionsObject {
  external factory PolygonSeriesDataMarkerStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PolygonSeriesDataMarkerStatesHoverMarker extends OptionsObject {
  external factory PolygonSeriesDataMarkerStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PolygonSeriesDataLabels extends OptionsObject {
  external factory PolygonSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PolygonSeriesEvents extends OptionsObject {
  external factory PolygonSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PolygonSeriesMarker extends OptionsObject {
  external factory PolygonSeriesMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external PolygonSeriesMarkerStates get states;
  external void set states (PolygonSeriesMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PolygonSeriesMarkerStates extends OptionsObject {
  external factory PolygonSeriesMarkerStates ();
  /**
   * null
   */
  external PolygonSeriesMarkerStatesHover get hover;
  external void set hover (PolygonSeriesMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external PolygonSeriesMarkerStatesSelect get select;
  external void set select (PolygonSeriesMarkerStatesSelect a_select);
}
@JS()
@anonymous
class PolygonSeriesMarkerStatesHover extends OptionsObject {
  external factory PolygonSeriesMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class PolygonSeriesMarkerStatesSelect extends OptionsObject {
  external factory PolygonSeriesMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class PolygonSeriesPoint extends OptionsObject {
  external factory PolygonSeriesPoint ();
  /**
   * Events for each single point
   */
  external PolygonSeriesPointEvents get events;
  external void set events (PolygonSeriesPointEvents a_events);
}
@JS()
@anonymous
class PolygonSeriesPointEvents extends OptionsObject {
  external factory PolygonSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PolygonSeriesStates extends OptionsObject {
  external factory PolygonSeriesStates ();
  /**
   * Options for the hovered series
   */
  external PolygonSeriesStatesHover get hover;
  external void set hover (PolygonSeriesStatesHover a_hover);
}
@JS()
@anonymous
class PolygonSeriesStatesHover extends OptionsObject {
  external factory PolygonSeriesStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PolygonSeriesStatesHoverMarker get marker;
  external void set marker (PolygonSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PolygonSeriesStatesHoverHalo extends OptionsObject {
  external factory PolygonSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PolygonSeriesStatesHoverMarker extends OptionsObject {
  external factory PolygonSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PolygonSeriesTooltip extends OptionsObject {
  external factory PolygonSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PolygonSeriesZones extends OptionsObject {
  external factory PolygonSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class PyramidSeries extends Series {
  external factory PyramidSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * The color of the border surrounding each slice. When <code>null</code>, the border takes the same color as the slice fill. This can be used together with a <code>borderWidth</code> to fill drawing gaps created by antialiazing artefacts in borderless pies.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * <p>The width of the border surrounding each slice.</p>



      <p>When setting the border width to 0, there may be small gaps between the slices due to SVG antialiasing artefacts. To work around this, keep the border width at 0.5 or 1, but set the <code>borderColor</code> to <code>null</code> instead.</p>
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The center of the series. By default, it is centered in the middle of the plot area, so it fills the plot area height.
   */
  external dynamic get center;
  external void set center (dynamic a_center);
  /**
   * A series specific or series type specific color set to use instead of the global <a href="#colors">colors</a>.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * An array of data points for the series. For the <code>pyramid</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<pyramid>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      y: 6,
      name: "Point2",
      color: "#00FF00"
      }, {
      y: 7,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external PyramidSeriesDataLabels get dataLabels;
  external void set dataLabels (PyramidSeriesDataLabels a_dataLabels);
  /**
   * The thickness of a 3D pie. Requires <code>highcharts-3d.js</code>
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external PyramidSeriesEvents get events;
  external void set events (PyramidSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * The height of the funnel or pyramid. If it is a number it defines the pixel height, if it is a percentage string it is the percentage of the plot area height.
   */
  external dynamic get height;
  external void set height (dynamic a_height);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The minimum size for a pie in response to auto margins. The pie will try to shrink to make room for data labels in side the plot area, but only to this size.
   */
  external num get minSize;
  external void set minSize (num a_minSize);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Properties for each single point
   */
  external PyramidSeriesPoint get point;
  external void set point (PyramidSeriesPoint a_point);
  /**
   * The pyramid is reversed by default, as opposed to the funnel, which shares the layout engine, and is not reversed.
   */
  external bool get reversed;
  external void set reversed (bool a_reversed);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * Whether to display this particular series or series type in the legend. Since 2.1, pies are not shown in the legend by default.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * If a point is sliced, moved out from the center, how many pixels should  it be moved?.
   */
  external num get slicedOffset;
  external void set slicedOffset (num a_slicedOffset);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * The width of the funnel compared to the width of the plot area, or the pixel width if it is a number.
   */
  external dynamic get width;
  external void set width (dynamic a_width);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class PyramidSeriesData extends OptionsObject {
  external factory PyramidSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The sequential index of the data point in the legend.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class PyramidSeriesDataEvents extends OptionsObject {
  external factory PyramidSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PyramidSeriesDataLabels extends OptionsObject {
  external factory PyramidSeriesDataLabels ();
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * The color of the line connecting the data label to the pie slice. The default color is the same as the point's color.
   */
  external String get connectorColor;
  external void set connectorColor (String a_connectorColor);
  /**
   * The distance from the data label to the connector.
   */
  external num get connectorPadding;
  external void set connectorPadding (num a_connectorPadding);
  /**
   * The width of the line connecting the data label to the pie slice.
   */
  external num get connectorWidth;
  external void set connectorWidth (num a_connectorWidth);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * The distance of the data label from the pie's edge. Negative numbers put the data label on top of the pie slices. Connectors are only shown for data labels outside the pie.
   */
  external num get distance;
  external void set distance (num a_distance);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Whether to render the connector as a soft arc or a line with sharp break.
   */
  external bool get softConnector;
  external void set softConnector (bool a_softConnector);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class PyramidSeriesEvents extends OptionsObject {
  external factory PyramidSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the point name in the legend is clicked. One parameter, event, is passed to the function. The state of the checkbox is found by event.checked. The checked item is found by event.item. Return false to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Not applicable to pies, as the legend item is per point. See point.events.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class PyramidSeriesPoint extends OptionsObject {
  external factory PyramidSeriesPoint ();
  /**
   * Events for each single point
   */
  external PyramidSeriesPointEvents get events;
  external void set events (PyramidSeriesPointEvents a_events);
}
@JS()
@anonymous
class PyramidSeriesPointEvents extends OptionsObject {
  external factory PyramidSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the legend item belonging to the pie point (slice) is clicked.  The <code>this</code> keyword refers to the  point itself. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. The default action is to toggle the visibility of the point. This can be prevented by calling  <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class PyramidSeriesStates extends OptionsObject {
  external factory PyramidSeriesStates ();
  /**
   * Options for the hovered series
   */
  external PyramidSeriesStatesHover get hover;
  external void set hover (PyramidSeriesStatesHover a_hover);
}
@JS()
@anonymous
class PyramidSeriesStatesHover extends OptionsObject {
  external factory PyramidSeriesStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external PyramidSeriesStatesHoverMarker get marker;
  external void set marker (PyramidSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class PyramidSeriesStatesHoverHalo extends OptionsObject {
  external factory PyramidSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class PyramidSeriesStatesHoverMarker extends OptionsObject {
  external factory PyramidSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class PyramidSeriesTooltip extends OptionsObject {
  external factory PyramidSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class PyramidSeriesZones extends OptionsObject {
  external factory PyramidSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class ScatterSeries extends Series {
  external factory ScatterSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * An array of data points for the series. For the <code>scatter</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options. The <code>x</code> values will be automatically calculated,

      either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options. If the axis

      has categories, these will be used.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of arrays with 2 values. In this case, the values correspond to <code>x,y</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. <pre>data: [
      [0, 0],
      [1, 8],
      [2, 9]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<scatter>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      y: 2,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      y: 4,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external ScatterSeriesDataLabels get dataLabels;
  external void set dataLabels (ScatterSeriesDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external ScatterSeriesEvents get events;
  external void set events (ScatterSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external ScatterSeriesMarker get marker;
  external void set marker (ScatterSeriesMarker a_marker);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external ScatterSeriesPoint get point;
  external void set point (ScatterSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The threshold, also called zero level or base level. For line type series this is only used in conjunction with <a href="#plotOptions.series.negativeColor">negativeColor</a>.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class ScatterSeriesData extends OptionsObject {
  external factory ScatterSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * null
   */
  external ScatterSeriesDataMarker get marker;
  external void set marker (ScatterSeriesDataMarker a_marker);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class ScatterSeriesDataEvents extends OptionsObject {
  external factory ScatterSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class ScatterSeriesDataMarker extends OptionsObject {
  external factory ScatterSeriesDataMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external ScatterSeriesDataMarkerStates get states;
  external void set states (ScatterSeriesDataMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class ScatterSeriesDataMarkerStates extends OptionsObject {
  external factory ScatterSeriesDataMarkerStates ();
  /**
   * Options for the hovered series
   */
  external ScatterSeriesDataMarkerStatesHover get hover;
  external void set hover (ScatterSeriesDataMarkerStatesHover a_hover);
}
@JS()
@anonymous
class ScatterSeriesDataMarkerStatesHover extends OptionsObject {
  external factory ScatterSeriesDataMarkerStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external ScatterSeriesDataMarkerStatesHoverMarker get marker;
  external void set marker (ScatterSeriesDataMarkerStatesHoverMarker a_marker);
}
@JS()
@anonymous
class ScatterSeriesDataMarkerStatesHoverHalo extends OptionsObject {
  external factory ScatterSeriesDataMarkerStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class ScatterSeriesDataMarkerStatesHoverMarker extends OptionsObject {
  external factory ScatterSeriesDataMarkerStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class ScatterSeriesDataLabels extends OptionsObject {
  external factory ScatterSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class ScatterSeriesEvents extends OptionsObject {
  external factory ScatterSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class ScatterSeriesMarker extends OptionsObject {
  external factory ScatterSeriesMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external ScatterSeriesMarkerStates get states;
  external void set states (ScatterSeriesMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class ScatterSeriesMarkerStates extends OptionsObject {
  external factory ScatterSeriesMarkerStates ();
  /**
   * null
   */
  external ScatterSeriesMarkerStatesHover get hover;
  external void set hover (ScatterSeriesMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external ScatterSeriesMarkerStatesSelect get select;
  external void set select (ScatterSeriesMarkerStatesSelect a_select);
}
@JS()
@anonymous
class ScatterSeriesMarkerStatesHover extends OptionsObject {
  external factory ScatterSeriesMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class ScatterSeriesMarkerStatesSelect extends OptionsObject {
  external factory ScatterSeriesMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class ScatterSeriesPoint extends OptionsObject {
  external factory ScatterSeriesPoint ();
  /**
   * Events for each single point
   */
  external ScatterSeriesPointEvents get events;
  external void set events (ScatterSeriesPointEvents a_events);
}
@JS()
@anonymous
class ScatterSeriesPointEvents extends OptionsObject {
  external factory ScatterSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class ScatterSeriesStates extends OptionsObject {
  external factory ScatterSeriesStates ();
  /**
   * Options for the hovered series
   */
  external ScatterSeriesStatesHover get hover;
  external void set hover (ScatterSeriesStatesHover a_hover);
}
@JS()
@anonymous
class ScatterSeriesStatesHover extends OptionsObject {
  external factory ScatterSeriesStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * The width of the line connecting the data points.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external ScatterSeriesStatesHoverMarker get marker;
  external void set marker (ScatterSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class ScatterSeriesStatesHoverHalo extends OptionsObject {
  external factory ScatterSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class ScatterSeriesStatesHoverMarker extends OptionsObject {
  external factory ScatterSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class ScatterSeriesTooltip extends OptionsObject {
  external factory ScatterSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class ScatterSeriesZones extends OptionsObject {
  external factory ScatterSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class SolidgaugeSeries extends Series {
  external factory SolidgaugeSeries ();
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * An array of data points for the series. For the <code>solidgauge</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<solidgauge>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      y: 5,
      name: "Point2",
      color: "#00FF00"
      }, {
      y: 7,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol><p>The typical gauge only contains a single data value.</p>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * Data labels for the gauge. For gauges, the data labels are enabled by default and shown in a bordered box below the point.
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external SolidgaugeSeriesEvents get events;
  external void set events (SolidgaugeSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * Whether the strokes of the solid gauge should be <code>round</code> or <code>square</code>.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Allow the dial to overshoot the end of the perimeter axis by this many degrees. Say if the gauge axis goes from 0 to 60, a value of 100, or 1000, will show 5 degrees beyond the end of the axis.
   */
  external num get overshoot;
  external void set overshoot (num a_overshoot);
  /**
   * Properties for each single point
   */
  external SolidgaugeSeriesPoint get point;
  external void set point (SolidgaugeSeriesPoint a_point);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. Defaults to false for gauge series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When this option is <code>true</code>, the dial will wrap around the axes. For instance, in a full-range gauge going from 0 to 360, a value of 400 will point to 40. When <code>wrap</code> is <code>false</code>, the dial stops at 360.
   */
  external bool get wrap;
  external void set wrap (bool a_wrap);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class SolidgaugeSeriesData extends OptionsObject {
  external factory SolidgaugeSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The inner radius of an individual point in a solid gauge. Can be given as a number (pixels) or percentage string.
   */
  external dynamic get innerRadius;
  external void set innerRadius (dynamic a_innerRadius);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The outer radius of an individual point in a solid gauge. Can be given as a number (pixels) or percentage string.
   */
  external dynamic get radius;
  external void set radius (dynamic a_radius);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class SolidgaugeSeriesDataEvents extends OptionsObject {
  external factory SolidgaugeSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class SolidgaugeSeriesDataLabels extends OptionsObject {
  external factory SolidgaugeSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the gauge's data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the gauge data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of the data label.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the center of the gauge.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. A value of 2 display them behind the dial.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class SolidgaugeSeriesEvents extends OptionsObject {
  external factory SolidgaugeSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class SolidgaugeSeriesPoint extends OptionsObject {
  external factory SolidgaugeSeriesPoint ();
  /**
   * Events for each single point
   */
  external SolidgaugeSeriesPointEvents get events;
  external void set events (SolidgaugeSeriesPointEvents a_events);
}
@JS()
@anonymous
class SolidgaugeSeriesPointEvents extends OptionsObject {
  external factory SolidgaugeSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class SolidgaugeSeriesStates extends OptionsObject {
  external factory SolidgaugeSeriesStates ();
  /**
   * Options for the hovered series
   */
  external SolidgaugeSeriesStatesHover get hover;
  external void set hover (SolidgaugeSeriesStatesHover a_hover);
}
@JS()
@anonymous
class SolidgaugeSeriesStatesHover extends OptionsObject {
  external factory SolidgaugeSeriesStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external SolidgaugeSeriesStatesHoverMarker get marker;
  external void set marker (SolidgaugeSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class SolidgaugeSeriesStatesHoverHalo extends OptionsObject {
  external factory SolidgaugeSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class SolidgaugeSeriesStatesHoverMarker extends OptionsObject {
  external factory SolidgaugeSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class SolidgaugeSeriesTooltip extends OptionsObject {
  external factory SolidgaugeSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class SolidgaugeSeriesZones extends OptionsObject {
  external factory SolidgaugeSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class SplineSeries extends Series {
  external factory SplineSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Polar charts only. Whether to connect the ends of a line series plot across the extremes.
   */
  external bool get connectEnds;
  external void set connectEnds (bool a_connectEnds);
  /**
   * Whether to connect a graph line across null points.
   */
  external bool get connectNulls;
  external void set connectNulls (bool a_connectNulls);
  /**
   * When the series contains less points than the crop threshold, all points are drawn,  event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.  .
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the graph. Applies only to series type having a graph, like <code>line</code>, <code>spline</code>, <code>area</code> and <code>scatter</code> in  case it has a <code>lineWidth</code>. The value for the <code>dashStyle</code> include:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * An array of data points for the series. For the <code>spline</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options. The <code>x</code> values will be automatically calculated,

      either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options. If the axis

      has categories, these will be used.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of arrays with 2 values. In this case, the values correspond to <code>x,y</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. <pre>data: [
      [0, 9],
      [1, 2],
      [2, 8]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<spline>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      y: 9,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      y: 0,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external SplineSeriesDataLabels get dataLabels;
  external void set dataLabels (SplineSeriesDataLabels a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external SplineSeriesEvents get events;
  external void set events (SplineSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The line cap used for line ends and line joins on the graph.
   */
  external String get linecap;
  external void set linecap (String a_linecap);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * null
   */
  external SplineSeriesMarker get marker;
  external void set marker (SplineSeriesMarker a_marker);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * The color for the parts of the graph or points that are below the <a href="#plotOptions.series.threshold">threshold</a>.
   */
  external dynamic get negativeColor;
  external void set negativeColor (dynamic a_negativeColor);
  /**
   * Properties for each single point
   */
  external SplineSeriesPoint get point;
  external void set point (SplineSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * This option allows grouping series in a stacked chart. The stack option can be a string  or a number or anything else, as long as the grouped series' stack options match each other.
   */
  external String get stack;
  external void set stack (String a_stack);
  /**
   * Whether to stack the values of each series on top of each other. Possible values are null to disable, "normal" to stack by value or "percent".
   */
  external String get stacking;
  external void set stacking (String a_stacking);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The threshold, also called zero level or base level. For line type series this is only used in conjunction with <a href="#plotOptions.series.negativeColor">negativeColor</a>.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class SplineSeriesData extends OptionsObject {
  external factory SplineSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * null
   */
  external SplineSeriesDataMarker get marker;
  external void set marker (SplineSeriesDataMarker a_marker);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class SplineSeriesDataEvents extends OptionsObject {
  external factory SplineSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class SplineSeriesDataMarker extends OptionsObject {
  external factory SplineSeriesDataMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external SplineSeriesDataMarkerStates get states;
  external void set states (SplineSeriesDataMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class SplineSeriesDataMarkerStates extends OptionsObject {
  external factory SplineSeriesDataMarkerStates ();
  /**
   * Options for the hovered series
   */
  external SplineSeriesDataMarkerStatesHover get hover;
  external void set hover (SplineSeriesDataMarkerStatesHover a_hover);
}
@JS()
@anonymous
class SplineSeriesDataMarkerStatesHover extends OptionsObject {
  external factory SplineSeriesDataMarkerStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external SplineSeriesDataMarkerStatesHoverMarker get marker;
  external void set marker (SplineSeriesDataMarkerStatesHoverMarker a_marker);
}
@JS()
@anonymous
class SplineSeriesDataMarkerStatesHoverHalo extends OptionsObject {
  external factory SplineSeriesDataMarkerStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class SplineSeriesDataMarkerStatesHoverMarker extends OptionsObject {
  external factory SplineSeriesDataMarkerStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class SplineSeriesDataLabels extends OptionsObject {
  external factory SplineSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class SplineSeriesEvents extends OptionsObject {
  external factory SplineSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class SplineSeriesMarker extends OptionsObject {
  external factory SplineSeriesMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * null
   */
  external SplineSeriesMarkerStates get states;
  external void set states (SplineSeriesMarkerStates a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class SplineSeriesMarkerStates extends OptionsObject {
  external factory SplineSeriesMarkerStates ();
  /**
   * null
   */
  external SplineSeriesMarkerStatesHover get hover;
  external void set hover (SplineSeriesMarkerStatesHover a_hover);
  /**
   * The appearance of the point marker when selected. In order to allow a point to be
      selected, set the <code>series.allowPointSelect</code> option to true.
   */
  external SplineSeriesMarkerStatesSelect get select;
  external void set select (SplineSeriesMarkerStatesSelect a_select);
}
@JS()
@anonymous
class SplineSeriesMarkerStatesHover extends OptionsObject {
  external factory SplineSeriesMarkerStatesHover ();
  /**
   * Enable or disable the point marker.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the marker in hover state.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for a hovered point.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * The radius of the point marker. In hover state, it defaults to the normal state's radius + 2 as per the <a href="#plotOptions.series.marker.states.hover.radiusPlus">radiusPlus</a> option.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   * The number of pixels to increase the radius of the hovered point.
   */
  external num get radiusPlus;
  external void set radiusPlus (num a_radiusPlus);
}
@JS()
@anonymous
class SplineSeriesMarkerStatesSelect extends OptionsObject {
  external factory SplineSeriesMarkerStatesSelect ();
  /**
   * Enable or disable visible feedback for selection.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker. In hover state, it defaults
      to the normal state's radius + 2.
   */
  external num get radius;
  external void set radius (num a_radius);
}
@JS()
@anonymous
class SplineSeriesPoint extends OptionsObject {
  external factory SplineSeriesPoint ();
  /**
   * Events for each single point
   */
  external SplineSeriesPointEvents get events;
  external void set events (SplineSeriesPointEvents a_events);
}
@JS()
@anonymous
class SplineSeriesPointEvents extends OptionsObject {
  external factory SplineSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class SplineSeriesStates extends OptionsObject {
  external factory SplineSeriesStates ();
  /**
   * Options for the hovered series
   */
  external SplineSeriesStatesHover get hover;
  external void set hover (SplineSeriesStatesHover a_hover);
}
@JS()
@anonymous
class SplineSeriesStatesHover extends OptionsObject {
  external factory SplineSeriesStatesHover ();
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
  /**
   * Pixel with of the graph line.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The additional line width for the graph of a hovered series.
   */
  external num get lineWidthPlus;
  external void set lineWidthPlus (num a_lineWidthPlus);
  /**
   * null
   */
  external SplineSeriesStatesHoverMarker get marker;
  external void set marker (SplineSeriesStatesHoverMarker a_marker);
}
@JS()
@anonymous
class SplineSeriesStatesHoverHalo extends OptionsObject {
  external factory SplineSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class SplineSeriesStatesHoverMarker extends OptionsObject {
  external factory SplineSeriesStatesHoverMarker ();
  /**
   * Enable or disable the point marker. If <code>null</code>, the markers are hidden when the data is dense, and shown for more widespread data points.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * The fill color of the point marker. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.
   */
  external num get height;
  external void set height (num a_height);
  /**
   * The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the point marker's outline.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * The radius of the point marker.
   */
  external num get radius;
  external void set radius (num a_radius);
  /**
   *
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * <p>A predefined shape or symbol for the marker. When null, the symbol is pulled from options.symbols. Other possible values are "circle", "square", "diamond", "triangle" and "triangle-down".</p>



      <p>Additionally, the URL to a graphic can be given on this form:  "url(graphic.png)". Note that for the image to be applied to exported charts, its URL needs to be accessible by the export server.</p>



      <p>Custom callbacks for symbol path generation can also be added to <code>Highcharts.SVGRenderer.prototype.symbols</code>. The callback is then used by its method name, as shown in the demo.</p>
   */
  external String get symbol;
  external void set symbol (String a_symbol);
  /**
   * Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.
   */
  external num get width;
  external void set width (num a_width);
}
@JS()
@anonymous
class SplineSeriesTooltip extends OptionsObject {
  external factory SplineSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class SplineSeriesZones extends OptionsObject {
  external factory SplineSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class TreemapSeries extends Series {
  external factory TreemapSeries ();
  /**
   * When enabled the user can click on a point which is a parent and zoom in on its children.
   */
  external bool get allowDrillToNode;
  external void set allowDrillToNode (bool a_allowDrillToNode);
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * Enabling this option will make the treemap alternate the drawing direction between vertical and horizontal.

      The next levels starting direction will always be the opposite of the previous.
   */
  external bool get alternateStartingDirection;
  external void set alternateStartingDirection (bool a_alternateStartingDirection);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border surrounding each tree map item.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The width of the border surrounding each column or bar.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The main color of the series. In heat maps this color is rarely used, as we mostly use the color to denote the value of each point. Unless options are set in the <a href="#colorAxis">colorAxis</a>, the default value is pulled from the <a href="#colors">options.colors</a> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * When the series contains less points than the crop threshold, all points are drawn, event if the points fall outside the visible plot area at the current zoom. The advantage of drawing all points (including markers and columns), is that animation is performed on updates. On the other hand, when the series contains more points than the crop threshold, the series data is cropped to only contain points that fall within the plot area. The advantage of cropping away invisible points is to increase performance on large series.
   */
  external num get cropThreshold;
  external void set cropThreshold (num a_cropThreshold);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * An array of data points for the series. For the <code>treemap</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>value</code> options.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<treemap>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      value: 7,
      name: "Point2",
      color: "#00FF00"
      }, {
      value: 2,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   *
   */
  external dynamic get dataLabels;
  external void set dataLabels (dynamic a_dataLabels);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external TreemapSeriesEvents get events;
  external void set events (TreemapSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * This option decides if the user can interact with the parent nodes or just the leaf nodes. When this option is undefined, it will be true by default. However when allowDrillToNode is true, then it will be false by default.
   */
  external bool get interactByLeaf;
  external void set interactByLeaf (bool a_interactByLeaf);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * This option decides which algorithm is used for setting position and dimensions of the points. Can be one of <code>sliceAndDice</code>, <code>stripes</code>, <code>squarified</code> or <code>strip</code>.
   */
  external String get layoutAlgorithm;
  external void set layoutAlgorithm (String a_layoutAlgorithm);
  /**
   * Defines which direction the layout algorithm will start drawing. Possible values are "vertical" and "horizontal".
   */
  external String get layoutStartingDirection;
  external void set layoutStartingDirection (String a_layoutStartingDirection);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * Used together with the levels and allowDrillToNode options. When set to false the first level visible when drilling is considered to be level one. Otherwise the level will be the same as the tree structure.
   */
  external bool get levelIsConstant;
  external void set levelIsConstant (bool a_levelIsConstant);
  /**
   * Set options on specific levels. Takes precedence over series options, but not point options.
   */
  external List<JsObject> get levels;
  external void set levels (List<JsObject> a_levels);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Properties for each single point
   */
  external TreemapSeriesPoint get point;
  external void set point (TreemapSeriesPoint a_point);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this series type or specific series item in the legend.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * The sort index of the point inside the treemap level.
   */
  external num get sortIndex;
  external void set sortIndex (num a_sortIndex);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   *
   */
  external dynamic get tooltip;
  external void set tooltip (dynamic a_tooltip);
  /**
   * When a series contains a data array that is longer than this, only one dimensional arrays of numbers,
      or two dimensional arrays with x and y values are allowed. Also, only the first
      point is tested, and the rest are assumed to be the same format. This saves expensive
      data checking and indexing in long series. Set it to <code>0</code> disable.
   */
  external num get turboThreshold;
  external void set turboThreshold (num a_turboThreshold);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class TreemapSeriesData extends OptionsObject {
  external factory TreemapSeriesData ();
  /**
   * The color of the point. In heat maps the point color is rarely set explicitly, as we use the color to denote the <code>value</code>. Options for this are set in the <a href="#colorAxis">colorAxis</a> configuration.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Serves a purpose only if a colorAxis object is defined in the chart options. This value will decide which color the point gets from the scale of the colorAxis.
   */
  external num get colorValue;
  external void set colorValue (num a_colorValue);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Only for treemap. Use this option to build a tree structure. The value should be the id of the point which is the parent. If no points has a matching id, or this option is undefined, then the parent will be set to the root.
   */
  external String get parent;
  external void set parent (String a_parent);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The value of the point, resulting in a relative area of the point in the treemap.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class TreemapSeriesDataEvents extends OptionsObject {
  external factory TreemapSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class TreemapSeriesDataLabels extends OptionsObject {
  external factory TreemapSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * Whether to align the data label inside the box or to the actual value point.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of top, middle or bottom. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class TreemapSeriesEvents extends OptionsObject {
  external factory TreemapSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class TreemapSeriesLevels extends OptionsObject {
  external factory TreemapSeriesLevels ();
  /**
   * Can set borderColor on all points which lies on the same level.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * Set the dash style of the border of all the point which lies on the level.

      See <a href"#plotOptions.scatter.dashStyle">plotOptions.scatter.dashStyle</a> for possible options.
   */
  external String get borderDashStyle;
  external void set borderDashStyle (String a_borderDashStyle);
  /**
   * Can set the borderWidth on all points which lies on the same level.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * Can set a color on all points which lies on the same level.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Can set the options of dataLabels on each point which lies on the level.

      <a href="#plotOptions.treemap.dataLabels">plotOptions.treemap.dataLabels</a> for possible values.
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * Can set the layoutAlgorithm option on a specific level.
   */
  external String get layoutAlgorithm;
  external void set layoutAlgorithm (String a_layoutAlgorithm);
  /**
   * Can set the layoutStartingDirection option on a specific level.
   */
  external String get layoutStartingDirection;
  external void set layoutStartingDirection (String a_layoutStartingDirection);
  /**
   * Decides which level takes effect from the options set in the levels object.
   */
  external num get level;
  external void set level (num a_level);
}
@JS()
@anonymous
class TreemapSeriesPoint extends OptionsObject {
  external factory TreemapSeriesPoint ();
  /**
   * Events for each single point
   */
  external TreemapSeriesPointEvents get events;
  external void set events (TreemapSeriesPointEvents a_events);
}
@JS()
@anonymous
class TreemapSeriesPointEvents extends OptionsObject {
  external factory TreemapSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class TreemapSeriesStates extends OptionsObject {
  external factory TreemapSeriesStates ();
  /**
   * Options for the hovered series
   */
  external TreemapSeriesStatesHover get hover;
  external void set hover (TreemapSeriesStatesHover a_hover);
}
@JS()
@anonymous
class TreemapSeriesStatesHover extends OptionsObject {
  external factory TreemapSeriesStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class TreemapSeriesStatesHoverHalo extends OptionsObject {
  external factory TreemapSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class TreemapSeriesTooltip extends OptionsObject {
  external factory TreemapSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables	are point.key, series.name, series.color and other members from the point and series objects. The point.key variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the point.key date format can be set using tooltip.xDateFormat.
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore, point.y can be extended by the tooltip.yPrefix and tooltip.ySuffix variables. This can also be overridden for each series, which makes it a good hook for displaying units.
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class TreemapSeriesZones extends OptionsObject {
  external factory TreemapSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class WaterfallSeries extends Series {
  external factory WaterfallSeries ();
  /**
   * Allow this series' points to be selected by clicking on the markers, bars or pie slices.
   */
  external bool get allowPointSelect;
  external void set allowPointSelect (bool a_allowPointSelect);
  /**
   * <p>Enable or disable the initial animation when a series is displayed. The animation can also be set as a configuration object. Please note that this option only applies to the initial animation of the series itself. For other animations, see <a href="#chart.animation">chart.animation</a> and the animation parameter under the API methods.		The following properties are supported:</p>

      <dl>

      <dt>duration</dt>

      <dd>The duration of the animation in milliseconds.</dd>

      <dt>easing</dt>

      <dd>A string reference to an easing function set on the <code>Math</code> object. See <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/">the easing demo</a>.</dd>

      </dl>

      <p>

      Due to poor performance, animation is disabled in old IE browsers for column charts and polar charts.</p>
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The color of the border of each waterfall column.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The corner radius of the border surrounding each column or bar.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The width of the border surrounding each column or bar.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The main color or the series. In line type series it applies to the line and the point markers unless otherwise specified. In bar type series it applies to the bars unless a color is specified per point. The default value is pulled from the  <code>options.colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * When using automatic point colors pulled from the <code>options.colors</code>
      collection, this option determines whether the chart should receive
      one color per series or one color per point.
   */
  external bool get colorByPoint;
  external void set colorByPoint (bool a_colorByPoint);
  /**
   * A series specific or series type specific color set to apply instead of the global <a href="#colors">colors</a> when <a href="#plotOptions.column.colorByPoint">colorByPoint</a> is true.
   */
  external List<String> get colors;
  external void set colors (List<String> a_colors);
  /**
   * You can set the cursor to "pointer" if you have click events attached to  the series, to signal to the user that the points and lines can be clicked.
   */
  external String get cursor;
  external void set cursor (String a_cursor);
  /**
   * A name for the dash style to use for the line connecting the columns of the waterfall series. Possible values:

      <ul>

      <li>Solid</li>

      <li>ShortDash</li>

      <li>ShortDot</li>

      <li>ShortDashDot</li>

      <li>ShortDashDotDot</li>

      <li>Dot</li>

      <li>Dash</li>

      <li>LongDash</li>

      <li>DashDot</li>

      <li>LongDashDot</li>

      <li>LongDashDotDot</li>

      </ul>.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * An array of data points for the series. For the <code>waterfall</code> series type, points can be given in the following ways:

      <ol>

      <li>An array of numerical values. In this case, the numerical values will

      be interpreted as <code>y</code> options. The <code>x</code> values will be automatically calculated,

      either starting at 0 and incremented by 1, or from <code>pointStart</code>

      and <code>pointInterval</code> given in the series options. If the axis

      has categories, these will be used.  Example:

      <pre>data: [0, 5, 3, 5]</pre>

      </li>

      <li><p>An array of arrays with 2 values. In this case, the values correspond to <code>x,y</code>. If the first value is a string, it is

      applied as the name of the point, and the <code>x</code> value is inferred. <pre>data: [
      [0, 7],
      [1, 8],
      [2, 3]
      ]</pre></li>





      <li><p>An array of objects with named values. The objects are

      point configuration objects as seen below. If the total number of data points exceeds the series' <a href='#series<waterfall>.turboThreshold'>turboThreshold</a>, this option is not available.</p>



      <pre>data: [{
      x: 1,
      y: 8,
      name: "Point2",
      color: "#00FF00"
      }, {
      x: 1,
      y: 8,
      name: "Point1",
      color: "#FF00FF"
      }]</pre></li>

      </ol>
   */
  external dynamic get data;
  external void set data (dynamic a_data);
  /**
   * null
   */
  external WaterfallSeriesDataLabels get dataLabels;
  external void set dataLabels (WaterfallSeriesDataLabels a_dataLabels);
  /**
   * Depth of the columns in a 3D column chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get depth;
  external void set depth (num a_depth);
  /**
   * 3D columns only. The color of the edges. Similar to <code>borderColor</code>, except it defaults to the same color as the column.
   */
  external dynamic get edgeColor;
  external void set edgeColor (dynamic a_edgeColor);
  /**
   * 3D columns only. The width of the colored edges.
   */
  external num get edgeWidth;
  external void set edgeWidth (num a_edgeWidth);
  /**
   * Enable or disable the mouse tracking for a specific series. This includes point tooltips and click events on graphs and points. For large datasets it improves performance.
   */
  external bool get enableMouseTracking;
  external void set enableMouseTracking (bool a_enableMouseTracking);
  /**
   * null
   */
  external WaterfallSeriesEvents get events;
  external void set events (WaterfallSeriesEvents a_events);
  /**
   * Whether to use the Y extremes of the total chart width or only the zoomed area when zooming in on parts of the X axis. By default, the Y axis adjusts to the min and max of the visible data. Cartesian series only.
   */
  external bool get getExtremesFromAll;
  external void set getExtremesFromAll (bool a_getExtremesFromAll);
  /**
   * Padding between each value groups, in x axis units.
   */
  external num get groupPadding;
  external void set groupPadding (num a_groupPadding);
  /**
   * The spacing between columns on the Z Axis in a 3D chart. Requires <code>highcharts-3d.js</code>.
   */
  external num get groupZPadding;
  external void set groupZPadding (num a_groupZPadding);
  /**
   * Whether to group non-stacked columns or to let them render independent of each other. Non-grouped columns will be laid out individually and overlap each other.
   */
  external bool get grouping;
  external void set grouping (bool a_grouping);
  /**
   * An id for the series. This can be used after render time to get a pointer to the series object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The index of the series in the chart, affecting the internal index in the <code>chart.series</code> array, the visible Z index as well as the order in the legend.
   */
  external num get index;
  external void set index (num a_index);
  /**
   * An array specifying which option maps to which key in the data point array. This makes it convenient to work with unstructured data arrays from different sources.
   */
  external List<String> get keys;
  external void set keys (List<String> a_keys);
  /**
   * The sequential index of the series in the legend.  <div class="demo">Try it:  	<a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/series/legendindex/" target="_blank">Legend in opposite order</a> </div>.
   */
  external num get legendIndex;
  external void set legendIndex (num a_legendIndex);
  /**
   * The color of the line that connects columns in a waterfall series.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The <a href="#series.id">id</a> of another series to link to. Additionally, the value can be ":previous" to link to the previous series. When two series are linked, only the first one appears in the legend. Toggling the visibility of this also toggles the linked series.
   */
  external String get linkedTo;
  external void set linkedTo (String a_linkedTo);
  /**
   * The maximum allowed pixel width for a column, translated to the height of a bar in a bar chart. This prevents the columns from becoming too wide when there is a small number of points in the chart.
   */
  external num get maxPointWidth;
  external void set maxPointWidth (num a_maxPointWidth);
  /**
   * The minimal height for a column or width for a bar. By default, 0 values are not shown. To visualize a 0 (or close to zero) point, set the minimal point length to a  pixel value like 3. In stacked column charts, minPointLength might not be respected for tightly packed values.
   */
  external num get minPointLength;
  external void set minPointLength (num a_minPointLength);
  /**
   * The name of the series as shown in the legend, tooltip etc.
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Properties for each single point
   */
  external WaterfallSeriesPoint get point;
  external void set point (WaterfallSeriesPoint a_point);
  /**
   * <p>If no x values are given for the points in a series, pointInterval defines

      the interval of the x values. For example, if a series contains one value

      every decade starting from year 0, set pointInterval to 10.</p>

      <p>Since Highcharts 4.1, it can be combined with <code>pointIntervalUnit</code> to draw irregular intervals.</p>
   */
  external num get pointInterval;
  external void set pointInterval (num a_pointInterval);
  /**
   * On datetime series, this allows for setting the <a href="plotOptions.series.pointInterval">pointInterval</a> to the two irregular time units, <code>month</code> and <code>year</code>. Combine it with <code>pointInterval</code> to draw quarters, 6 months, 10 years etc.
   */
  external String get pointIntervalUnit;
  external void set pointIntervalUnit (String a_pointIntervalUnit);
  /**
   * Padding between each column or bar, in x axis units.
   */
  external num get pointPadding;
  external void set pointPadding (num a_pointPadding);
  /**
   * <p>Possible values: <code>null</code>, <code>"on"</code>, <code>"between"</code>.</p>

      <p>In a column chart, when pointPlacement is <code>"on"</code>, the point will not create any padding of the X axis. In a polar column chart this means that the first column points directly north. If the pointPlacement is <code>"between"</code>, the columns will be laid out between ticks. This is useful for example for visualising an amount between two points in time or in a certain sector of a polar chart.</p>

      <p>Since Highcharts 3.0.2, the point placement can also be numeric, where 0 is on the axis value, -0.5 is between this value and the previous, and 0.5 is between this value and the next. Unlike the textual options, numeric point placement options won't affect axis padding.</p>

      <p>Note that pointPlacement needs a <a href="#plotOptions.series.pointRange">pointRange</a> to work. For column series this is computed, but for line-type series it needs to be set.</p>

      <p>Defaults to <code>null</code> in cartesian charts, <code>"between"</code> in polar charts.
   */
  external dynamic get pointPlacement;
  external void set pointPlacement (dynamic a_pointPlacement);
  /**
   * The X axis range that each point is valid for. This determines the width of the column. On a categorized axis, the range will be 1 by default (one category unit). On linear and datetime axes, the range will be computed as the distance between the two closest data points.
   */
  external num get pointRange;
  external void set pointRange (num a_pointRange);
  /**
   * If no x values are given for the points in a series, pointStart defines on what value to start. For example, if a series contains one yearly value starting from 1945, set pointStart to 1945.
   */
  external num get pointStart;
  external void set pointStart (num a_pointStart);
  /**
   * A pixel value specifying a fixed width for each column or bar. When <code>null</code>, the width is calculated from the <code>pointPadding</code> and <code>groupPadding</code>.
   */
  external num get pointWidth;
  external void set pointWidth (num a_pointWidth);
  /**
   * Whether to select the series initially. If <code>showCheckbox</code> is true, the checkbox next to the series name will be checked for a selected series.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * Whether to apply a drop shadow to the graph line. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * If true, a checkbox is displayed next to the legend item to allow selecting the series. The state of the checkbox is determined by the <code>selected</code> option.
   */
  external bool get showCheckbox;
  external void set showCheckbox (bool a_showCheckbox);
  /**
   * Whether to display this particular series or series type in the legend. The default value is <code>true</code> for standalone series, <code>false</code> for linked series.
   */
  external bool get showInLegend;
  external void set showInLegend (bool a_showInLegend);
  /**
   * <p>When this is true, the series will not cause the Y axis to cross the zero plane (or <a href="#plotOptions.series.threshold">threshold</a> option) unless the data actually crosses the plane.</p>



      <p>For example, if <code>softThreshold</code> is <code>false</code>, a series of 0, 1, 2, 3 will make the Y axis show negative values according to the <code>minPadding</code> option. If <code>softThreshold</code> is <code>true</code>, the Y axis starts at 0.</p>
   */
  external bool get softThreshold;
  external void set softThreshold (bool a_softThreshold);
  /**
   * This option allows grouping series in a stacked chart. The stack option can be a string  or a number or anything else, as long as the grouped series' stack options match each other.
   */
  external String get stack;
  external void set stack (String a_stack);
  /**
   * A wrapper object for all the series options in specific states.
   */
  external dynamic get states;
  external void set states (dynamic a_states);
  /**
   * Sticky tracking of mouse events. When true, the <code>mouseOut</code> event
      on a series isn't triggered until the mouse moves over another series, or out
      of the plot area. When false, the <code>mouseOut</code> event on a series is
      triggered when the mouse leaves the area around the series' graph or markers.
      This also implies the tooltip. When <code>stickyTracking</code> is false and <code>tooltip.shared</code> is false, the
      tooltip will be hidden when moving the mouse between series. Defaults to true for line and area type series, but to false for columns, pies etc.
   */
  external bool get stickyTracking;
  external void set stickyTracking (bool a_stickyTracking);
  /**
   * The Y axis value to serve as the base for the columns, for distinguishing between values above and below a threshold. If <code>null</code>, the columns extend from the padding Y axis minimum.
   */
  external num get threshold;
  external void set threshold (num a_threshold);
  /**
   * A configuration object for the tooltip rendering of each single series. Properties are inherited from <a href="#tooltip">tooltip</a>, but only the following properties can be defined on a series level.
   */
  external JsObject get tooltip;
  external void set tooltip (JsObject a_tooltip);
  /**
   * The type of series. Can be one of <code>area</code>, <code>areaspline</code>,
      <code>bar</code>, <code>column</code>, <code>line</code>, <code>pie</code>,
      <code>scatter</code> or <code>spline</code>. From version 2.3, <code>arearange</code>, <code>areasplinerange</code> and <code>columnrange</code> are supported with the highcharts-more.js component.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * The color used specifically for positive point columns. When not specified, the general series color is used.
   */
  external dynamic get upColor;
  external void set upColor (dynamic a_upColor);
  /**
   * Set the initial visibility of the series.
   */
  external bool get visible;
  external void set visible (bool a_visible);
  /**
   * When using dual or multiple x axes, this number defines which xAxis the particular series is connected to. It refers to either the <a href="#xAxis.id">axis id</a> or the index of the axis in the xAxis array, with 0 being the first.
   */
  external dynamic get xAxis;
  external void set xAxis (dynamic a_xAxis);
  /**
   * When using dual or multiple y axes, this number defines which yAxis the particular series is connected to. It refers to either the <a href="#yAxis.id">axis id</a> or the index of the axis in the yAxis array, with 0 being the first.
   */
  external dynamic get yAxis;
  external void set yAxis (dynamic a_yAxis);
  /**
   * Define the visual z index of the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
  /**
   * Defines the Axis on which the zones are applied.
   */
  external String get zoneAxis;
  external void set zoneAxis (String a_zoneAxis);
  /**
   * An array defining zones within a series. Zones can be applied to the X axis, Y axis or Z axis for bubbles, according to the <code>zoneAxis</code> option.
   */
  external List get zones;
  external void set zones (List a_zones);
}
@JS()
@anonymous
class WaterfallSeriesData extends OptionsObject {
  external factory WaterfallSeriesData ();
  /**
   * Individual color for the point. By default the color is pulled from the global <code>colors</code> array.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Individual data label for each point. The options are the same as the ones for  <a class="internal" href="#plotOptions.series.dataLabels">plotOptions.series.dataLabels</a>
   */
  external JsObject get dataLabels;
  external void set dataLabels (JsObject a_dataLabels);
  /**
   * The <code>id</code> of a series in the <a href="#drilldown.series">drilldown.series</a> array to use for a drilldown for this point.
   */
  external String get drilldown;
  external void set drilldown (String a_drilldown);
  /**
   * Individual point events
   */
  external dynamic get events;
  external void set events (dynamic a_events);
  /**
   * An id for the point. This can be used after render time to get a pointer to the point object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * When this property is true, the points acts as a summary column for the values added or substracted since the last intermediate sum, or since the start of the series. The <code>y</code> value is ignored.
   */
  external bool get isIntermediateSum;
  external void set isIntermediateSum (bool a_isIntermediateSum);
  /**
   * When this property is true, the point display the total sum across the entire series. The <code>y</code> value is ignored.
   */
  external bool get isSum;
  external void set isSum (bool a_isSum);
  /**
   * <p>The name of the point as shown in the legend, tooltip, dataLabel etc.</p>



      <p>If the <a href="#xAxis.type">xAxis.type</a> is set to <code>category</code>, and no <a href="#xAxis.categories">categories</a> option exists, the category will be pulled from the <code>point.name</code> of the last series defined. For multiple series, best practice however is to define <code>xAxis.categories</code>.</p>
   */
  external String get name;
  external void set name (String a_name);
  /**
   * Whether the data point is selected initially.
   */
  external bool get selected;
  external void set selected (bool a_selected);
  /**
   * The x value of the point. For datetime axes, the X value is the timestamp in milliseconds since 1970.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y value of the point.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class WaterfallSeriesDataEvents extends OptionsObject {
  external factory WaterfallSeriesDataEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class WaterfallSeriesDataLabels extends OptionsObject {
  external factory WaterfallSeriesDataLabels ();
  /**
   * The alignment of the data label compared to the point.  If <code>right</code>, the right side of the label should be touching the point. For points with an extent, like columns, the alignments also dictates how to align it inside the box, as given with the <a href="#plotOptions.column.dataLabels.inside">inside</a> option. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Whether to allow data labels to overlap. To make the labels less sensitive for overlapping, the <a href="#plotOptions.series.dataLabels.padding">dataLabels.padding</a> can be set to 0.
   */
  external bool get allowOverlap;
  external void set allowOverlap (bool a_allowOverlap);
  /**
   * The background color or gradient for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The border color for the data label. Defaults to <code>undefined</code>.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The border radius in pixels for the data label.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The border width in pixels for the data label.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The text color for the data labels. Defaults to <code>null</code>.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * Whether to hide data labels that are outside the plot area. By default, the data label is moved inside the plot area according to the <a href="#plotOptions.series.dataLabels.overflow">overflow</a> option.
   */
  external bool get crop;
  external void set crop (bool a_crop);
  /**
   * Whether to defer displaying the data labels until the initial series animation has finished.
   */
  external bool get defer;
  external void set defer (bool a_defer);
  /**
   * Enable or disable the data labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the data label. Note that if a <code>format</code> is defined, the format takes precedence and the formatter is ignored. Available data are:

      <table>

      <tbody><tr>

      <td><code>this.percentage</code></td>

      <td>Stacked series and pies only. The point's percentage of the total.</td>

      </tr>

      <tr>

      <td><code>this.point</code></td>

      <td>The point object. The point name, if defined, is available

      through <code>this.point.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.series</code>:</td>

      <td>The series object. The series name is available

      through <code>this.series.name</code>.</td>

      </tr>

      <tr>

      <td><code>this.total</code></td>

      <td>Stacked series only. The total value at this point's x value.</td>

      </tr>

      <tr>

      <td><code>this.x</code>:</td>

      <td>The x value.</td>

      </tr>

      <tr>

      <td><code>this.y</code>:</td>

      <td>The y value.</td>

      </tr>

      </tbody></table>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * For points with an extent, like columns, whether to align the data label inside the box or to the actual value point. Defaults to <code>false</code> in most cases, <code>true</code> in stacked columns.
   */
  external bool get inside;
  external void set inside (bool a_inside);
  /**
   * How to handle data labels that flow outside the plot area. The default is <code>justify</code>, which aligns them inside the plot area. For columns and bars, this means it will be moved inside the bar. To display data labels outside the plot area, set <code>crop</code> to <code>false</code> and <code>overflow</code> to <code>"none"</code>.
   */
  external String get overflow;
  external void set overflow (String a_overflow);
  /**
   * When either the <code>borderWidth</code> or the <code>backgroundColor</code> is set, this		is the padding within the box.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Text rotation in degrees. Note that due to a more complex structure, backgrounds, borders and padding will be lost on a rotated data label.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * The shadow of the box. Works best with <code>borderWidth</code> or <code>backgroundColor</code>. Since 2.3 the shadow can be an object configuration containing <code>color</code>, <code>offsetX</code>, <code>offsetY</code>, <code>opacity</code> and <code>width</code>.
   */
  external dynamic get shadow;
  external void set shadow (dynamic a_shadow);
  /**
   * The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * Styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of a data label. Can be one of <code>top</code>, <code>middle</code> or <code>bottom</code>. The default value depends on the data, for instance in a column chart, the label is above positive values and below negative values.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the point.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the point.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index of the data labels. The default Z index puts it above the series. Use a Z index of 2 to display it behind the series.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class WaterfallSeriesEvents extends OptionsObject {
  external factory WaterfallSeriesEvents ();
  /**
   * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the series is displayed.
   */
  external Function get afterAnimate;
  external void set afterAnimate (Function a_afterAnimate);
  /**
   * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, <code>event</code>, is passed to the function. The state of the checkbox is found by <code>event.checked</code>. The checked item is found by <code>event.item</code>. Return <code>false</code> to prevent the default action which is to toggle the select state of the series.
   */
  external Function get checkboxClick;
  external void set checkboxClick (Function a_checkboxClick);
  /**
   * Fires when the series is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. Additionally, <code>event.point</code> holds a pointer to the nearest point on the graph.
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling <code>.hide()</code>.
   */
  external Function get hide;
  external void set hide (Function a_hide);
  /**
   * Fires when the legend item belonging to the series is clicked. One parameter, <code>event</code>, is passed to the function. The default action is to toggle the visibility of the series. This can be prevented by returning <code>false</code> or calling <code>event.preventDefault()</code>.
   */
  external Function get legendItemClick;
  external void set legendItemClick (Function a_legendItemClick);
  /**
   * Fires when the mouse leaves the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts. If the  <a class="internal" href="#plotOptions.series">stickyTracking</a> option is true, <code>mouseOut</code> doesn't happen before the mouse enters another graph or leaves the plot area.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the graph. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling <code>.show()</code>.
   */
  external Function get show;
  external void set show (Function a_show);
}
@JS()
@anonymous
class WaterfallSeriesPoint extends OptionsObject {
  external factory WaterfallSeriesPoint ();
  /**
   * Events for each single point
   */
  external WaterfallSeriesPointEvents get events;
  external void set events (WaterfallSeriesPointEvents a_events);
}
@JS()
@anonymous
class WaterfallSeriesPointEvents extends OptionsObject {
  external factory WaterfallSeriesPointEvents ();
  /**
   * <p></p>Fires when a point is clicked. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.<p></p> <p>If the <code>series.allowPointSelect</code> option is true, the default action for the point's click event is to toggle the point's select state. Returning <code>false</code> cancels this action.</p>
   */
  external Function get click;
  external void set click (Function a_click);
  /**
   * Fires when the mouse leaves the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOut;
  external void set mouseOut (Function a_mouseOut);
  /**
   * Fires when the mouse enters the area close to the point. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on  which library is used as the base for Highcharts.
   */
  external Function get mouseOver;
  external void set mouseOver (Function a_mouseOver);
  /**
   * Fires when the point is removed using the <code>.remove()</code> method. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get remove;
  external void set remove (Function a_remove);
  /**
   * Fires when the point is selected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get select;
  external void set select (Function a_select);
  /**
   * Fires when the point is unselected either programmatically or following a click on the point. One parameter, <code>event</code>, is passed to the function. Returning <code>false</code> cancels the operation.
   */
  external Function get unselect;
  external void set unselect (Function a_unselect);
  /**
   * Fires when the point is updated programmatically through the <code>.update()</code> method. One parameter, <code>event</code>, is passed to the function. The  new point options can be accessed through <code>event.options</code>. Returning <code>false</code> cancels the operation.
   */
  external Function get update;
  external void set update (Function a_update);
}
@JS()
@anonymous
class WaterfallSeriesStates extends OptionsObject {
  external factory WaterfallSeriesStates ();
  /**
   * Options for the hovered series
   */
  external WaterfallSeriesStatesHover get hover;
  external void set hover (WaterfallSeriesStatesHover a_hover);
}
@JS()
@anonymous
class WaterfallSeriesStatesHover extends OptionsObject {
  external factory WaterfallSeriesStatesHover ();
  /**
   * How much to brighten the point on interaction. Requires the main color to be defined in hex or rgb(a) format.
   */
  external num get brightness;
  external void set brightness (num a_brightness);
  /**
   * Enable separate styles for the hovered series to visualize that the user hovers either the series itself or the legend.			.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * Options for the halo appearing around the hovered point in line-type series as well as outside the hovered slice in pie charts. By default the halo is filled by the current point or series color with an opacity of 0.25. The halo can be disabled by setting the <code>halo</code> option to <code>false</code>.
   */
  external JsObject get halo;
  external void set halo (JsObject a_halo);
}
@JS()
@anonymous
class WaterfallSeriesStatesHoverHalo extends OptionsObject {
  external factory WaterfallSeriesStatesHoverHalo ();
  /**
   * A collection of SVG attributes to override the appearance of the halo, for example <code>fill</code>, <code>stroke</code> and <code>stroke-width</code>.
   */
  external JsObject get attributes;
  external void set attributes (JsObject a_attributes);
  /**
   * Opacity for the halo unless a specific fill is overridden using the <code>attributes</code> setting. Note that Highcharts is only able to apply opacity to colors of hex or rgb(a) formats.
   */
  external num get opacity;
  external void set opacity (num a_opacity);
  /**
   * The pixel size of the halo. For point markers this is the radius of the halo. For pie slices it is the width of the halo outside the slice. For bubbles it defaults to 5 and is the width of the halo outside the bubble.
   */
  external num get size;
  external void set size (num a_size);
}
@JS()
@anonymous
class WaterfallSeriesTooltip extends OptionsObject {
  external factory WaterfallSeriesTooltip ();
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class WaterfallSeriesZones extends OptionsObject {
  external factory WaterfallSeriesZones ();
  /**
   * Defines the color of the series.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * A name for the dash style to use for the graph.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Defines the fill color for the series (in area type series)
   */
  external dynamic get fillColor;
  external void set fillColor (dynamic a_fillColor);
  /**
   * The value up to where the zone extends, if undefined the zones stretches to the last value in the series.
   */
  external num get value;
  external void set value (num a_value);
}
@JS()
@anonymous
class Subtitle extends OptionsObject {
  external factory Subtitle ();
  /**
   * The horizontal alignment of the subtitle. Can be one of "left", "center" and "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * When the subtitle is floating, the plot area will not move to make space for it.
   */
  external bool get floating;
  external void set floating (bool a_floating);
  /**
   * CSS styles for the title. Exact positioning of the title can be achieved by changing the margin property, or by adding <code>position: "absolute"</code> and  left and top properties.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * The subtitle of the chart.
   */
  external String get text;
  external void set text (String a_text);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the text.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of the title. Can be one of "top", "middle" and "bottom". When a value is given, the title behaves as floating.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position of the subtitle relative to the alignment within chart.spacingLeft and chart.spacingRight.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position of the subtitle relative to the alignment within chart.spacingTop and chart.spacingBottom. By default the subtitle is laid out below the title unless the title is floating.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class Title extends OptionsObject {
  external factory Title ();
  /**
   * The horizontal alignment of the title. Can be one of "left", "center" and "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * When the title is floating, the plot area will not move to make space for it.
   */
  external bool get floating;
  external void set floating (bool a_floating);
  /**
   * The margin between the title and the plot area, or if a subtitle is present, the margin between the subtitle and the plot area.
   */
  external num get margin;
  external void set margin (num a_margin);
  /**
   * CSS styles for the title. Use this for font styling, but use <code>align</code>, <code>x</code> and <code>y</code> for text alignment.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * The title of the chart. To disable the title, set the <code>text</code> to <code>null</code>.
   */
  external String get text;
  external void set text (String a_text);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the text.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The vertical alignment of the title. Can be one of "top", "middle" and "bottom". When a value is given, the title behaves as floating.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position of the title relative to the alignment within chart.spacingLeft and chart.spacingRight.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position of the title relative to the alignment within <a href="#chart.spacingTop">chart.spacingTop</a> and <a href="#chart.spacingBottom">chart.spacingBottom</a>. By default it depends on the font size.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class Tooltip extends OptionsObject {
  external factory Tooltip ();
  /**
   * Enable or disable animation of the tooltip. In slow legacy IE browsers the animation is disabled by default.
   */
  external bool get animation;
  external void set animation (bool a_animation);
  /**
   * The background color or gradient for the tooltip.
   */
  external dynamic get backgroundColor;
  external void set backgroundColor (dynamic a_backgroundColor);
  /**
   * The color of the tooltip border. When <code>null</code>, the border takes the color of the corresponding series or point.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * The radius of the rounded border corners.
   */
  external num get borderRadius;
  external void set borderRadius (num a_borderRadius);
  /**
   * The pixel width of the tooltip border.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * Since 4.1, the crosshair definitions are moved to the Axis object in order for a better separation from the tooltip. See <a href="#xAxis.crosshair">xAxis.crosshair<a>.
   */
  external dynamic get crosshairs;
  external void set crosshairs (dynamic a_crosshairs);
  /**
   * <p>For series on a datetime axes, the date format in the tooltip's header will by default be guessed based on the closest data points. This member gives the default string representations used for each unit. For an overview of the replacement codes, see <a href="#Highcharts.dateFormat">dateFormat</a>.</p>



      <p>Defaults to:

      <pre>{

      millisecond:"%A, %b %e, %H:%M:%S.%L",

      second:"%A, %b %e, %H:%M:%S",

      minute:"%A, %b %e, %H:%M",

      hour:"%A, %b %e, %H:%M",

      day:"%A, %b %e, %Y",

      week:"Week from %A, %b %e, %Y",

      month:"%B %Y",

      year:"%Y"

      }</pre>

      </p>
   */
  external JsObject get date;
  external void set date (JsObject a_date);
  /**
   * Enable or disable the tooltip.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * <p>Whether the tooltip should follow the mouse as it moves across columns, pie slices and other point types with an extent. By default it behaves this way for scatter, bubble and pie series by override in the <code>plotOptions</code> for those series types. </p>

      <p>For touch moves to behave the same way, <a href="#tooltip.followTouchMove">followTouchMove</a> must be <code>true</code> also.</p>
   */
  external bool get followPointer;
  external void set followPointer (bool a_followPointer);
  /**
   * Whether the tooltip should follow the finger as it moves on a touch device. If <a href="#chart.zoomType">chart.zoomType</a> is set, it will override <code>followTouchMove</code>.
   */
  external bool get followTouchMove;
  external void set followTouchMove (bool a_followTouchMove);
  /**
   * A string to append to the tooltip format.
   */
  external String get footerFormat;
  external void set footerFormat (String a_footerFormat);
  /**
   * <p>Callback function to format the text of the tooltip. Return false to disable tooltip for a specific point on series.</p> <p>A subset of HTML is supported. The HTML of the tooltip is parsed and converted to SVG,  therefore this isn't a complete HTML renderer. The following tabs are supported:  <code>&lt;b&gt;</code>, <code>&lt;strong&gt;</code>, <code>&lt;i&gt;</code>, <code>&lt;em&gt;</code>, <code>&lt;br/&gt;</code>, <code>&lt;span&gt;</code>. Spans can be styled with a <code>style</code> attribute, but only text-related CSS that is  shared with SVG is handled. </p> <p>Since version 2.1 the tooltip can be shared between multiple series through  the <code>shared</code> option. The available data in the formatter differ a bit depending on whether the tooltip is shared or not. In a shared tooltip, all  properties except <code>x</code>, which is common for all points, are kept in  an array, <code>this.points</code>.</p>  <p>Available data are:</p> <dl> 	<dt>this.percentage (not shared) / this.points[i].percentage (shared)</dt> 	<dd>Stacked series and pies only. The point's percentage of the total.</dd> 	 	<dt>this.point (not shared) / this.points[i].point (shared)</dt> 	<dd>The point object. The point name, if defined, is available  through <code>this.point.name</code>.</dd> 	 	<dt>this.points</dt> 	<dd>In a shared tooltip, this is an array containing all other properties for each point.</dd> 	 	<dt>this.series (not shared) / this.points[i].series (shared)</dt> 	<dd>The series object. The series name is available  through <code>this.series.name</code>.</dd>  	<dt>this.total (not shared) / this.points[i].total (shared)</dt> 	<dd>Stacked series only. The total value at this point's x value.</dd> 	 	<dt>this.x</dt> 	<dd>The x value. This property is the same regardless of the tooltip being shared or not.</dd> 	 	<dt>this.y (not shared) / this.points[i].y (shared)</dt> 	<dd>The y value.</dd>  </dl>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * <p>The HTML of the tooltip header line. Variables are enclosed by curly brackets. Available variables			are <code>point.key</code>, <code>series.name</code>, <code>series.color</code> and other members from the <code>point</code> and <code>series</code> objects. The <code>point.key</code> variable contains the category name, x value or datetime string depending on the type of axis. For datetime axes, the <code>point.key</code> date format can be set using tooltip.xDateFormat.</p>


      <p>Defaults to <code>&lt;span style="font-size: 10px"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>
   */
  external String get headerFormat;
  external void set headerFormat (String a_headerFormat);
  /**
   * The number of milliseconds to wait until the tooltip is hidden when mouse out from a point or chart.
   */
  external num get hideDelay;
  external void set hideDelay (num a_hideDelay);
  /**
   * <p>The HTML of the point's line in the tooltip. Variables are enclosed by curly brackets. Available variables are point.x, point.y, series.name and series.color and other properties on the same form. Furthermore,  point.y can be extended by the <code>tooltip.valuePrefix</code> and <code>tooltip.valueSuffix</code> variables. This can also be overridden for each series, which makes it a good hook for displaying units.</p>
   */
  external String get pointFormat;
  external void set pointFormat (String a_pointFormat);
  /**
   * A callback function for formatting the HTML output for a single point in the tooltip. Like the <code>pointFormat</code> string, but with more flexibility.
   */
  external Function get pointFormatter;
  external void set pointFormatter (Function a_pointFormatter);
  /**
   * <p>A callback function to place the tooltip in a default position. The callback receives three parameters: <code>labelWidth</code>, <code>labelHeight</code> and <code>point</code>, where point contains values for <code>plotX</code> and <code>plotY</code> telling where the reference point is in the plot area. Add <code>chart.plotLeft</code> and <code>chart.plotTop</code> to get the full coordinates.</p>



      <p>The return should be an object containing x and y values, for example <code>{ x: 100, y: 100 }</code>.</p>
   */
  external Function get positioner;
  external void set positioner (Function a_positioner);
  /**
   * Whether to apply a drop shadow to the tooltip.
   */
  external bool get shadow;
  external void set shadow (bool a_shadow);
  /**
   * The name of a symbol to use for the border around the tooltip. In Highcharts 3.x and less, the shape was <code>square</code>.
   */
  external String get shape;
  external void set shape (String a_shape);
  /**
   * When the tooltip is shared, the entire plot area will capture mouse movement or touch events. Tooltip texts for series types with ordered data (not pie, scatter, flags etc) will be shown in a single bubble. This is recommended for single series charts and for tablet/mobile optimized charts.
   */
  external bool get shared;
  external void set shared (bool a_shared);
  /**
   * Proximity snap for graphs or single points. Does not apply to bars, columns and pie slices. It defaults to 10 for mouse-powered devices and 25 for touch  devices. Note that since Highcharts 4.1 the whole plot area by default captures pointer events in order to show the tooltip, so for tooltip.snap to make sense, <a href="#plotOptions.series.stickyTracking">stickyTracking</a> must be <code>false</code>.
   */
  external num get snap;
  external void set snap (num a_snap);
  /**
   * CSS styles for the tooltip. The tooltip can also be styled through the CSS

      class <code>.highcharts-tooltip</code>.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Use HTML to render the contents of the tooltip instead of SVG. Using HTML allows advanced formatting like tables and images in the tooltip. It is also recommended for rtl languages as it works around rtl bugs in early Firefox.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * How many decimals to show in each series' y value. This is overridable in each series' tooltip options object. The default is to preserve all decimals.
   */
  external num get valueDecimals;
  external void set valueDecimals (num a_valueDecimals);
  /**
   * A string to prepend to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valuePrefix;
  external void set valuePrefix (String a_valuePrefix);
  /**
   * A string to append to each series' y value. Overridable in each series' tooltip options object.
   */
  external String get valueSuffix;
  external void set valueSuffix (String a_valueSuffix);
  /**
   * The format for the date in the tooltip header if the X axis is a datetime axis. The default is a best guess based on the smallest distance between points in the chart.
   */
  external String get xDateFormat;
  external void set xDateFormat (String a_xDateFormat);
}
@JS()
@anonymous
class XAxis extends OptionsObject {
  external factory XAxis ();
  /**
   * Whether to allow decimals in this axis' ticks. When counting integers, like
      persons or hits on a web page, decimals must be avoided in the axis tick
      labels.
   */
  external bool get allowDecimals;
  external void set allowDecimals (bool a_allowDecimals);
  /**
   * When using an alternate grid color, a band is painted across the plot area between every other grid line.
   */
  external dynamic get alternateGridColor;
  external void set alternateGridColor (dynamic a_alternateGridColor);
  /**
   * An array defining breaks in the axis, the sections defined will be left out and all the points shifted closer to each other. Requires that the broken-axis.js module is loaded.
   */
  external List get breaks;
  external void set breaks (List a_breaks);
  /**
   * <p>If categories are present for the xAxis, names are used instead of numbers for that axis. Since Highcharts 3.0, categories can also be extracted by giving each point a <a href="#series.data">name</a> and setting axis <a href="#xAxis.type">type</a> to <code>category</code>. However, if you have multiple series, best practice remains defining the <code>categories</code> array.</p>



      <p>Example:

      <pre>categories: ['Apples', 'Bananas', 'Oranges']</pre>

      Defaults to <code>null</code>

      </p>
   */
  external List<String> get categories;
  external void set categories (List<String> a_categories);
  /**
   * The highest allowed value for automatically computed axis extremes.
   */
  external num get ceiling;
  external void set ceiling (num a_ceiling);
  /**
   * Configure a crosshair that follows either the mouse pointer or the hovered point.
   */
  external dynamic get crosshair;
  external void set crosshair (dynamic a_crosshair);
  /**
   * For a datetime axis, the scale will automatically adjust to the appropriate unit.
      This member gives the default string representations used for each unit. For an
      overview of the replacement codes, see dateFormat.
      Defaults to:

      <pre>{

      millisecond: '%H:%M:%S.%L',

      second: '%H:%M:%S',

      minute: '%H:%M',

      hour: '%H:%M',

      day: '%e. %b',

      week: '%e. %b',

      month: '%b \'%y',

      year: '%Y'

      }</pre>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * Whether to force the axis to end on a tick. Use this option with the <code>maxPadding</code> option to control the axis end.
   */
  external bool get endOnTick;
  external void set endOnTick (bool a_endOnTick);
  /**
   * Event handlers for the axis.
   */
  external XAxisEvents get events;
  external void set events (XAxisEvents a_events);
  /**
   * The lowest allowed value for automatically computed axis extremes.
   */
  external num get floor;
  external void set floor (num a_floor);
  /**
   * Color of the grid lines extending the ticks across the plot area.
   */
  external dynamic get gridLineColor;
  external void set gridLineColor (dynamic a_gridLineColor);
  /**
   * The dash or dot style of the grid lines. For possible values, see <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highslide-software/highcharts.com/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/">this demonstration</a>.
   */
  external String get gridLineDashStyle;
  external void set gridLineDashStyle (String a_gridLineDashStyle);
  /**
   * The width of the grid lines extending the ticks across the plot area.
   */
  external num get gridLineWidth;
  external void set gridLineWidth (num a_gridLineWidth);
  /**
   * The Z index of the grid lines.
   */
  external num get gridZIndex;
  external void set gridZIndex (num a_gridZIndex);
  /**
   * An id for the axis. This can be used after render time to get a pointer to the axis object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * The axis labels show the number or category for each tick.
   */
  external XAxisLabels get labels;
  external void set labels (XAxisLabels a_labels);
  /**
   * The color of the line marking the axis itself.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the line marking the axis itself.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * Index of another axis that this axis is linked to. When an axis is linked to a master axis, it will take the same extremes as the master, but as assigned by min or max or by setExtremes. It can be used to show additional info, or to ease reading the chart by duplicating the scales.
   */
  external num get linkedTo;
  external void set linkedTo (num a_linkedTo);
  /**
   * The maximum value of the axis. If <code>null</code>, the max value is automatically calculated. If the <code>endOnTick</code> option is true, the <code>max</code> value might be rounded up. The actual maximum value is also influenced by  <a class="internal" href="#chart">chart.alignTicks</a>.
   */
  external num get max;
  external void set max (num a_max);
  /**
   * Padding of the max value relative to the length of the axis. A padding of 0.05 will make a 100px axis 5px longer. This is useful when you don't want the highest data value to appear on the edge of the plot area. When the axis' <code>max</code> option is set or a max extreme is set using <code>axis.setExtremes()</code>, the maxPadding will be ignored.
   */
  external num get maxPadding;
  external void set maxPadding (num a_maxPadding);
  /**
   * Deprecated. Renamed to <code>minRange</code> as of Highcharts 2.2.
   */
  @deprecated
  external num get maxZoom;
  @deprecated
  external void set maxZoom (num a_maxZoom);
  /**
   * The minimum value of the axis. If <code>null</code> the min value is automatically calculated. If the <code>startOnTick</code> option is true, the <code>min</code> value might be rounded down.
   */
  external num get min;
  external void set min (num a_min);
  /**
   * Padding of the min value relative to the length of the axis. A padding of 0.05 will make a 100px axis 5px longer. This is useful when you don't want the lowest data value to appear on the edge of the plot area. When the axis' <code>min</code> option is set or a min extreme is set using <code>axis.setExtremes()</code>, the minPadding will be ignored.
   */
  external num get minPadding;
  external void set minPadding (num a_minPadding);
  /**
   * <p>The minimum range to display on this axis. The entire axis will not be allowed to span over a smaller interval than this. For example, for a datetime axis the main unit is milliseconds. If minRange is set to 3600000, you can't zoom in more than to one hour.</p>



      <p>The default minRange for the x axis is five times the smallest interval between any of the data points.</p>



      <p>On a logarithmic axis, the unit for the minimum range is the power. So a minRange of 	1 means that the axis can be zoomed to 10-100, 100-1000, 1000-10000 etc.</p>



      <p>Note that the <code>minPadding</code>, <code>maxPadding</code>, <code>startOnTick</code> and <code>endOnTick</code> settings also affect how the extremes of the axis are computed.</p>
   */
  external num get minRange;
  external void set minRange (num a_minRange);
  /**
   * The minimum tick interval allowed in axis values. For example on zooming in on an axis with daily data, this can be used to prevent the axis from showing hours. Defaults to the closest distance between two points on the axis.
   */
  external num get minTickInterval;
  external void set minTickInterval (num a_minTickInterval);
  /**
   * Color of the minor, secondary grid lines.
   */
  external dynamic get minorGridLineColor;
  external void set minorGridLineColor (dynamic a_minorGridLineColor);
  /**
   * The dash or dot style of the minor grid lines. For possible values, see <a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/">this demonstration</a>.
   */
  external String get minorGridLineDashStyle;
  external void set minorGridLineDashStyle (String a_minorGridLineDashStyle);
  /**
   * Width of the minor, secondary grid lines.
   */
  external num get minorGridLineWidth;
  external void set minorGridLineWidth (num a_minorGridLineWidth);
  /**
   * Color for the minor tick marks.
   */
  external dynamic get minorTickColor;
  external void set minorTickColor (dynamic a_minorTickColor);
  /**
   * <p>Tick interval in scale units for the minor ticks. On a linear axis, if <code>"auto"</code>,

      the minor tick interval is calculated as a fifth of the tickInterval. If

      <code>null</code>, minor ticks are not shown.</p>

      <p>On logarithmic axes, the unit is the power of the value. For example, setting

      the minorTickInterval to 1 puts one tick on each of 0.1, 1, 10, 100 etc. Setting

      the minorTickInterval to 0.1 produces 9 ticks between 1 and 10,

      10 and 100 etc. A minorTickInterval of "auto" on a log axis results in a best guess,

      attempting to enter approximately 5 minor ticks between each major tick.</p>



      <p>If user settings dictate minor ticks to become too dense, they don't make sense, and will be ignored to prevent performance problems.</a>



      <p>On axes using <a href="#xAxis.categories">categories</a>, minor ticks are not supported.</p>




   */
  external dynamic get minorTickInterval;
  external void set minorTickInterval (dynamic a_minorTickInterval);
  /**
   * The pixel length of the minor tick marks.
   */
  external num get minorTickLength;
  external void set minorTickLength (num a_minorTickLength);
  /**
   * The position of the minor tick marks relative to the axis line. Can be one of <code>inside</code> and <code>outside</code>.
   */
  external String get minorTickPosition;
  external void set minorTickPosition (String a_minorTickPosition);
  /**
   * The pixel width of the minor tick mark.
   */
  external num get minorTickWidth;
  external void set minorTickWidth (num a_minorTickWidth);
  /**
   * The distance in pixels from the plot area to the axis line. A positive offset moves the axis with it's line, labels and ticks away from the plot area. This is typically used when two or more axes are displayed on the same side of the plot.
   */
  external num get offset;
  external void set offset (num a_offset);
  /**
   * Whether to display the axis on the opposite side of the normal. The normal is on the left side for vertical axes and bottom for horizontal, so the opposite sides will be right and top respectively. This is typically used with dual or multiple axes.
   */
  external bool get opposite;
  external void set opposite (bool a_opposite);
  /**
   * <p>An array of colored bands stretching across the plot area marking an interval on the axis.</p>



      <p>In a gauge, a plot band on the Y axis (value axis) will stretch along the perimeter of the gauge.</p>
   */
  external List<JsObject> get plotBands;
  external void set plotBands (List<JsObject> a_plotBands);
  /**
   * An array of lines stretching across the plot area, marking a specific value on one of the axes.
   */
  external List<JsObject> get plotLines;
  external void set plotLines (List<JsObject> a_plotLines);
  /**
   * Whether to reverse the axis so that the highest number is closest to the origin. If the chart is inverted, the x axis is reversed by default.
   */
  external bool get reversed;
  external void set reversed (bool a_reversed);
  /**
   * Whether to show the axis line and title when the axis has no data.
   */
  external bool get showEmpty;
  external void set showEmpty (bool a_showEmpty);
  /**
   * Whether to show the first tick label.
   */
  external bool get showFirstLabel;
  external void set showFirstLabel (bool a_showFirstLabel);
  /**
   * Whether to show the last tick label.
   */
  external bool get showLastLabel;
  external void set showLastLabel (bool a_showLastLabel);
  /**
   * For datetime axes, this decides where to put the tick between weeks. 0 = Sunday, 1 = Monday.
   */
  external num get startOfWeek;
  external void set startOfWeek (num a_startOfWeek);
  /**
   * Whether to force the axis to start on a tick. Use this option with the <code>minPadding</code> option to control the axis start.
   */
  external bool get startOnTick;
  external void set startOnTick (bool a_startOnTick);
  /**
   * <p>The amount of ticks to draw on the axis. This opens up for aligning the ticks of multiple charts or panes within a chart. This option overrides the <code>tickPixelInterval</code> option.</p>

      <p>This option only has an effect on linear axes. Datetime, logarithmic or category axes are not affected.</p>
   */
  external num get tickAmount;
  external void set tickAmount (num a_tickAmount);
  /**
   * Color for the main tick marks.
   */
  external dynamic get tickColor;
  external void set tickColor (dynamic a_tickColor);
  /**
   * <p>The interval of the tick marks in axis units. When <code>null</code>, the tick interval

      is computed to approximately follow the <a href="#xAxis.tickPixelInterval">tickPixelInterval</a> on linear and datetime axes.

      On categorized axes, a <code>null</code> tickInterval will default to 1, one category.

      Note that datetime axes are based on milliseconds, so for

      example an interval of one day is expressed as <code>24 * 3600 * 1000</code>.</p>

      <p>On logarithmic axes, the tickInterval is based on powers, so a tickInterval of 1 means

      one tick on each of 0.1, 1, 10, 100 etc. A tickInterval of 2 means a tick of 0.1, 10, 1000 etc.

      A tickInterval of 0.2 puts a tick on 0.1, 0.2, 0.4, 0.6, 0.8, 1, 2, 4, 6, 8, 10, 20, 40 etc.</p>

      <p>If the tickInterval is too dense for labels to be drawn, Highcharts may remove ticks.</p>
   */
  external num get tickInterval;
  external void set tickInterval (num a_tickInterval);
  /**
   * The pixel length of the main tick marks.
   */
  external num get tickLength;
  external void set tickLength (num a_tickLength);
  /**
   * If tickInterval is <code>null</code> this option sets the approximate pixel interval of the
      tick marks. Not applicable to categorized axis. Defaults to <code>72</code>
      for the Y axis and <code>100</code> for	the X axis.
   */
  external num get tickPixelInterval;
  external void set tickPixelInterval (num a_tickPixelInterval);
  /**
   * The position of the major tick marks relative to the axis line. Can be one of <code>inside</code> and <code>outside</code>.
   */
  external String get tickPosition;
  external void set tickPosition (String a_tickPosition);
  /**
   * A callback function returning array defining where the ticks are laid out on the axis. This overrides the default behaviour of <a href="#xAxis.tickPixelInterval">tickPixelInterval</a> and <a href="#xAxis.tickInterval">tickInterval</a>. The automatic tick positions are accessible through <code>this.tickPositions</code> and can be modified by the callback.
   */
  external Function get tickPositioner;
  external void set tickPositioner (Function a_tickPositioner);
  /**
   * An array defining where the ticks are laid out on the axis. This overrides the default behaviour of <a href="#xAxis.tickPixelInterval">tickPixelInterval</a> and <a href="#xAxis.tickInterval">tickInterval</a>.
   */
  external List<num> get tickPositions;
  external void set tickPositions (List<num> a_tickPositions);
  /**
   * The pixel width of the major tick marks.
   */
  external num get tickWidth;
  external void set tickWidth (num a_tickWidth);
  /**
   * For categorized axes only. If <code>on</code> the tick mark is placed in the center of  the category, if <code>between</code> the tick mark is placed between categories. The default is <code>between</code> if the <code>tickInterval</code> is 1, else <code>on</code>.
   */
  external String get tickmarkPlacement;
  external void set tickmarkPlacement (String a_tickmarkPlacement);
  /**
   * The axis title, showing next to the axis line.
   */
  external XAxisTitle get title;
  external void set title (XAxisTitle a_title);
  /**
   * The type of axis. Can be one of <code>"linear"</code>, <code>"logarithmic"</code>, <code>"datetime"</code> or <code>"category"</code>. In a datetime axis, the numbers are given in milliseconds, and tick marks are placed 		on appropriate values like full hours or days. In a category axis, the <a href="#series.data">point names</a> of the chart's series are used for categories, if not a <a href="#xAxis.categories">categories</a> array is defined.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Datetime axis only. An array determining what time intervals the ticks are allowed to fall on. Each array item is an array where the first value is the time unit and the  second value another array of allowed multiples. Defaults to:

      <pre>units: [[

      'millisecond', // unit name

      [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples

      ], [

      'second',

      [1, 2, 5, 10, 15, 30]

      ], [

      'minute',

      [1, 2, 5, 10, 15, 30]

      ], [

      'hour',

      [1, 2, 3, 4, 6, 8, 12]

      ], [

      'day',

      [1]

      ], [

      'week',

      [1]

      ], [

      'month',

      [1, 3, 6]

      ], [

      'year',

      null

      ]]</pre>
   */
  external List get units;
  external void set units (List a_units);
  /**
   * Whether axis, including axis title, line, ticks and labels, should be visible.
   */
  external bool get visible;
  external void set visible (bool a_visible);
}
@JS()
@anonymous
class XAxisBreaks extends OptionsObject {
  external factory XAxisBreaks ();
  /**
   * A number indicating how much space should be left between the start and the end of the break. The break size is given in axis units, so for instance on a <code>datetime</code> axis, a break size of 3600000 would indicate the equivalent of an hour.
   */
  external num get breakSize;
  external void set breakSize (num a_breakSize);
  /**
   * The point where the break starts.
   */
  external num get from;
  external void set from (num a_from);
  /**
   * Defines an interval after which the break appears again. By default the breaks do not repeat.
   */
  external num get repeat;
  external void set repeat (num a_repeat);
  /**
   * The point where the break ends.
   */
  external num get to;
  external void set to (num a_to);
}
@JS()
@anonymous
class XAxisCrosshair extends OptionsObject {
  external factory XAxisCrosshair ();
  /**
   * The color of the crosshair. Defaults to <code>#C0C0C0</code> for numeric and datetime axes, and <code>rgba(155,200,255,0.2)</code> for category axes, where the crosshair by default highlights the whole category.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * The dash style for the crosshair. See <a href="#plotOptions.series.dashStyle">series.dashStyle</a> for possible values.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Whether the crosshair should snap to the point or follow the pointer independent of points.
   */
  external bool get snap;
  external void set snap (bool a_snap);
  /**
   * The pixel width of the crosshair. Defaults to 1 for numeric or datetime axes, and for one category width for category axes.
   */
  external num get width;
  external void set width (num a_width);
  /**
   * The Z index of the crosshair. Higher Z indices allow drawing the crosshair on top of the series or behind the grid lines.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class XAxisEvents extends OptionsObject {
  external factory XAxisEvents ();
  /**
   * An event fired after the breaks have rendered.
   */
  external Function get afterBreaks;
  external void set afterBreaks (Function a_afterBreaks);
  /**
   * As opposed to the <code>setExtremes</code> event, this event fires after the final min and max values are computed and corrected for <code>minRange</code>.
   */
  external Function get afterSetExtremes;
  external void set afterSetExtremes (Function a_afterSetExtremes);
  /**
   * An event fired when a break from this axis occurs on a point.
   */
  external Function get pointBreak;
  external void set pointBreak (Function a_pointBreak);
  /**
   * An event fired when a point falls inside a break from this axis.
   */
  external Function get pointInBreak;
  external void set pointInBreak (Function a_pointInBreak);
  /**
   * <p>Fires when the minimum and maximum is set for the axis, either by calling the <code>.setExtremes()</code> method or by selecting an area in the chart. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on which library is used as the base for Highcharts.</p>



      <p>The new user set minimum and maximum values can be found by <code>event.min</code> and <code>event.max</code>. When an axis is zoomed all the way out from the "Reset zoom" button, <code>event.min</code> and <code>event.max</code> are null, and the new extremes are set based on <code>this.dataMin</code> and <code>this.dataMax</code>.</p>
   */
  external Function get setExtremes;
  external void set setExtremes (Function a_setExtremes);
}
@JS()
@anonymous
class XAxisLabels extends OptionsObject {
  external factory XAxisLabels ();
  /**
   * What part of the string the given position is anchored to. Can be one of <code>"left"</code>, <code>"center"</code> or <code>"right"</code>. Defaults to an intelligent guess based on which side of the chart the axis is on and the rotation of the label.
   */
  external String get align;
  external void set align (String a_align);
  /**
   * For horizontal axes, the allowed degrees of label rotation to prevent overlapping labels. If there is enough space, labels are not rotated. As the chart gets narrower, it will start rotating the labels -45 degrees, then remove every second label and try again with rotations 0 and -45 etc. Set it to <code>false</code> to disable rotation, which will cause the labels to word-wrap if possible.
   */
  external List<num> get autoRotation;
  external void set autoRotation (List<num> a_autoRotation);
  /**
   * When each category width is more than this many pixels, we don't apply auto rotation. Instead, we lay out the axis label with word wrap. A lower limit makes sense when the label contains multiple short words that don't extend the available horizontal space for each label.
   */
  external num get autoRotationLimit;
  external void set autoRotationLimit (num a_autoRotationLimit);
  /**
   * Polar charts only. The label's pixel distance from the perimeter of the plot area.
   */
  external num get distance;
  external void set distance (num a_distance);
  /**
   * Enable or disable the axis labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the axis label.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the label. The value is
      given by <code>this.value</code>. Additional properties for <code>this</code> are
      <code>axis</code>, <code>chart</code>, <code>isFirst</code> and <code>isLast</code>.
      Defaults to:

      <pre>function() {

      return this.value;

      }</pre>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * Horizontal axis only. When <code>staggerLines</code> is not set, <code>maxStaggerLines</code> defines how many lines the axis is allowed to add to automatically avoid overlapping X labels. Set to <code>1</code> to disable overlap detection.
   */
  @deprecated
  external num get maxStaggerLines;
  @deprecated
  external void set maxStaggerLines (num a_maxStaggerLines);
  /**
   * How to handle overflowing labels on horizontal axis. Can be undefined, <code>false</code> or <code>"justify"</code>. By default it aligns inside the chart area. If "justify", labels will not render outside the plot area. If <code>false</code>, it will not be aligned at all. If there is room to move it, it will be aligned to the edge, else it will be removed.
   */
  @deprecated
  external String get overflow;
  @deprecated
  external void set overflow (String a_overflow);
  /**
   * The pixel padding for axis labels, to ensure white space between them.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Rotation of the labels in degrees.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * Horizontal axes only. The number of lines to spread the labels over to make room or tighter labels.  .
   */
  external num get staggerLines;
  external void set staggerLines (num a_staggerLines);
  /**
   * <p>To show only every <em>n</em>'th label on the axis, set the step to <em>n</em>. Setting the step to 2 shows every other label.</p>



      <p>By default, the step is calculated automatically to avoid overlap. To prevent this, set it to 1. This usually only happens on a category axis, and is often a sign that you have chosen the wrong axis type. Read more at <a href="http://www.highcharts.com/docs/chart-concepts/axes">Axis docs</a> => What axis should I use?</p>
   */
  external num get step;
  external void set step (num a_step);
  /**
   * CSS styles for the label. Use <code>whiteSpace: 'nowrap'</code> to prevent wrapping of category labels. Use <code>textOverflow: 'none'</code> to prevent ellipsis (dots).
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The x position offset of the label relative to the tick position on the axis.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the tick position on the axis. The default makes it adapt to the font size on bottom axis.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index for the axis labels.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class XAxisPlotBands extends OptionsObject {
  external factory XAxisPlotBands ();
  /**
   * Border color for the plot band. Also requires <code>borderWidth</code> to be set.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * Border width for the plot band.  Also requires <code>borderColor</code> to be set.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The color of the plot band.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * An object defining mouse events for the plot band. Supported properties are <code>click</code>, <code>mouseover</code>, <code>mouseout</code>, <code>mousemove</code>.
   */
  external JsObject get events;
  external void set events (JsObject a_events);
  /**
   * The start position of the plot band in axis units.
   */
  external num get from;
  external void set from (num a_from);
  /**
   * An id used for identifying the plot band in Axis.removePlotBand.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * Text labels for the plot bands
   */
  external XAxisPlotBandsLabel get label;
  external void set label (XAxisPlotBandsLabel a_label);
  /**
   * The end position of the plot band in axis units.
   */
  external num get to;
  external void set to (num a_to);
  /**
   * The z index of the plot band within the chart, relative to other elements. Using the same z index as another element may give unpredictable results, as the last rendered element will be on top. Values from 0 to 20 make sense.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class XAxisPlotBandsLabel extends OptionsObject {
  external factory XAxisPlotBandsLabel ();
  /**
   * Horizontal alignment of the label. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Rotation of the text label in degrees .
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * CSS styles for the text label.
   */
  external JsObject get style;
  external void set style (JsObject a_style);
  /**
   * The string text itself. A subset of HTML is supported.
   */
  external String get text;
  external void set text (String a_text);
  /**
   * The text alignment for the label. While <code>align</code> determines where the texts anchor point is placed within the plot band, <code>textAlign</code> determines how the text is aligned against its anchor point. Possible values are "left", "center" and "right". Defaults to the same as the <code>align</code> option.
   */
  external String get textAlign;
  external void set textAlign (String a_textAlign);
  /**
   * <p>Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * Vertical alignment of the label relative to the plot band. Can be one of "top", "middle" or "bottom".
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * Horizontal position relative the alignment. Default varies by orientation.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * Vertical position of the text baseline relative to the alignment. Default varies by orientation.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class XAxisPlotLines extends OptionsObject {
  external factory XAxisPlotLines ();
  /**
   * The color of the line.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * The dashing or dot style for the plot line. For possible values see <a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/">this overview</a>.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * An object defining mouse events for the plot line. Supported properties are <code>click</code>, <code>mouseover</code>, <code>mouseout</code>, <code>mousemove</code>.
   */
  external JsObject get events;
  external void set events (JsObject a_events);
  /**
   * An id used for identifying the plot line in Axis.removePlotLine.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * Text labels for the plot bands
   */
  external XAxisPlotLinesLabel get label;
  external void set label (XAxisPlotLinesLabel a_label);
  /**
   * The position of the line in axis units.
   */
  external num get value;
  external void set value (num a_value);
  /**
   * The width or thickness of the plot line.
   */
  external num get width;
  external void set width (num a_width);
  /**
   * The z index of the plot line within the chart.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class XAxisPlotLinesLabel extends OptionsObject {
  external factory XAxisPlotLinesLabel ();
  /**
   * Horizontal alignment of the label. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Rotation of the text label in degrees. Defaults to 0 for horizontal plot lines and 90 for vertical lines.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * CSS styles for the text label.
   */
  external JsObject get style;
  external void set style (JsObject a_style);
  /**
   * The text itself. A subset of HTML is supported.
   */
  external String get text;
  external void set text (String a_text);
  /**
   * The text alignment for the label. While <code>align</code> determines where the texts anchor point is placed within the plot band, <code>textAlign</code> determines how the text is aligned against its anchor point. Possible values are "left", "center" and "right". Defaults to the same as the <code>align</code> option.
   */
  external String get textAlign;
  external void set textAlign (String a_textAlign);
  /**
   * <p>Whether to <a href="http://docs.highcharts.com/#formatting$html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * Vertical alignment of the label relative to the plot band. Can be one of "top", "middle" or "bottom".
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * Horizontal position relative the alignment. Default varies by orientation.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * Vertical position of the text baseline relative to the alignment. Default varies by orientation.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class XAxisTitle extends OptionsObject {
  external factory XAxisTitle ();
  /**
   * Alignment of the title relative to the axis values. Possible values

      are "low", "middle" or "high".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Deprecated. Set the <code>text</code> to <code>null</code> to disable the title.
   */
  @deprecated
  external String get enabled;
  @deprecated
  external void set enabled (String a_enabled);
  /**
   * The pixel distance between the axis labels or line and the title. Defaults to 0 for horizontal axes, 10 for vertical
   */
  external num get margin;
  external void set margin (num a_margin);
  /**
   * The distance of the axis title from the axis line. By default, this distance is  computed from the offset width of the labels, the labels' distance from  the axis and the title's margin. However when the offset option is set, it overrides all this.
   */
  external num get offset;
  external void set offset (num a_offset);
  /**
   * The rotation of the text in degrees. 0 is horizontal, 270 is vertical reading from bottom to top.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * CSS styles for the title. When titles are rotated they are rendered using vector graphic techniques and not all styles are applicable.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * The actual text of the axis title. It can contain basic HTML text markup like &lt;b&gt;, &lt;i&gt; and spans with style.
   */
  external String get text;
  external void set text (String a_text);
  /**
   * Horizontal pixel offset of the title position.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * Vertical pixel offset of the title position.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class YAxis extends Axis {
  external factory YAxis ();
  /**
   * Whether to allow decimals in this axis' ticks. When counting integers, like
      persons or hits on a web page, decimals must be avoided in the axis tick
      labels.
   */
  external bool get allowDecimals;
  external void set allowDecimals (bool a_allowDecimals);
  /**
   * When using an alternate grid color, a band is painted across the plot area between every other grid line.
   */
  external dynamic get alternateGridColor;
  external void set alternateGridColor (dynamic a_alternateGridColor);
  /**
   * An array defining breaks in the axis, the sections defined will be left out and all the points shifted closer to each other. Requires that the broken-axis.js module is loaded.
   */
  external List get breaks;
  external void set breaks (List a_breaks);
  /**
   * <p>If categories are present for the xAxis, names are used instead of numbers for that axis. Since Highcharts 3.0, categories can also be extracted by giving each point a <a href="#series.data">name</a> and setting axis <a href="#xAxis.type">type</a> to <code>category</code>. However, if you have multiple series, best practice remains defining the <code>categories</code> array.</p>



      <p>Example:

      <pre>categories: ['Apples', 'Bananas', 'Oranges']</pre>

      Defaults to <code>null</code>

      </p>
   */
  external List<String> get categories;
  external void set categories (List<String> a_categories);
  /**
   * The highest allowed value for automatically computed axis extremes.
   */
  external num get ceiling;
  external void set ceiling (num a_ceiling);
  /**
   * Configure a crosshair that follows either the mouse pointer or the hovered point.
   */
  external dynamic get crosshair;
  external void set crosshair (dynamic a_crosshair);
  /**
   * For a datetime axis, the scale will automatically adjust to the appropriate unit.
      This member gives the default string representations used for each unit. For an
      overview of the replacement codes, see dateFormat.
      Defaults to:

      <pre>{

      millisecond: '%H:%M:%S.%L',

      second: '%H:%M:%S',

      minute: '%H:%M',

      hour: '%H:%M',

      day: '%e. %b',

      week: '%e. %b',

      month: '%b \'%y',

      year: '%Y'

      }</pre>
   */
  external JsObject get dateTimeLabelFormats;
  external void set dateTimeLabelFormats (JsObject a_dateTimeLabelFormats);
  /**
   * Whether to force the axis to end on a tick. Use this option with the <code>maxPadding</code> option to control the axis end.
   */
  external bool get endOnTick;
  external void set endOnTick (bool a_endOnTick);
  /**
   * null
   */
  external YAxisEvents get events;
  external void set events (YAxisEvents a_events);
  /**
   * The lowest allowed value for automatically computed axis extremes.
   */
  external num get floor;
  external void set floor (num a_floor);
  /**
   * Color of the grid lines extending the ticks across the plot area.
   */
  external dynamic get gridLineColor;
  external void set gridLineColor (dynamic a_gridLineColor);
  /**
   * The dash or dot style of the grid lines. For possible values, see <a href="http://jsfiddle.net/gh/get/jquery/1.7.2/highslide-software/highcharts.com/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/">this demonstration</a>.
   */
  external String get gridLineDashStyle;
  external void set gridLineDashStyle (String a_gridLineDashStyle);
  /**
   * Polar charts only. Whether the grid lines should draw as a polygon with straight lines between categories, or as circles. Can be either <code>circle</code> or <code>polygon</code>.
   */
  external String get gridLineInterpolation;
  external void set gridLineInterpolation (String a_gridLineInterpolation);
  /**
   * The width of the grid lines extending the ticks across the plot area.
   */
  external num get gridLineWidth;
  external void set gridLineWidth (num a_gridLineWidth);
  /**
   * The Z index of the grid lines.
   */
  external num get gridZIndex;
  external void set gridZIndex (num a_gridZIndex);
  /**
   * An id for the axis. This can be used after render time to get a pointer to the axis object through <code>chart.get()</code>.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * null
   */
  external YAxisLabels get labels;
  external void set labels (YAxisLabels a_labels);
  /**
   * The color of the line marking the axis itself.
   */
  external dynamic get lineColor;
  external void set lineColor (dynamic a_lineColor);
  /**
   * The width of the line marking the axis itself.
   */
  external num get lineWidth;
  external void set lineWidth (num a_lineWidth);
  /**
   * Index of another axis that this axis is linked to. When an axis is linked to a master axis, it will take the same extremes as the master, but as assigned by min or max or by setExtremes. It can be used to show additional info, or to ease reading the chart by duplicating the scales.
   */
  external num get linkedTo;
  external void set linkedTo (num a_linkedTo);
  /**
   * The maximum value of the axis. If <code>null</code>, the max value is automatically calculated. If the <code>endOnTick</code> option is true, the <code>max</code> value might be rounded up. The actual maximum value is also influenced by  <a class="internal" href="#chart">chart.alignTicks</a>.
   */
  external num get max;
  external void set max (num a_max);
  /**
   * Solid gauge only. Unless <a href="#yAxis.stops">stops</a> are set, the color to represent the maximum value of the Y axis.
   */
  external dynamic get maxColor;
  external void set maxColor (dynamic a_maxColor);
  /**
   * Padding of the max value relative to the length of the axis. A padding of 0.05 will make a 100px axis 5px longer. This is useful when you don't want the highest data value to appear on the edge of the plot area.
   */
  external num get maxPadding;
  external void set maxPadding (num a_maxPadding);
  /**
   * Deprecated. Renamed to <code>minRange</code> as of Highcharts 2.2.
   */
  @deprecated
  external num get maxZoom;
  @deprecated
  external void set maxZoom (num a_maxZoom);
  /**
   * <p>The minimum value of the axis. If <code>null</code> the min value is automatically calculated.</p>



      <p>If the <code>startOnTick</code> option is true, the <code>min</code> value might be rounded down.</p>



      <p>The automatically calculated minimum value is also affected by <a href="#yAxis.floor">floor</a>, <a href="#yAxis.minPadding">minPadding</a>, <a href="#yAxis.minRange">minRange</a> as well as <a href="#plotOptions.series.threshold">series.threshold</a> and <a href="#plotOptions.series.softThreshold">series.softThreshold</a>.</p>
   */
  external num get min;
  external void set min (num a_min);
  /**
   * Solid gauge only. Unless <a href="#yAxis.stops">stops</a> are set, the color to represent the minimum value of the Y axis.
   */
  external dynamic get minColor;
  external void set minColor (dynamic a_minColor);
  /**
   * Padding of the min value relative to the length of the axis. A padding of 0.05 will make a 100px axis 5px longer. This is useful when you don't want the lowest data value to appear on the edge of the plot area.
   */
  external num get minPadding;
  external void set minPadding (num a_minPadding);
  /**
   * <p>The minimum range to display on this axis. The entire axis will not be allowed to span over a smaller interval than this. For example, for a datetime axis the main unit is milliseconds. If minRange is set to 3600000, you can't zoom in more than to one hour.</p>



      <p>The default minRange for the x axis is five times the smallest interval between any of the data points.</p>



      <p>On a logarithmic axis, the unit for the minimum range is the power. So a minRange of 	1 means that the axis can be zoomed to 10-100, 100-1000, 1000-10000 etc.</p>



      <p>Note that the <code>minPadding</code>, <code>maxPadding</code>, <code>startOnTick</code> and <code>endOnTick</code> settings also affect how the extremes of the axis are computed.</p>
   */
  external num get minRange;
  external void set minRange (num a_minRange);
  /**
   * The minimum tick interval allowed in axis values. For example on zooming in on an axis with daily data, this can be used to prevent the axis from showing hours. Defaults to the closest distance between two points on the axis.
   */
  external num get minTickInterval;
  external void set minTickInterval (num a_minTickInterval);
  /**
   * Color of the minor, secondary grid lines.
   */
  external dynamic get minorGridLineColor;
  external void set minorGridLineColor (dynamic a_minorGridLineColor);
  /**
   * The dash or dot style of the minor grid lines. For possible values, see <a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/">this demonstration</a>.
   */
  external String get minorGridLineDashStyle;
  external void set minorGridLineDashStyle (String a_minorGridLineDashStyle);
  /**
   * Width of the minor, secondary grid lines.
   */
  external num get minorGridLineWidth;
  external void set minorGridLineWidth (num a_minorGridLineWidth);
  /**
   * Color for the minor tick marks.
   */
  external dynamic get minorTickColor;
  external void set minorTickColor (dynamic a_minorTickColor);
  /**
   * <p>Tick interval in scale units for the minor ticks. On a linear axis, if <code>"auto"</code>,

      the minor tick interval is calculated as a fifth of the tickInterval. If

      <code>null</code>, minor ticks are not shown.</p>

      <p>On logarithmic axes, the unit is the power of the value. For example, setting

      the minorTickInterval to 1 puts one tick on each of 0.1, 1, 10, 100 etc. Setting

      the minorTickInterval to 0.1 produces 9 ticks between 1 and 10,

      10 and 100 etc. A minorTickInterval of "auto" on a log axis results in a best guess,

      attempting to enter approximately 5 minor ticks between each major tick.</p>



      <p>If user settings dictate minor ticks to become too dense, they don't make sense, and will be ignored to prevent performance problems.</a>



      <p>On axes using <a href="#xAxis.categories">categories</a>, minor ticks are not supported.</p>




   */
  external dynamic get minorTickInterval;
  external void set minorTickInterval (dynamic a_minorTickInterval);
  /**
   * The pixel length of the minor tick marks.
   */
  external num get minorTickLength;
  external void set minorTickLength (num a_minorTickLength);
  /**
   * The position of the minor tick marks relative to the axis line. Can be one of <code>inside</code> and <code>outside</code>.
   */
  external String get minorTickPosition;
  external void set minorTickPosition (String a_minorTickPosition);
  /**
   * The pixel width of the minor tick mark.
   */
  external num get minorTickWidth;
  external void set minorTickWidth (num a_minorTickWidth);
  /**
   * The distance in pixels from the plot area to the axis line. A positive offset moves the axis with it's line, labels and ticks away from the plot area. This is typically used when two or more axes are displayed on the same side of the plot.
   */
  external num get offset;
  external void set offset (num a_offset);
  /**
   * Whether to display the axis on the opposite side of the normal. The normal is on the left side for vertical axes and bottom for horizontal, so the opposite sides will be right and top respectively. This is typically used with dual or multiple axes.
   */
  external bool get opposite;
  external void set opposite (bool a_opposite);
  /**
   * An array of objects defining plot bands on the Y axis.
   */
  external List<JsObject> get plotBands;
  external void set plotBands (List<JsObject> a_plotBands);
  /**
   * An array of objects representing plot lines on the X axis
   */
  external List<JsObject> get plotLines;
  external void set plotLines (List<JsObject> a_plotLines);
  /**
   * Whether to reverse the axis so that the highest number is closest to the origin. If the chart is inverted, the x axis is reversed by default.
   */
  external bool get reversed;
  external void set reversed (bool a_reversed);
  /**
   * If <code>true</code>, the first series in a stack will be drawn on top in a positive, non-reversed Y axis. If <code>false</code>, the first series is in the base of the stack.
   */
  external bool get reversedStacks;
  external void set reversedStacks (bool a_reversedStacks);
  /**
   * Whether to show the axis line and title when the axis has no data.
   */
  external bool get showEmpty;
  external void set showEmpty (bool a_showEmpty);
  /**
   * Whether to show the first tick label.
   */
  external bool get showFirstLabel;
  external void set showFirstLabel (bool a_showFirstLabel);
  /**
   * Whether to show the last tick label.
   */
  external bool get showLastLabel;
  external void set showLastLabel (bool a_showLastLabel);
  /**
   * The stack labels show the total value for each bar in a stacked column or bar chart. The label will be placed on top of
      positive columns and below negative columns. In case of an inverted column chart or a bar chart the label is placed to
      the right of positive bars and to the left of negative bars.
   */
  external YAxisStackLabels get stackLabels;
  external void set stackLabels (YAxisStackLabels a_stackLabels);
  /**
   * For datetime axes, this decides where to put the tick between weeks. 0 = Sunday, 1 = Monday.
   */
  external num get startOfWeek;
  external void set startOfWeek (num a_startOfWeek);
  /**
   * Whether to force the axis to start on a tick. Use this option with the <code>maxPadding</code> option to control the axis start.
   */
  external bool get startOnTick;
  external void set startOnTick (bool a_startOnTick);
  /**
   * <p>Solid gauge series only. Color stops for the solid gauge. Use this in cases where a linear gradient between a <code>minColor</code> and <code>maxColor</code> is not sufficient. The stops is an array of tuples, where the first item is a float between 0 and 1 assigning the relative position in the gradient, and the second item is the color.</p>



      <p>For solid gauges, the Y axis also inherits the concept of <a href="http://api.highcharts.com/highmaps#colorAxis.dataClasses">data classes</a> from the Highmaps color axis.</p>


   */
  external dynamic get stops;
  external void set stops (dynamic a_stops);
  /**
   * <p>The amount of ticks to draw on the axis. This opens up for aligning the ticks of multiple charts or panes within a chart. This option overrides the <code>tickPixelInterval</code> option.</p>

      <p>This option only has an effect on linear axes. Datetime, logarithmic or category axes are not affected.</p>
   */
  external num get tickAmount;
  external void set tickAmount (num a_tickAmount);
  /**
   * Color for the main tick marks.
   */
  external dynamic get tickColor;
  external void set tickColor (dynamic a_tickColor);
  /**
   * <p>The interval of the tick marks in axis units. When <code>null</code>, the tick interval

      is computed to approximately follow the <a href="#xAxis.tickPixelInterval">tickPixelInterval</a> on linear and datetime axes.

      On categorized axes, a <code>null</code> tickInterval will default to 1, one category.

      Note that datetime axes are based on milliseconds, so for

      example an interval of one day is expressed as <code>24 * 3600 * 1000</code>.</p>

      <p>On logarithmic axes, the tickInterval is based on powers, so a tickInterval of 1 means

      one tick on each of 0.1, 1, 10, 100 etc. A tickInterval of 2 means a tick of 0.1, 10, 1000 etc.

      A tickInterval of 0.2 puts a tick on 0.1, 0.2, 0.4, 0.6, 0.8, 1, 2, 4, 6, 8, 10, 20, 40 etc.</p>

      <p>If the tickInterval is too dense for labels to be drawn, Highcharts may remove ticks.</p>
   */
  external num get tickInterval;
  external void set tickInterval (num a_tickInterval);
  /**
   * The pixel length of the main tick marks.
   */
  external num get tickLength;
  external void set tickLength (num a_tickLength);
  /**
   * If tickInterval is <code>null</code> this option sets the approximate pixel interval of the
      tick marks. Not applicable to categorized axis. Defaults to <code>72</code>
      for the Y axis and <code>100</code> for	the X axis.
   */
  external num get tickPixelInterval;
  external void set tickPixelInterval (num a_tickPixelInterval);
  /**
   * The position of the major tick marks relative to the axis line. Can be one of <code>inside</code> and <code>outside</code>.
   */
  external String get tickPosition;
  external void set tickPosition (String a_tickPosition);
  /**
   * A callback function returning array defining where the ticks are laid out on the axis. This overrides the default behaviour of <a href="#xAxis.tickPixelInterval">tickPixelInterval</a> and <a href="#xAxis.tickInterval">tickInterval</a>. The automatic tick positions are accessible through <code>this.tickPositions</code> and can be modified by the callback.
   */
  external Function get tickPositioner;
  external void set tickPositioner (Function a_tickPositioner);
  /**
   * An array defining where the ticks are laid out on the axis. This overrides the default behaviour of <a href="#xAxis.tickPixelInterval">tickPixelInterval</a> and <a href="#xAxis.tickInterval">tickInterval</a>.
   */
  external List<num> get tickPositions;
  external void set tickPositions (List<num> a_tickPositions);
  /**
   * The pixel width of the major tick marks.
   */
  external num get tickWidth;
  external void set tickWidth (num a_tickWidth);
  /**
   * For categorized axes only. If <code>on</code> the tick mark is placed in the center of  the category, if <code>between</code> the tick mark is placed between categories. The default is <code>between</code> if the <code>tickInterval</code> is 1, else <code>on</code>.
   */
  external String get tickmarkPlacement;
  external void set tickmarkPlacement (String a_tickmarkPlacement);
  /**
   * null
   */
  external YAxisTitle get title;
  external void set title (YAxisTitle a_title);
  /**
   * The type of axis. Can be one of <code>"linear"</code>, <code>"logarithmic"</code>, <code>"datetime"</code> or <code>"category"</code>. In a datetime axis, the numbers are given in milliseconds, and tick marks are placed 		on appropriate values like full hours or days. In a category axis, the <a href="#series.data">point names</a> of the chart's series are used for categories, if not a <a href="#xAxis.categories">categories</a> array is defined.
   */
  external String get type;
  external void set type (String a_type);
  /**
   * Datetime axis only. An array determining what time intervals the ticks are allowed to fall on. Each array item is an array where the first value is the time unit and the  second value another array of allowed multiples. Defaults to:

      <pre>units: [[

      'millisecond', // unit name

      [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples

      ], [

      'second',

      [1, 2, 5, 10, 15, 30]

      ], [

      'minute',

      [1, 2, 5, 10, 15, 30]

      ], [

      'hour',

      [1, 2, 3, 4, 6, 8, 12]

      ], [

      'day',

      [1]

      ], [

      'week',

      [1]

      ], [

      'month',

      [1, 3, 6]

      ], [

      'year',

      null

      ]]</pre>
   */
  external List get units;
  external void set units (List a_units);
  /**
   * Whether axis, including axis title, line, ticks and labels, should be visible.
   */
  external bool get visible;
  external void set visible (bool a_visible);
}
@JS()
@anonymous
class YAxisBreaks extends OptionsObject {
  external factory YAxisBreaks ();
  /**
   * A number indicating how much space should be left between the start and the end of the break. The break size is given in axis units, so for instance on a <code>datetime</code> axis, a break size of 3600000 would indicate the equivalent of an hour.
   */
  external num get breakSize;
  external void set breakSize (num a_breakSize);
  /**
   * The point where the break starts.
   */
  external num get from;
  external void set from (num a_from);
  /**
   * Defines an interval after which the break appears again. By default the breaks do not repeat.
   */
  external num get repeat;
  external void set repeat (num a_repeat);
  /**
   * The point where the break ends.
   */
  external num get to;
  external void set to (num a_to);
}
@JS()
@anonymous
class YAxisCrosshair extends OptionsObject {
  external factory YAxisCrosshair ();
  /**
   * The color of the crosshair. Defaults to <code>#C0C0C0</code> for numeric and datetime axes, and <code>rgba(155,200,255,0.2)</code> for category axes, where the crosshair by default highlights the whole category.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * The dash style for the crosshair. See <a href="#plotOptions.series.dashStyle">series.dashStyle</a> for possible values.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * Whether the crosshair should snap to the point or follow the pointer independent of points.
   */
  external bool get snap;
  external void set snap (bool a_snap);
  /**
   * The pixel width of the crosshair. Defaults to 1 for numeric or datetime axes, and for one category width for category axes.
   */
  external num get width;
  external void set width (num a_width);
  /**
   * The Z index of the crosshair. Higher Z indices allow drawing the crosshair on top of the series or behind the grid lines.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class YAxisEvents extends OptionsObject {
  external factory YAxisEvents ();
  /**
   * An event fired after the breaks have rendered.
   */
  external Function get afterBreaks;
  external void set afterBreaks (Function a_afterBreaks);
  /**
   * As opposed to the <code>setExtremes</code> event, this event fires after the final min and max values are computed and corrected for <code>minRange</code>.
   */
  external Function get afterSetExtremes;
  external void set afterSetExtremes (Function a_afterSetExtremes);
  /**
   * An event fired when a break from this axis occurs on a point.
   */
  external Function get pointBreak;
  external void set pointBreak (Function a_pointBreak);
  /**
   * An event fired when a point falls inside a break from this axis.
   */
  external Function get pointInBreak;
  external void set pointInBreak (Function a_pointInBreak);
  /**
   * <p>Fires when the minimum and maximum is set for the axis, either by calling the <code>.setExtremes()</code> method or by selecting an area in the chart. One parameter, <code>event</code>, is passed to the function. This contains common event information based on jQuery or MooTools depending on which library is used as the base for Highcharts.</p>



      <p>The new user set minimum and maximum values can be found by <code>event.min</code> and <code>event.max</code>. When an axis is zoomed all the way out from the "Reset zoom" button, <code>event.min</code> and <code>event.max</code> are null, and the new extremes are set based on <code>this.dataMin</code> and <code>this.dataMax</code>.</p>
   */
  external Function get setExtremes;
  external void set setExtremes (Function a_setExtremes);
}
@JS()
@anonymous
class YAxisLabels extends OptionsObject {
  external factory YAxisLabels ();
  /**
   * What part of the string the given position is anchored to.
      Can be one of <code>"left"</code>, <code>"center"</code> or <code>"right"</code>.
   */
  external String get align;
  external void set align (String a_align);
  /**
   * For horizontal axes, the allowed degrees of label rotation to prevent overlapping labels. If there is enough space, labels are not rotated. As the chart gets narrower, it will start rotating the labels -45 degrees, then remove every second label and try again with rotations 0 and -45 etc. Set it to <code>false</code> to disable rotation, which will cause the labels to word-wrap if possible.
   */
  external List<num> get autoRotation;
  external void set autoRotation (List<num> a_autoRotation);
  /**
   * When each category width is more than this many pixels, we don't apply auto rotation. Instead, we lay out the axis label with word wrap. A lower limit makes sense when the label contains multiple short words that don't extend the available horizontal space for each label.
   */
  external num get autoRotationLimit;
  external void set autoRotationLimit (num a_autoRotationLimit);
  /**
   * Angular gauges and solid gauges only. The label's pixel distance from the perimeter of the plot area.
   */
  external num get distance;
  external void set distance (num a_distance);
  /**
   * Enable or disable the axis labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting">format string</a> for the axis label.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the label. The value is
      given by <code>this.value</code>. Additional properties for <code>this</code> are
      <code>axis</code>, <code>chart</code>, <code>isFirst</code> and <code>isLast</code>.
      Defaults to:

      <pre>function() {

      return this.value;

      }</pre>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * Horizontal axis only. When <code>staggerLines</code> is not set, <code>maxStaggerLines</code> defines how many lines the axis is allowed to add to automatically avoid overlapping X labels. Set to <code>1</code> to disable overlap detection.
   */
  @deprecated
  external num get maxStaggerLines;
  @deprecated
  external void set maxStaggerLines (num a_maxStaggerLines);
  /**
   * How to handle overflowing labels on horizontal axis. Can be undefined, <code>false</code> or <code>"justify"</code>. By default it aligns inside the chart area. If "justify", labels will not render outside the plot area. If <code>false</code>, it will not be aligned at all. If there is room to move it, it will be aligned to the edge, else it will be removed.
   */
  @deprecated
  external String get overflow;
  @deprecated
  external void set overflow (String a_overflow);
  /**
   * The pixel padding for axis labels, to ensure white space between them.
   */
  external num get padding;
  external void set padding (num a_padding);
  /**
   * Whether to reserve space for the labels. This can be turned off when for example the labels are rendered inside the plot area instead of outside.
   */
  external bool get reserveSpace;
  external void set reserveSpace (bool a_reserveSpace);
  /**
   * Rotation of the labels in degrees.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * Horizontal axes only. The number of lines to spread the labels over to make room or tighter labels.  .
   */
  external num get staggerLines;
  external void set staggerLines (num a_staggerLines);
  /**
   * <p>To show only every <em>n</em>'th label on the axis, set the step to <em>n</em>. Setting the step to 2 shows every other label.</p>



      <p>By default, the step is calculated automatically to avoid overlap. To prevent this, set it to 1. This usually only happens on a category axis, and is often a sign that you have chosen the wrong axis type. Read more at <a href="http://www.highcharts.com/docs/chart-concepts/axes">Axis docs</a> => What axis should I use?</p>
   */
  external num get step;
  external void set step (num a_step);
  /**
   * CSS styles for the label. Use <code>whiteSpace: 'nowrap'</code> to prevent wrapping of category labels. Use <code>textOverflow: 'none'</code> to prevent ellipsis (dots).
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * The x position offset of the label relative to the tick position on the axis. Defaults to -15 for left axis, 15 for right axis.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the tick position on the axis.
   */
  external num get y;
  external void set y (num a_y);
  /**
   * The Z index for the axis labels.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class YAxisPlotBands extends OptionsObject {
  external factory YAxisPlotBands ();
  /**
   * Border color for the plot band. Also requires <code>borderWidth</code> to be set.
   */
  external dynamic get borderColor;
  external void set borderColor (dynamic a_borderColor);
  /**
   * Border width for the plot band.  Also requires <code>borderColor</code> to be set.
   */
  external num get borderWidth;
  external void set borderWidth (num a_borderWidth);
  /**
   * The color of the plot band.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * An object defining mouse events for the plot band. Supported properties are <code>click</code>, <code>mouseover</code>, <code>mouseout</code>, <code>mousemove</code>.
   */
  external JsObject get events;
  external void set events (JsObject a_events);
  /**
   * The start position of the plot band in axis units.
   */
  external num get from;
  external void set from (num a_from);
  /**
   * An id used for identifying the plot band in Axis.removePlotBand.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * In a gauge chart, this option determines the inner radius of the plot band that stretches along the perimeter. It can be given as a percentage string, like <code>"100%"</code>, or as a pixel number, like <code>100</code>. By default, the inner radius is controlled by the <a href="#yAxis.plotBands.thickness">thickness</a> option.
   */
  external dynamic get innerRadius;
  external void set innerRadius (dynamic a_innerRadius);
  /**
   * Text labels for the plot bands
   */
  external YAxisPlotBandsLabel get label;
  external void set label (YAxisPlotBandsLabel a_label);
  /**
   * In a gauge chart, this option determines the outer radius of the plot band that stretches along the perimeter. It can be given as a percentage string, like <code>"100%"</code>, or as a pixel number, like <code>100</code>.
   */
  external dynamic get outerRadius;
  external void set outerRadius (dynamic a_outerRadius);
  /**
   * In a gauge chart, this option sets the width of the plot band stretching along the perimeter. It can be given as a percentage string, like <code>"10%"</code>, or as a pixel number, like <code>10</code>. The default value 10 is the same as the default <a href="#yAxis.tickLength">tickLength</a>, thus making the plot band act as a background for the tick markers.
   */
  external dynamic get thickness;
  external void set thickness (dynamic a_thickness);
  /**
   * The end position of the plot band in axis units.
   */
  external num get to;
  external void set to (num a_to);
  /**
   * The z index of the plot band within the chart, relative to other elements. Using the same z index as another element may give unpredictable results, as the last rendered element will be on top. Values from 0 to 20 make sense.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class YAxisPlotBandsLabel extends OptionsObject {
  external factory YAxisPlotBandsLabel ();
  /**
   * Horizontal alignment of the label. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Rotation of the text label in degrees .
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * CSS styles for the text label.
   */
  external JsObject get style;
  external void set style (JsObject a_style);
  /**
   * The string text itself. A subset of HTML is supported.
   */
  external String get text;
  external void set text (String a_text);
  /**
   * The text alignment for the label. While <code>align</code> determines where the texts anchor point is placed within the plot band, <code>textAlign</code> determines how the text is aligned against its anchor point. Possible values are "left", "center" and "right". Defaults to the same as the <code>align</code> option.
   */
  external String get textAlign;
  external void set textAlign (String a_textAlign);
  /**
   * <p>Whether to <a href="http://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * Vertical alignment of the label relative to the plot band. Can be one of "top", "middle" or "bottom".
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * Horizontal position relative the alignment. Default varies by orientation.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * Vertical position of the text baseline relative to the alignment. Default varies by orientation.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class YAxisPlotLines extends OptionsObject {
  external factory YAxisPlotLines ();
  /**
   * The color of the line.
   */
  external dynamic get color;
  external void set color (dynamic a_color);
  /**
   * The dashing or dot style for the plot line. For possible values see <a href="http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/">this overview</a>.
   */
  external String get dashStyle;
  external void set dashStyle (String a_dashStyle);
  /**
   * An object defining mouse events for the plot line. Supported properties are <code>click</code>, <code>mouseover</code>, <code>mouseout</code>, <code>mousemove</code>.
   */
  external JsObject get events;
  external void set events (JsObject a_events);
  /**
   * An id used for identifying the plot line in Axis.removePlotLine.
   */
  external String get id;
  external void set id (String a_id);
  /**
   * Text labels for the plot bands
   */
  external YAxisPlotLinesLabel get label;
  external void set label (YAxisPlotLinesLabel a_label);
  /**
   * The position of the line in axis units.
   */
  external num get value;
  external void set value (num a_value);
  /**
   * The width or thickness of the plot line.
   */
  external num get width;
  external void set width (num a_width);
  /**
   * The z index of the plot line within the chart.
   */
  external num get zIndex;
  external void set zIndex (num a_zIndex);
}
@JS()
@anonymous
class YAxisPlotLinesLabel extends OptionsObject {
  external factory YAxisPlotLinesLabel ();
  /**
   * Horizontal alignment of the label. Can be one of "left", "center" or "right".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Rotation of the text label in degrees. Defaults to 0 for horizontal plot lines and 90 for vertical lines.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * CSS styles for the text label.
   */
  external JsObject get style;
  external void set style (JsObject a_style);
  /**
   * The text itself. A subset of HTML is supported.
   */
  external String get text;
  external void set text (String a_text);
  /**
   * The text alignment for the label. While <code>align</code> determines where the texts anchor point is placed within the plot band, <code>textAlign</code> determines how the text is aligned against its anchor point. Possible values are "left", "center" and "right". Defaults to the same as the <code>align</code> option.
   */
  external String get textAlign;
  external void set textAlign (String a_textAlign);
  /**
   * <p>Whether to <a href="http://docs.highcharts.com/#formatting$html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * Vertical alignment of the label relative to the plot band. Can be one of "top", "middle" or "bottom".
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * Horizontal position relative the alignment. Default varies by orientation.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * Vertical position of the text baseline relative to the alignment. Default varies by orientation.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class YAxisStackLabels extends OptionsObject {
  external factory YAxisStackLabels ();
  /**
   * Defines the horizontal alignment of the stack total label.  Can be one of <code>"left"</code>, <code>"center"</code> or <code>"right"</code>. The default value is calculated at runtime and depends on orientation and whether  the stack is positive or negative.
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Enable or disable the stack total labels.
   */
  external bool get enabled;
  external void set enabled (bool a_enabled);
  /**
   * A <a href="http://docs.highcharts.com/#formatting">format string</a> for the data label. Available variables are the same as for <code>formatter</code>.
   */
  external String get format;
  external void set format (String a_format);
  /**
   * Callback JavaScript function to format the label. The value is  given by <code>this.total</code>. Defaults to:
      <pre>function() {
      return this.total;
      }</pre>
   */
  external Function get formatter;
  external void set formatter (Function a_formatter);
  /**
   * Rotation of the labels in degrees.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * CSS styles for the label.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * The text alignment for the label. While <code>align</code> determines where the texts anchor point is placed with regards to the stack, <code>textAlign</code> determines how the text is aligned against its anchor point. Possible values are <code>"left"</code>, <code>"center"</code> and <code>"right"</code>. The default value is calculated at runtime and depends on orientation and whether the stack is positive or negative.
   */
  external String get textAlign;
  external void set textAlign (String a_textAlign);
  /**
   * Whether to <a href="http://docs.highcharts.com/#formatting$html">use HTML</a> to render the labels.
   */
  external bool get useHTML;
  external void set useHTML (bool a_useHTML);
  /**
   * Defines the vertical alignment of the stack total label. Can be one of <code>"top"</code>, <code>"middle"</code> or <code>"bottom"</code>. The default value is calculated at runtime and depends on orientation and whether  the stack is positive or negative.
   */
  external String get verticalAlign;
  external void set verticalAlign (String a_verticalAlign);
  /**
   * The x position offset of the label relative to the left of the stacked bar. The default value is calculated at runtime and depends on orientation and whether the stack is positive or negative.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * The y position offset of the label relative to the tick position on the axis. The default value is calculated at runtime and depends on orientation and whether  the stack is positive or negative.
   */
  external num get y;
  external void set y (num a_y);
}
@JS()
@anonymous
class YAxisTitle extends OptionsObject {
  external factory YAxisTitle ();
  /**
   * Alignment of the title relative to the axis values. Possible values

      are "low", "middle" or "high".
   */
  external String get align;
  external void set align (String a_align);
  /**
   * Deprecated. Set the <code>text</code> to <code>null</code> to disable the title.
   */
  @deprecated
  external String get enabled;
  @deprecated
  external void set enabled (String a_enabled);
  /**
   * The pixel distance between the axis labels and the title. Positive values are outside the axis line, negative are inside.
   */
  external num get margin;
  external void set margin (num a_margin);
  /**
   * The distance of the axis title from the axis line. By default, this distance is  computed from the offset width of the labels, the labels' distance from  the axis and the title's margin. However when the offset option is set, it overrides all this.
   */
  external num get offset;
  external void set offset (num a_offset);
  /**
   * The rotation of the text in degrees. 0 is horizontal, 270 is  vertical reading from bottom to top.
   */
  external num get rotation;
  external void set rotation (num a_rotation);
  /**
   * CSS styles for the title. When titles are rotated they are rendered using vector graphic techniques and not all styles are applicable.
   */
  external dynamic get style;
  external void set style (dynamic a_style);
  /**
   * The actual text of the axis title. Horizontal texts can contain HTML,
      but rotated texts are painted using vector techniques and must be
      clean text. The Y axis title is disabled by setting the <code>text</code>
      option to <code>null</code>.
   */
  external String get text;
  external void set text (String a_text);
  /**
   * Horizontal pixel offset of the title position.
   */
  external num get x;
  external void set x (num a_x);
  /**
   * Vertical pixel offset of the title position.
   */
  external num get y;
  external void set y (num a_y);
}

